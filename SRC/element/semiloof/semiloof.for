C*** STUDENTS FRONTAL SOLUTION PACKAGE, WITH VERY EXTENSIVE DIAGNOSTICS.
C
C*** WRITTEN AT SWANSEA, 1973, BY BRUCE IRONS, REVISED IN CALGARY, 1978.
C
C*** SEMILOOF ASSEMBLED FIRST BY ABDELFATTAH ELSAWAF, U. OF CALGARY 1976
C
C	  LISTING OF SUBROUTINES IN FEMSKI			    LINE
C
C    MASTER SEGMENT - DEFINE BASIC DIMENSIONS, CALL ROUTINES	       1
C    NURSE - READ JOB DIMENSIONS, NODAL CONNECTIONS, PROPERTY LISTS  157
C    DOCTOR - COLLECT AND ACTUALLY PRINT DIAGNOSTICS, FROM NURSE ETC.352
C    INPUT - READ REMAINING INPUT DATA. 			     459
C    MATRON - DO MASSIVE DIAGNOSTIC TESTS.			     570
C    NFUNC - FUNCTION, ADDRESSES IN SYMMETRIC MATRICES, AS VECTORS.  822
C    ELFILE - CALL SUBROUTINES, COLLECT FILE OF ELEMENT MATRICES.    835
C    FRONT - ASSEMBLE AND SOLVE EQUATIONS: REAL-TIME DIAGNOSTICS.    947
C    STRESS - USE STRESS MATRICES, TO FIND AND PRINT STRESS VALUES. 1367
C    PRINPL - FIND PRINCIPAL STRESSES.				    1508
C    SCALAR - SCALAR PRODUCT OF TWO VECTORS.			    1616
C    VECTOR - VECTOR PRODUCT OF TWO VECTORS.			    1631
C    SUNDRY - ALL ISOPARAMETRIC ELEMENTS, TYPE 1 - 6.		    1648
C    ISOPAR - GENERAL SHAPE SUBROUTINE FOR ISOPARAMETRIC ELEMENTS.  1879
C    MATINV - UNSYMMETRICAL MATRIX INVERSION, IN VECTOR FORM.	    1951
C    BEAM - SIMPLE 3D BEAM, ELEMENT TYPE 7.			    2035
C    BEMSHA - SHAPE FUNCTION FOR SIMPLE BEAM.			    2097
C    HBRQD - HYBRID 4-NODE QUADRILATERAL, TYPE 8.		    2207
C    HBRBRK - HYBRID 8-NODE BRICK, TYPE 9			    2397
C    ISOQS  - SHAPE FUNCTION ROUTINE FOR BOTH HYBRID ELEMENTS.	    2592
C    FLEX   - FORMS GENERALIZED FLEXIBILITY MATRIX FOR HYBRIDS.     2697
C    ELCOND - CONDENSATION, RECOVERY, AND REDUCTION FOR HYBRIDS.    2726
C    HBRPLT - HYBRID 4-NODE PLATE BENDING ELEMENT, TYPE 10	    2821
C    PLATE - SHAPE FUNCTION SUBROUTINE FOR THE ABOVE		    2920
C    MOMNTS - GENERATES THE MOMENT FIELDS FOR BASIS OF ABOVE	    3204
C    PSHAPE - GENERATES CONFORMING SLOPES AND DISPLACEMENTS FOR IT  3260
C    TRIBEN - TRIANGLE IN PLATE BENDING, ALSO TYPE 10		    3362
C    NAGWA - SHAPE FUNCTION SUBROUTINE FOR THE ABOVE		    3446
C    SHELL - SEMILOOF CURVED SHELL ELEMENT, MAIN CALLING ROUTINE    3593
C    HALOOF - WICKED SHAPE FUNCTION SUBROUTINE, FOR SEMILOOF	    3707
C    SLBEAM - SEMILOOF, ASSOCIATED SPECIAL BEAM ELEMENT 	    4244
C    LOFBEM - SHAPE FUNCTION FOR THE SEMILOOF BEAM		    4426
C    SFRBEM - ALGEBRAIC SHAPE FUNCTIONS FOR THE ABOVE		    4572
C    SFR - ALGEBRAIC SHAPE FUNCTION GENERATOR, INCLUDING SEMILOOF.  4607
C    BLOCK DATA - MOSTLY COEFFICIENTS SEMILOOF ETC. ALSO DIMENSIONS.4710
C
C*** STATE THE OVERALL DIMENSIONS - THIS SECTION MUST BE KEPT CONSISTENT

!      PROGRAM FEMSKI
!
!      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
!      COMMON/DOC/NASTY(100)
!      DIMENSION VEC(3500), NVEC(7000)
!      CHARACTER TITLE*120
!      EQUIVALENCE (VEC(1),NVEC(1))
!      OPEN(1, FORM='UNFORMATTED',STATUS='REPLACE')
!      OPEN(2, FORM='UNFORMATTED',STATUS='REPLACE')
!      OPEN(3, FORM='UNFORMATTED',STATUS='REPLACE')
!      OPEN(4, FORM='UNFORMATTED',STATUS='REPLACE')
!      OPEN(5, FILE='beam.IN',FORM='FORMATTED',STATUS='OLD')
!      OPEN(6, FILE='RESULTS',FORM='FORMATTED',STATUS='REPLACE')
!      OPEN(7, FORM='UNFORMATTED',STATUS='REPLACE')
!      OPEN(99,FILE='FEMBBOB',FORM = 'FORMATTED',STATUS='REPLACE')
!      LENVEC = 3500
!      INTEG = 2
!      READ(5,500) TITLE
! 500  FORMAT(A120)
!      WRITE(6,600) TITLE
! 600  FORMAT(1X,A120//)
!      WRITE(6,601) LENVEC, INTEG
! 601  FORMAT(/46H LENGTH OF VECTOR OF FLOATING WORDS = LENVEC =,I5/
!     .	 52H NUMBER OF INTEGER WORDS PER FLOATING WORD = INTEG =,I2)
!C
!C*** WITH A NEW JOB, WE COMPLETELY RE-WORK HOUSEKEEPING AND DIAGNOSTICS.
!C
!    2 NEWJOB = 1
!      IFCOEF = 1
!C
!C*** DIAGNOSE SOME ERRORS IN THE EARLY CARDS, AND START THE HOUSEKEEPING
!C
!      LENINT = LENVEC*INTEG
!      CALL NURSE(INTEG, IPROP, ITERAT, I1, I2, I3, I4, JPROP, J1, J2,
!     .	 J3, J4, J5, K1, K2, K3, LENINT, LENVEC, LNOMAX, MAXRHS,
!     .	 MAXTRS, NDFMAX, NDIM, NELZ, NEWRHS, NEXTIF, NFIX, NLOAD,
!     .	 NODMAX, NVEC(1), VEC(1))
!C
!C*** NOW INTERROGATE ERROR LIST IN DOCTOR, THE LIST AS IT EXISTS SO FAR.
!C
!      CALL DOCTOR(0,0)
!C
!C*** IF NO FATAL ERRORS, READ THE MAJORITY OF THE REMAINING DATA CARDS.
!C
!      CALL INPUT(VEC(J2), IPROP, JPROP, NVEC(I4), LENINT, LENVEC,
!     .	 NVEC(I1), LNOMAX, NDFMAX, NDIM, NELZ, NEWRHS, NEXTIF, NFIX,
!     .	 NLOAD, NVEC(I3), NVEC(K1), NVEC(K2), NODMAX, NVEC(1), VEC(1),
!     .	 VEC(J3), VEC(J4), VEC(J1), VEC(J5))
!C
!C*** DIAGNOSE ALMOST ALL THE ERRORS AND PREPARE FOR THE FRONTAL SOLUTION
!C
!    4 CALL MATRON(VEC(J2), IFCOEF, INTEG, JPROP, J3, NVEC(I4), K3, K4,
!     .	 LENVEC, LIMFRO, NVEC(I1), LNOMAX, NVEC(1), NVEC(I2), LVMAX,
!     .	 L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14,
!     .	 MAXRHS, MAXTRS, M1, M2, M3, NBUFZ, NDFMAX, NVEC(K3), NDIM,
!     .	 NELZ, NEWJOB, NEWRHS, NEXTIF, NFIX, NLOAD, NVEC(I3),
!     .	 NVEC(K1), NODMAX, NVEC(K2))
!C
!C*** WRITE ANY ERROR DIAGNOSTICS, WITH THE ASSOCIATED DESCRIPTIVE NUMBER
!C
!      CALL DOCTOR(0,0)
!C
!C*** TO AVOID HANDLING UNINITIALIZED QUANTITIES, SET MANY ARRAYS TO ZERO
!C
!      LW = J3 + NEWJOB*(L4-J3)
!      DO 6 L = LW,L12
!    6 VEC(L) = 0.0
!C
!C*** COMPUTE THE ELEMENT STIFFNESS FILE, AND ALSO THE ELEMENT LOAD FILE.
!C
!      LCOEF = NFUNC(LVMAX,LVMAX)
!      IF(IFCOEF.EQ.1) CALL ELFILE(VEC(J2), VEC(L2), VEC(L1), IPROP,
!     .	 JPROP, LCOEF, NVEC(I1), LNOMAX, NVEC(1), NVEC(I2),
!     .	 LVMAX, MAXRHS, MAXTRS, NDIM, NELZ, NEWRHS, NODMAX, VEC(L3),
!     .	 VEC(J1))
!C
!C*** MERGE AND SOLVE THE EQUATIONS, USING FRONTAL GAUSSIAN ELIMINATION.
!C
!      MCOEF = NFUNC(LIMFRO,LIMFRO)
!      CALL FRONT(VEC(L10), VEC(L2), VEC(L1), VEC(L11), VEC(L12),
!     .	 VEC(L14), VEC(L13), IFCOEF, ITERAT, JPROP, NVEC(I4), LCOEF,
!     .	 NVEC(K4), LIMFRO, NVEC(I1), LNOMAX, NVEC(1), NVEC(I2), LVMAX,
!     .	 MAXRHS, MAXTRS, MCOEF, NVEC(M2), NBUFZ, NVEC(M3), NDFMAX, NELZ,
!     .	 NEWRHS, NEXTIF, NFIX, NLOAD, NVEC(I3), NVEC(K3), NVEC(K1),
!     .	 NVEC(K2), NVEC(M1), VEC(L9), VEC(L7), VEC(L6), VEC(L8),
!     .	 VEC(L3), VEC(L5), VEC(L4), VEC(J3), VEC(J4), VEC(J5))
!C
!C*** PRESENT THE FINAL REPORT, MENTIONING ANY PECULIARITIES ENCOUNTERED.
!C
!      CALL DOCTOR(0,0)
!C
!C*** NEXT IS A RE-SOLUTION, A NEW JOB, OR AN UPDATE OF THE COEFFICIENTS.
!C
!      READ(5,502, END = 8) NEWRHS, IFCOEF, NEWJOB
! 502  FORMAT(40I2)
!      WRITE(6,602) NEWJOB, IFCOEF, NEWRHS
! 602  FORMAT(//32H NEW SOLUTION.  IS IT A NEW JOB.,I2/
!     .	 28H ARE THERE NEW COEFFICIENTS.,I3,6X,
!     .	 12H NOW WE HAVE,I3,18H RIGHT HAND SIDES.)
!      NLOAD = 0
!      NEXTIF = 0
!      IF(NEWJOB.NE.0) GO TO 2
!      IF(IFCOEF.NE.0) IFCOEF = 1
!      GO TO 4
!    8 CLOSE(1)
!      CLOSE(2)
!      CLOSE(3)
!      CLOSE(4)
!      CLOSE(7)
!      STOP
!      END
      SUBROUTINE NURSE(INTEG, IPROP, ITERAT, I1, I2, I3, I4, JPROP, J1,
     .		      J2, J3, J4, J5, K1, K2, K3, LENINT, LENVEC,
     .	 LNOMAX, MAXRHS, MAXTRS, NDFMAX, NDIM, NELZ, NEWRHS, NEXTIF,
     .	 NFIX, NLOAD, NODMAX, NVEC, VEC)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION NVEC(LENINT), NTEMP(21), TEMP(7), VEC(LENVEC)
      COMMON/SYSTEM/MAXDIM(12,3), NDF(8,12)
      CHARACTER GARB*13, JUNK*1, QUEST*64, WORD(7)*11, BLANK*11
      DATA BLANK/'           '/
C166
C*** READ THE FIRST CARD, AND ECHO IT IN THE PRINTOUT WITH MINIMUM DELAY
C
      DO 1 I = 1,2
    1 READ(5,501) JUNK
 501  FORMAT(A1)
      READ(5,*, ERR = 22, END = 22) NELZ, NFIX, NLOAD, NEXTIF, NEWRHS,
     .	 MAXRHS, ITERAT
      READ(5,501) JUNK
      IF(NEWRHS.EQ.0) NEWRHS = 1
      IF(ITERAT.EQ.0) MAXRHS = NEWRHS
      WRITE(6,601) NELZ, NFIX, NLOAD, NEXTIF, NEWRHS, MAXRHS, ITERAT
 601  FORMAT(/37H *** WE HAVE A NEW JOB, SO NEWJOB = 1//
     .	 56H FIRST WE CALL SUBROUTINE NURSE, FOR OBVIOUS DIAGNOSTICS//
     .	 39H IT IS NOT A RE-SOLUTION, SO IFCOEF = 1//
     .	 28H NUMBER OF ELEMENTS = NELZ =,I4/
     .	 48H NUMBER OF NODES WITH SOME FIXED VALUES = NFIX =,I3/
     .	 48H NUMBER OF NODES WITH ADDITIONAL LOADS = NLOAD =,I4/
     .	 55H NUMBER OF NODES WITH ADDITIONAL STIFFNESSES = NEXTIF =,I4/
     .	 38H NUMBER OF RIGHT HAND SIDES = NEWRHS =,I3/
     .	 52H MAXIMUM R.H.S. ENVISAGED IN RE-SOLUTIONS = MAXRHS =,I3/
     .	 37H IS IT AN ITERATIVE PROBLEM. ITERAT =,I2)
C
C*** CREATE THE FATAL DIAGNOSTIC MESSAGES, WHICH WILL STOP THE MACHINE.
C
      IF(NELZ.LE.0) CALL DOCTOR(-1,1)
      LENGTH = 21*NELZ
      IF(LENGTH.GT.LENINT) CALL DOCTOR(-2,LENGTH)
      IF(NEXTIF.LT.0. OR .NLOAD.LT.0. OR .NEWRHS.LT.0. OR .ITERAT.LT.0)
     .	 CALL DOCTOR(3,1)
C
C*** COMPUTE DIMENSIONAL QUANTITIES, WHICH MIGHT OTHERWISE BE INPUT DATA
C
      IPROP = 0
      JPROP = 0
      LNOMAX = 0
      MAXTRS = 0
      NDFMAX = 0
      NDIM = 0
      NODMAX = 0
C
C*** READ THE PROPERTY NUMBER OF EACH ELEMENT, AND THE NODAL CONNECTIONS
C
      MAXTYP = 12
      WRITE(6,602) MAXTYP
 602  FORMAT(/51H NUMBER OF ELEMENT TYPES NOW IMPLEMENTED = MAXTYP =,I3
     .	 //8H ELEMENT,6X,8HPROPERTY,4X,
     .	 20HNODE NUMBERS = LNODS/7H NUMBER,5X,7H= LPROP/)
      DO 4 L = 1,NELZ
      READ(5,*, ERR = 23, END = 23) NEL, LPOP, (NTEMP(NOD), NOD = 1,8)
      IF(NEL.NE.L) CALL DOCTOR(4,NEL)
      IF(LPOP.LE.0) CALL DOCTOR(5,NEL)
      IF(LPOP.GT.JPROP) JPROP = LPOP
      NVEC(L) = LPOP
      DO 2 NOD = 1,8
      NUMBER = NTEMP(NOD)
      IF(NUMBER.EQ.0) GO TO 3
      NVEC(NELZ+20*(L-1)+NOD) = NUMBER
      IF(NUMBER.GT.NODMAX) NODMAX = NUMBER
      IF(NOD.GT.LNOMAX) LNOMAX = NOD
    2 CONTINUE
    3 IF(NOD.EQ.1) CALL DOCTOR(6,NEL)
C
C*** PRINT IT AND PUT THE NODE NUMBERS IN THEIR FINAL LOCATIONS IN LNODS
C
    4 WRITE(6,604) NEL, LPOP, (NTEMP(NO), NO = 1,NOD-1)
 604  FORMAT(1X,I4,I13,6X,20I4)
      DO 6 L = 1,NELZ
      DO 6 NOD = 1,LNOMAX
    6 NVEC(NELZ+LNOMAX*(L-1)+NOD) = NVEC(NELZ+20*(L-1)+NOD)
C
C*** AND CORRESPONDING PROPERTY LIST HEADINGS IN THE DATA FILE, FILE05.
C
      DO 10 JP = 1,JPROP
      READ(5,503, ERR = 24, END = 24) GARB, JPRO
 503  FORMAT(A13,I2,A64)
      IF(JPRO.NE.JP) CALL DOCTOR(7,JPRO)
      READ(5,503, ERR = 25, END = 25) GARB, LTYP, QUEST
      WRITE(6,606) JPRO, LTYP, QUEST
 606  FORMAT(/21H PROPERTY LIST NUMBER,I3,4X,12HELEMENT TYPE,I3,9X,A64/)
      NVEC(NELZ*(LNOMAX+1)+JP) = LTYP
      IF(LTYP.LT.0. OR .LTYP.GT.MAXTYP) CALL DOCTOR(8,JPRO)
      NDF(1,LTYP) = -IABS(NDF(1,LTYP))
      IF(LTYP.EQ.6) NEWRHS = 3
      MAXRHS = NEWRHS
      MAXIP = MAXDIM(LTYP,3)
      DO 8 ISTART = 1,MAXIP,7
      DO 7 I = 1,2
      READ(5,505, END = 26) (WORD(J), J = 1,7)
 505  FORMAT(2X,7A11)
    7 WRITE(6,608) (WORD(J), J = 1,7)
 608  FORMAT(6X,7(5X,A11))
C
C*** ALSO THE PROPERTIES THEMSELVES, INTO TEMPORARY STORAGE LOCATIONS.
C
      READ(5,*, ERR = 26, END = 26) (TEMP(I), I = 1,7)
      WRITE(6,610) (TEMP(I), I = 1,7)
 610  FORMAT(7X,7E16.6)
      IDEL = (NELZ*(LNOMAX+1)+JPROP+2*NFIX+1)/INTEG
      DO 8 I = 1,7
      IPRO = ISTART - 1 + I
      IF(WORD(I).NE.BLANK) IWORD = IPRO
      IF(TEMP(I).NE.0.0) LASTNZ = IPRO
    8 VEC(IDEL+21*(JP-1)+IPRO) = TEMP(I)
      IF(IWORD.NE.MAXIP) CALL DOCTOR(100,JP)
      IF(LASTNZ.GT.MAXIP) CALL DOCTOR(9,JP)
      IF(LASTNZ.LT.MAXIP) CALL DOCTOR(101,JP)
C
C*** THESE ITEMS BECOME THE SOURCE OF SEVERAL OF THE BASIC JOB-DIMENSION
C
      IF(MAXIP.GT.IPROP) IPROP = MAXIP
      ND = MAXDIM(LTYP,1)
      IF(NDIM.NE.ND. AND .NDIM.NE.0) CALL DOCTOR(10,JP)
      NDIM = ND
      IF(MAXTRS.LT.MAXDIM(LTYP,2)) MAXTRS = MAXDIM(LTYP,2)
      DO 10 NOD = 1,8
      IF(NDF(NOD,LTYP).GT.NDFMAX) NDFMAX = NDF(NOD,LTYP)
   10 CONTINUE
      DO 12 JP = 1,JPROP
      DO 12 I = 1,IPROP
   12 VEC(IDEL+IPROP*(JP-1)+I) = VEC(IDEL+21*(JP-1)+I)
      WRITE(6,612) NODMAX, LNOMAX, NDFMAX, NDIM, IPROP, JPROP, MAXTRS
 612  FORMAT(/31H MAXIMUM NODE NUMBER = NODMAX =,I4/
     .	 37H MAXIMUM NODES PER ELEMENT = LNOMAX =,I2/
     .	 47H MAXIMUM DEGREES OF FREEDOM PER NODE = NDFMAX =,I2/
     .	 39H NUMBER OF DIMENSIONS, 2 OR 3, = NDIM =,I2/
     .	 56H NUMBER OF PROPERTIES, E.G. THICKNESS, DENSITY = IPROP =,I3/
     .	 49H NUMBER OF SETS OF PROPERTIES AVAILABLE = JPROP =,I4/
     .	 49H MAXIMUM NUMBER OF STRESSES AT A POINT = MAXTRS =,I4)
C
C*** SOME OTHER FATAL ERRORS NOW REVEAL THEMSELVES, MAINLY SYSTEM ERRORS
C
      IF(NDIM.LT.1. OR .NDIM.GT.4) CALL DOCTOR(11,1)
      IF(MAXRHS.LT.0) CALL DOCTOR(12,1)
      IF(NEWRHS.GT.MAXRHS) CALL DOCTOR(13,1)
      IF(NDFMAX.EQ.0) CALL DOCTOR(14,1)
      IF(IPROP.EQ.0) CALL DOCTOR(15,1)
      IF(NFIX.GT.NODMAX) CALL DOCTOR(16,1)
      IF(NLOAD.GT.NODMAX) CALL DOCTOR(17,1)
      IF(NEXTIF.GT.NODMAX) CALL DOCTOR(18,1)
      IF(LENVEC.LE.0) CALL DOCTOR(19,1)
      IF(INTEG.NE.1. AND .INTEG.NE.2) CALL DOCTOR(20,1)
C
C*** CREATE THE NON-FATAL ERROR MESSAGES, WHICH SHOULD MERELY WARN USER.
C
      IF(NELZ*LNOMAX.LT.NODMAX) CALL DOCTOR(102,1)
      IF(LNOMAX.LE.NDIM) CALL DOCTOR(103,1)
      IF(NDFMAX.GT.6) CALL DOCTOR(104,1)
      IF(NDIM.NE.2. AND .NDIM.NE.3) CALL DOCTOR(105,1)
      IF(NELZ*LNOMAX/10.GT.NODMAX) CALL DOCTOR(106,1)
      IF(IPROP.GT.10) CALL DOCTOR(107,1)
      IF(JPROP.GT.50) CALL DOCTOR(108,1)
      IF(NFIX.LT.NDIM) CALL DOCTOR(109,1)
      IF(LENVEC.LE.300. OR .LENVEC.GE.100000) CALL DOCTOR(110,1)
C
C*** CREATE NUMBERS FOR ENTRY ADDRESSES IN VEC OR NVEC FOR CALLING LISTS
C
      I1 = 1 + NELZ
      I2 = I1 + LNOMAX*NELZ
      I3 = I2 + JPROP
      I4 = I3 + NFIX
      IF(INTEG.EQ.0) CALL DOCTOR(-20,1)
      J1 = (I4 + NFIX)/INTEG + 1
      J2 = J1 + IPROP*JPROP
      J3 = J2 + NODMAX*NDIM
      J4 = J3 + NFIX*NDFMAX*NEWRHS
      J5 = J4 + NLOAD*NDFMAX*NEWRHS
      K1 = (J5 + NEXTIF*NDFMAX)*INTEG + 1
      IF(NEWRHS.LE.0) K1 = K1 + (1-NEWRHS)*(NFIX+NLOAD)*NDFMAX*INTEG
      K2 = K1 + NLOAD
      K3 = K2 + NEXTIF
      LENGTH = K3/INTEG + 1
      IF(LENGTH.GT.LENVEC) CALL DOCTOR(21,LENGTH)
      RETURN
   22 CALL DOCTOR(-22,1)
   23 CALL DOCTOR(-23,1)
   24 CALL DOCTOR(-24,1)
   25 CALL DOCTOR(-25,1)
   26 CALL DOCTOR(-26,1)
      END
      SUBROUTINE DOCTOR(NERR, NDELT)
C352
C*** TO RECORD DATA ERRORS, AND TO LIST THEM IF WE INTERROGATE IT LATER.
C
      DIMENSION NERROR(150)
      CHARACTER IMAGE*80, NERALF*4, NALF*4
      EQUIVALENCE (NA,NALF)
      DATA NERROR/150*0/, NONFAT/0/, MORTS/0/
C
C*** IF NERR IS ZERO, WE WRITE THE LIST OF ERRORS AND STOP IF NECESSARY.
C
      NER = IABS(NERR)
      IF(NERR.EQ.0) GO TO 3
      IF(NER.GT.150) GO TO 22
C
C*** OTHERWISE, WE SIMPLY RECORD THE ERROR THAT WE HAVE JUST ENCOUNTERED
C
      NERROR(NER) = NERROR(NER) + NDELT
      IF(NERROR(NER).EQ.0) NERROR(NER) = 1
    2 IF(NER.LE.99) MORTS = MORTS + 1
      IF(NER.GE.100) NONFAT = NONFAT + 1
      IF(NERR.GT.0) RETURN
C
C*** NONFATAL ERRORS ARE PRESENTED FIRST REGARDLESS OF THE VALUE OF NERR
C
    3 IF(NONFAT.EQ.0) GO TO 12
      WRITE(6,600) NONFAT
 600  FORMAT(//12H *** LIST OF,I4,22H NONFATAL DATA ERRORS ,3(1H*))
      NONFAT = 0
      NER = 100
    4 NER = NER + 1
      IF(NER.GT.150) GO TO 12
      IF(NERROR(NER).EQ.0) GO TO 4
      WRITE(6,602) NER, NERROR(NER)
 602  FORMAT(/10X,5HERROR,I4,6X,17HASSOCIATED NUMBER,I6/)
      NERROR(NER) = 0
      NONFAT = 0
C
C*** LOOK THROUGH 'FEMBOOB' TO FIND THE DETAILED ERROR MESSAGE.
C
    6  CONTINUE
C    6 IF(NER.LE.9) NA = 4303372336 + NER
C      IF(NER.GE.10. AND .NER.LE.99) NA = 4303380528 + 202*(NER/10) + NER
C      IF(NER.GT.100)
C     .   NA = 4307574832 + 257024*(NER/100) + 502*(NER/10) + NER
      REWIND 99
      DO 10 LINE = 1,1500
      READ(99,990, END = 11) NERALF
 990  FORMAT(A4)
      IF(NERALF.NE.NALF) GO TO 10
      READ(99,992, END = 11, ERR = 24) LINES, IMAGE
 992  FORMAT(I1,A80)
      WRITE(6,608) IMAGE
      IF(LINES.EQ.1) GO TO 11
      DO 8 L = 1, LINES-1
      READ(99,994, END = 11) IMAGE
 994  FORMAT(A80)
    8 WRITE(6,608) IMAGE
      GO TO 11
   10 CONTINUE
      WRITE(6,603)
 603  FORMAT(32H NO ERROR MESSAGE YET IN FEMBOOB)
   11 IF(NER.LT.99) GO TO 14
      IF(NER.LT.150) GO TO 4
C
C*** ONLY IF NERR WAS NEGATIVE OR ZERO, LIST THE FATAL ERRORS, AND STOP.
C
   12 IF(MORTS.EQ.0) RETURN
      WRITE(6,604) MORTS
 604  FORMAT(//12H *** LIST OF,I4,19H FATAL DATA ERRORS ,6(1H*))
      NER = 0
   14 NER = NER + 1
      IF(NER.GT.99) GO TO 16
      IF(NERROR(NER).EQ.0) GO TO 14
      WRITE(6,602) NER, NERROR(NER)
      GO TO 6
C
C*** PRINT ALL DATA CARDS FOLLOWING A FATAL ERROR, WHEN COMPUTING STOPS.
C
   16 DO 18 I = 1,99
   18 NERROR (I) = 0
      WRITE(6,606)
 606  FORMAT(//50H NOW FOLLOWS A LISTING OF POST-DISASTER DATA CARDS/)
   20 READ(5,500, END = 26) IMAGE
 500  FORMAT(A80)
      WRITE(6,608) IMAGE
 608  FORMAT(15X,A80)
      GO TO 20
C
C*** TELL THE USER THAT HE HAS INTRODUCED A NEW AND UNACCEPTABLE ERROR.
C
   22 NERROR(28) = NERR
      GO TO 2
   24 NERROR(29) = NERR
      WRITE(6,602) NER, NERROR(NER)
      WRITE(6,610)
 610  FORMAT(/10X,39HMESSAGE NOT AVAILABLE, ERROR IN FEMBOOB)
      NERROR(NER) = 0
      GO TO 2
   26 MORTS = 0
      DO 28 I = 1,150
   28 NERROR(I) = 0
      STOP
      END
      SUBROUTINE INPUT(COORD, IPROP, JPROP, KODFIX, LENINT, LENVEC,
     .		      LNODS, LNOMAX, NDFMAX, NDIM, NELZ, NEWRHS,
     .	 NEXTIF, NFIX, NLOAD, NODFIX, NODLOD, NOSTIF, NODMAX, NVEC, VEC,
     .	 VFIX, VLOAD, VPROP, VSTIF)
C462
C*** TO READ THE VAST BULK OF ANY STANDARD DATA THAT WILL BE REQUIRED.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION COORD(NODMAX,NDIM), KODFIX(NFIX), LNODS(LNOMAX,NELZ),
     .	 NODFIX(NFIX), NODLOD(NLOAD), NOSTIF(NEXTIF), NVEC(LENINT),
     .	 TEMP(3), VFIX(NFIX,NDFMAX,NEWRHS), VLOAD(NLOAD,NDFMAX,NEWRHS),
     .	 VEC(LENVEC), VPROP(IPROP,JPROP), VSTIF(NEXTIF,NDFMAX)
      CHARACTER JUNK
      SAVE
C
C*** LABEL ALL THE NODAL COORDINATES, PRIOR TO DEFINING CERTAIN OF THEM.
C
      DO 1 N = 1,NODMAX
      DO 1 ND = 1,NDIM
    1 COORD(N,ND) = 3.3E33
      IF(NFIX.EQ.0) GO TO 3
      DO 2 NF = 1,NFIX
      DO 2 ND = 1,NDFMAX
      DO 2 NR = 1,NEWRHS
    2 VFIX(NF,ND,NR) = 0.0
    3 NFIXED = 0
C
C*** READ CERTAIN NODAL COORDINATES FINISHING WITH A LONE NEGATIVE VALUE
C
      WRITE(6,606)
 606  FORMAT(/46H NOW CALL SUBROUTINE INPUT, FOR REMAINING DATA/
     .	 /5H NODE,3X,6HFIXING,7X,1HX,10X,1HY,10X,1HZ/8X,4HCODE/)
      READ(5,500, END = 30) JUNK
 500  FORMAT(A1)
      DO 6 NOD = 1,NODMAX
      READ(5,*, ERR = 30, END = 8) N, KOD, (TEMP(ND), ND = 1,NDIM)
      NO = IABS(N)
      WRITE(6,608) NO, KOD, (TEMP(ND), ND = 1,NDIM)
 608  FORMAT(1X,I3,I7,F14.4,2F11.4)
      IF(NO.EQ.0. OR .NO.GT.NODMAX) CALL DOCTOR(-31,NO)
      IF(COORD(NO,1).NE.3.3E33) CALL DOCTOR(32,NO)
      DO 4 ND = 1,NDIM
    4 COORD(NO,ND) = TEMP(ND)
      IF(KOD.EQ.0) GO TO 5
      NFIXED = NFIXED + 1
      IF(NFIXED.GT.NFIX) CALL DOCTOR(33,NO)
      NODFIX(NFIXED) = NO
      KODFIX(NFIXED) = KOD
    5 IF(N.LT.0) GO TO 8
    6 CONTINUE
C
C*** READ THE VALUES WHICH ARE PRESCRIBED.  IN GENERAL THEY ARE NONZERO.
C
    8 READ(5,500, END = 11) JUNK
      IF(NFIXED.EQ.NFIX) GO TO 11
      WRITE(6,610)
 610  FORMAT(//4H RHS,3X,6HFIXING,5X,4HNODE,7X,4HCODE,4X,
     .	 12HFIXED VALUES/7X,6HNUMBER,3X,8H(NODFIX),3X,8H(KODFIX),
     .	 5X,6H(VFIX)/)
      DO 10 NF = NFIXED+1,NFIX
      READ(5,*, ERR = 34, END = 34) NODFIX(NF), KODFIX(NF),
     .	 ((VFIX(NF,I,NR), I = 1,NDFMAX), NR = 1,NEWRHS)
      DO 10 NR = 1,NEWRHS
   10 WRITE(6,612) NR, NF, NODFIX(NF), KODFIX(NF),
     .	 (VFIX(NF,I,NR), I = 1,NDFMAX)
 612  FORMAT(1X,I2,I8,I9,I12,3X,6F14.7)
C
C*** READ THE SELECTED ADDITIONAL POINT LOADS, ACTING AT CERTAIN NODES.
C
   11 READ(5,500, END = 14) JUNK
      IF(NLOAD.EQ.0) GO TO 14
      WRITE(6,614)
 614  FORMAT(//4H RHS,3X,4HLOAD,5X,4HNODE,8X,14HEXTERNAL LOADS/
     .	 7X,3HNO.,4X,8H= NODLOD,4X,7H= VLOAD/)
      DO 12 N = 1,NLOAD
      READ(5,*, ERR = 35, END = 35) NODLOD(N),
     .	 ((VLOAD(N,I,NR), I = 1,NDFMAX), NR = 1,NEWRHS)
      DO 12 NR = 1,NEWRHS
   12 WRITE(6,616) NR, N, NODLOD(N), (VLOAD(N,I,NR), I = 1,NDFMAX)
 616  FORMAT(1X,I2,I7,I8,8X,6F16.7)
C
C*** READ THE SELECTED ADDITIONAL DIAGONAL STIFFNESSES, IF THERE ARE ANY
C
   14 READ(5,500, END = 20) JUNK
      IF(NEXTIF.EQ.0) GO TO 20
      WRITE(6,618)
 618  FORMAT(//11H STIFFENING,3X,4HNODE,8X,22HADDITIONAL STIFFNESSES/
     .	 12X,8H= NOSTIF,4X,7H= VSTIF/)
      DO 18 N = 1,NEXTIF
      READ(5,*, ERR = 36, END = 36) NOSTIF(N),
     .	 (VSTIF(N,I), I = 1,NDFMAX)
C
C*** THEY MAY NOT BE POSITIVE, SO RISKING A NON-POSITIVE-DEFINITE MATRIX
C
      DO 16 I = 1,NDFMAX
      IF(VSTIF(N,I).LT.0.0) CALL DOCTOR(37,N)
   16 CONTINUE
   18 WRITE(6,620) N, NOSTIF(N), (VSTIF(N,I), I = 1,NDFMAX)
 620  FORMAT(1X,I4,I11,4X,6F14.7)
   20 RETURN
   30 CALL DOCTOR(-30,1)
   34 CALL DOCTOR(-34,1)
   35 CALL DOCTOR(-35,1)
   36 CALL DOCTOR(-36,1)
      END
      SUBROUTINE MATRON(COORD, IFCOEF, INTEG, JPROP, J3, KODFIX, K3, K4,
     .		       LENVEC, LIMFRO, LNODS, LNOMAX, LPROP, LTYPE,
     .	 LVMAX, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13,
     .	 L14, MAXRHS, MAXTRS, M1, M2, M3, NBUFZ, NDFMAX, NDIFRO, NDIM,
     .	 NELZ, NEWJOB, NEWRHS, NEXTIF, NFIX, NLOAD,
     .	 NODFIX, NODLOD, NODMAX, NOSTIF)
C575
C*** TO CRITICIZE THE DATA FROM INPUT, AND TO COMPUTE A FEW MORE
C
C*** DIMENSIONS NEEDED BY FRONT.  ALSO TO MAKE NEGATIVE THE LAST
C
C*** APPEARANCE OF EACH NODE NUMBER, IN THE ARRAY LNODS.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION COORD(NODMAX,NDIM), KODFIX(NFIX), LNODS(LNOMAX,NELZ),
     .	 LPROP(NELZ), LTYPE(JPROP), NDIFRO(NELZ),
     .	 NODFIX(NFIX), NODLOD(NLOAD), NOSTIF(NEXTIF)
      COMMON/SYSTEM/MAXDIM(12,3), NDF(8,12)
      SAVE
C
C*** CHECK AGAINST ENTERING SEVERAL IDENTICAL SETS OF NODAL COORDINATES.
C
      WRITE(6,600)
 600  FORMAT(/49H CALL SUBROUTINE MATRON, FOR THOROUGH DIAGNOSTICS)
      IF(NEWJOB.EQ.0) GO TO 60
      DO 10 N = 2,NODMAX
      IF(COORD(N,1).EQ.3.3E33) GO TO 10
      MZ = N - 1
      DO 8 M = 1,MZ
      DO 6 ND = 1,NDIM
      IF(COORD(N,ND).NE.COORD(M,ND)) GO TO 8
    6 CONTINUE
      CALL DOCTOR(113,1)
    8 CONTINUE
   10 CONTINUE
C
C*** CHECK LNODS FOR IMPOSSIBLE NODE NUMBERS AND ENTIRELY ZERO ELEMENTS.
C
      MAXTYP = 0
      DO 14 L = 1,NELZ
      LP = LPROP(L)
      IF(LTYPE(LP).GT.MAXTYP) MAXTYP = LTYPE(LP)
      IF(LPROP(L).LE.0) CALL DOCTOR(40,1)
      NAXEPT = 0
      DO 12 N = 1,LNOMAX
      IF(LNODS(N,L).NE.0) NAXEPT = 1
      IF(LNODS(N,L).LT.0) CALL DOCTOR(41,1)
   12 CONTINUE
      IF(NAXEPT.EQ.0) CALL DOCTOR(42,1)
C
C*** ALSO FOR A ZERO BETWEEN ANY PAIR OF NONZERO NODES IN THIS ELEMENT.
C
      DO 14 N = 2,LNOMAX
      IF(LNODS(N-1,L).EQ.0. AND .LNODS(N,L).NE.0) CALL DOCTOR(43,1)
   14 CONTINUE
C
C*** CHECK THAT A PROPERTY LIST IS NOT USED FOR SEVERAL TYPES OF ELEMENT
C
      DO 18 J = 1,JPROP
      LTYP = 0
      DO 16 L = 1,NELZ
      LPOP = LPROP(L)
      IF(LPOP.NE.J) GO TO 16
      LTYP = LTYPE(LPOP)
   16 CONTINUE
      IF(LTYP.EQ.0) CALL DOCTOR(114,LPOP)
   18 CONTINUE
C
C*** DETERMINE THE MAXIMUM NUMBER OF VARIABLES POSSESSED BY ANY ELEMENT.
C
      LVMAX = 0
      DO 22 J = 1,MAXTYP
      IF(NDF(1,J).GT.0) GO TO 22
      NDF(1,J) =  - NDF(1,J)
      LV = 0
C
C*** CHECK FEASIBILITY OF NDF = NUMBER OF DEGREES OF FREEDOM PER NODE.
C
      DO 20 N = 1,LNOMAX
      ND = NDF(N,J)
      IF(ND.LT.0) CALL DOCTOR(44,1)
      IF(N.EQ.1) GO TO 20
      IF(ND.NE.0. AND .NDF(N-1,J).EQ.0) CALL DOCTOR(45,1)
   20 LV = LV + ND
      IF(LV.EQ.0) CALL DOCTOR(46,1)
      IF(LV.GT.LVMAX) LVMAX = LV
   22 CONTINUE
C
C*** CHECK THE FEASIBILITY OF THE DATA FOR THE PRESCRIBED DEFLECTIONS.
C
      IF(NFIX.EQ.0) GO TO 26
      DO 24 N = 1,NFIX
      NF = NODFIX(N)
      IF(NF.LE.0. OR .NF.GT.NODMAX) CALL DOCTOR(47,NF)
      IF(KODFIX(N).LT.0) CALL DOCTOR(48,NF)
      IF(KODFIX(N).EQ.0) CALL DOCTOR(115,NF)
      MZ = N-1
      DO 24 M = 1,MZ
      IF(N.NE.1. AND .NF.EQ.NODFIX(M)) CALL DOCTOR(49,NF)
   24 CONTINUE
C
C*** CONTINUE CHECKING THE DATA FOR THE ADDITIONAL POINT LOADS, IF ANY.
C
   26 IF(NLOAD.EQ.0) GO TO 30
      DO 28 N = 1,NLOAD
      NL = NODLOD(N)
      IF(NL.LE.0. OR .NL.GT.NODMAX) CALL DOCTOR(50,NL)
      MZ = N - 1
      DO 28 M = 1,MZ
      IF(N.NE.1. AND .NL.EQ.NODLOD(M)) CALL DOCTOR(51,NL)
   28 CONTINUE
C
C*** CONTINUE CHECKING THE ADDITIONAL DIAGONAL STIFFNESS DATA, IF ANY.
C
   30 IF(NEXTIF.EQ.0) GO TO 34
      DO 32 N = 1,NEXTIF
      NS = NOSTIF(N)
      IF(NS.LE.0. OR .NS.GT.NODMAX) CALL DOCTOR(52,NS)
      MZ = N - 1
      DO 32 M = 1,MZ
      IF(N.NE.1. AND .NS.EQ.NOSTIF(M)) CALL DOCTOR(53,NS)
   32 CONTINUE
C
C*** ENQUIRE IF THE CAPACITY OF VEC IS ADEQUATE FOR THE REMAINING CHECKS
C
   34 LENGTH = (K3+NELZ)/INTEG + 2
      IF(LENVEC.LT.LENGTH) CALL DOCTOR(-54,LENGTH)
      DO 36 L = 1,NELZ
   36 NDIFRO(L) = 0
C
C*** CHECK FOR ANY REPETITION OF A NODE NUMBER WITHIN THE SAME ELEMENT.
C
      DO 56 N = 1,NODMAX
      LSTART = 0
      DO 42 L = 1,NELZ
      NODUPL = 0
      DO 40 NOD = 1,LNOMAX
      IF(LNODS(NOD,L).NE.N) GO TO 40
      NODUPL = NODUPL + 1
      IF(NODUPL.GT.1) CALL DOCTOR(116,1)
C
C*** SEEK THE FIRST, LAST, AND INTERMEDIATE APPEARANCES OF THE NODE, N.
C
      LTYP = LTYPE(LPROP(L))
      IF(LSTART.NE.0) GO TO 38
      LSTART = L
C
C*** CREATE NDIFRO = INCREASE OR DECREASE OF FRONTWIDTH AT EACH ELEMENT.
C
      ND = NDF(NOD,LTYP)
      NDIFRO(L) = NDIFRO(L) + ND
C
C*** AND MEANWHILE, DO FURTHER CHECKS OF THE VALUES OF NDF ACTUALLY USED
C
      IF(ND.EQ.0) CALL DOCTOR(55,NOD)
   38 IF(NDF(NOD,LTYP).NE.ND) CALL DOCTOR(56,1)
      LFIN = L
      NFIN = NOD
   40 CONTINUE
   42 CONTINUE
C
C*** AND CHANGE THE SIGN OF EACH NODE NUMBER, THE LAST TIME IT APPEARS.
C
      IF(LSTART.EQ.0) GO TO 44
      IF(LFIN.LT.NELZ) NDIFRO(LFIN+1) = NDIFRO(LFIN+1)- ND
      LNODS(NFIN,LFIN) = -N
      GO TO 56
C
C*** CHECK THAT WE HAVE NOT SPECIFIED THE COORDINATES FOR AN UNUSED NODE
C
   44 WRITE(6,604) N
 604  FORMAT(/25H *** BETTER FIND WHY NODE,I4,14H NEVER APPEARS)
      CALL DOCTOR(117,1)
      IF(COORD(N,1).NE.3.3E33) CALL DOCTOR(118,1)
C
C*** CHECK THAT AN UNUSED NODE NUMBER NEVER OCCURS IN THE SPECIAL LISTS.
C
      IF(NFIX.EQ.0) GO TO 48
      DO 46 M = 1,NFIX
      IF(NODFIX(M).EQ.N) CALL DOCTOR(119,1)
   46 CONTINUE
   48 IF(NLOAD.EQ.0) GO TO 52
      DO 50 M = 1,NLOAD
      IF(NODLOD(M).EQ.N) CALL DOCTOR(120,1)
   50 CONTINUE
   52 IF(NEXTIF.EQ.0) GO TO 56
      DO 54 M = 1,NEXTIF
      IF(NOSTIF(M).EQ.N) CALL DOCTOR(121,1)
   54 CONTINUE
   56 CONTINUE
C
C*** INTERPRET THE VECTOR NDIFRO, TO FIND THE LARGEST FRONTWIDTH NEEDED.
C
      LFRO = 0
      LIMFRO = 0
      DO 58 L = 1,NELZ
      LFRO = LFRO + NDIFRO(L)
      IF(LFRO.GT.LIMFRO) LIMFRO = LFRO
   58 CONTINUE
C
C*** COMPUTE THE REMAINING ADDRESSES IN ORIGINAL VECTOR, VEC, ALIAS NVEC
C
   60 IF(NEWRHS.LE.0) CALL DOCTOR(57,1)
      IF(NEWJOB.NE.0) NBUFZ = 1000000
      LENGTH = 0
      IFCOF = 0
   62 MAXR = MAXRHS-IFCOF*(MAXRHS-NEWRHS)
      K3 = (J3 + NDFMAX*(NEXTIF*IFCOF + MAXR*(NFIX+NLOAD*IFCOF)))*INTEG
     .	 + 1 + (NEXTIF+NLOAD)*IFCOF
      K4 = K3 + LIMFRO
      L1 = (K4 + LVMAX)/INTEG + 1
      L2 = L1 + NFUNC(LVMAX,LVMAX)*IFCOF
      L3 = L2 + LVMAX*MAXR
      L4 = L3 + MAXTRS*(LVMAX+MAXRHS)
      L5 = L4 + NFUNC(LIMFRO,LIMFRO)*IFCOF
      L6 = L5 + LIMFRO*MAXR
      L7 = L6 + LIMFRO*IFCOF
      IFRHS = NEWRHS*IFCOF
      L8 = L7 + LIMFRO*IFRHS
      L9 = L8 + MAXR
      L10 = L9 + MAXR
      L11 = L10 + MAXR
C
C*** DISCOVER HOW MANY EQUATIONS WILL FIT INTO THE BUFFER AREA REMAINING
C
      LENEQ = LIMFRO + MAXR + IFRHS + 2 + 2/INTEG
      NBUF = (LENVEC-L11)/LENEQ
      IF(NBUF.LT.NBUFZ. AND .NEWJOB.NE.0) NBUFZ = NBUF
      IF(L11+LENEQ.GT.LENGTH) LENGTH = L11 + LENEQ
      IFCOF = IFCOF + 1
      IF(IFCOF.EQ.IFCOEF) GO TO 62
C
C*** TEST AGAINST STORAGE REQUIREMENTS IMPOSSIBLE TO FULFIL IN A NEW JOB
C
      IF(NBUFZ.LT.1) CALL DOCTOR(58,LENGTH)
      L12 = L11 + LIMFRO*NBUFZ
      L13 = L12 + NEWRHS*NBUFZ
      L14 = L13 + NBUFZ
      M1 = (L14 + IFRHS*NBUFZ)*INTEG + 1
      M2 = M1 + NBUFZ
      M3 = M2 + NBUFZ
C
C*** CHECK FOR HOPELESS STORAGE DEMANDS IN A RE-SOLUTION OR NEW SOLUTION
C
      MZ = M3 + NBUFZ-1
      IF(MZ.GT.LENVEC*INTEG) CALL DOCTOR(59,MZ)
      RETURN
      END
      FUNCTION NFUNC(I,J)
C822
C*** FUNCTION TO FIND A TERM IN VECTOR REPRESENTING THE SYMMETRIC MATRIX
C
      NFUNC = J*(J-1)/2 + I
      RETURN
      END
      SUBROUTINE ELFILE(COORD, ELOAD, ELSTIF, IPROP, JPROP, LCOEF,
     .		       LNODS, LNOMAX, LPROP, LTYPE, LVMAX, MAXRHS,
     .	 MAXTRS, NDIM, NELZ, NEWRHS, NODMAX, STRESM, VPROP)
C837
C*** TO SELECT THE ELEMENT SUBROUTINE, AND TO GENERATE THE ELEMENT FILE.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION COORD(NODMAX,NDIM), ELCORD(9,4), ELOAD(LVMAX,NEWRHS),
     .	 ELSTIF(LCOEF), FRAME(3,3), LNODS(LNOMAX,NELZ), LPROP(NELZ),
     .	 LTYPE(JPROP), VPROP(IPROP,JPROP)
      COMMON/SYSTEM/MAXDIM(12,3), NDF(8,12)
      SAVE
      WRITE(6,600)
 600  FORMAT(/42H CREATE ELEMENT FILE, IN SUBROUTINE ELFILE)
C
C*** THE STRESS MATRICES WILL BE PUT ON FILE IN EACH ELEMENT SUBROUTINE.
C
      REWIND 7
C
C*** ALSO THE STIFFNESS MATRICES, AND CONTRIBUTIONS TO RIGHT HAND SIDES.
C
      REWIND 1
      REWIND 3
C
C*** WE PREPARE TO ENTER THE SUBROUTINE FOR EACH OF THE ELEMENTS IN TURN
C
      DO 20 L = 1,NELZ
      NEL = L
      NFIRST = 1
      LPOP = LPROP(NEL)
      LTYP = LTYPE(LPOP)
      NSTRES = MAXDIM(LTYP,2)
      IF(NSTRES.GT.MAXTRS) CALL DOCTOR(-60,NEL)
      LVABZ = 0
      DO 2 NOD = 1,LNOMAX
      IF(LNODS(NOD,NEL).EQ.0) GO TO 2
      LNODZ = NOD
      LVABZ = LVABZ + NDF(NOD,LTYP)
    2 CONTINUE
C
C*** WE INITIALIZE EACH ELEMENT MATRIX TO ZERO FOR NUMERICAL INTEGRATION
C
      DO 4 I = 1,LCOEF
    4 ELSTIF(I) = 0.0
      DO 6 NR = 1,NEWRHS
      DO 6 J = 1,LVABZ
    6 ELOAD(J,NR) = 0.0
      DO 8 NOD = 1,LNODZ
      NUMBER = IABS(LNODS(NOD,NEL))
      DO 8 ND = 1,NDIM
    8 ELCORD(NOD,ND) = COORD(NUMBER,ND)
      IF(LNODZ.LE.5. OR .LTYP.EQ.9) GO TO 14
C
C*** THE MIDSIDE NODES ARE EXACTLY CENTRAL, IF THE COORDINATES WERE NOT
C
      MID = LNODZ
      DO 12 KORN = 1,LNODZ,2
      IF(ELCORD(KORN,1).EQ.3.3E33) CALL DOCTOR(-61,NEL)
      IF(ELCORD(MID,1).NE.3.3E33) GO TO 12
      DO 10 ND = 1,NDIM
   10 ELCORD(MID,ND) = 0.5*(ELCORD(KORN,ND)+ELCORD(MID-1,ND))
   12 MID = KORN + 1
C
C*** CALL THE VARIOUS ELEMENT SUBROUTINES, ACCORDING TO "LTYP".
C
   14 NROWST = LVMAX + MAXRHS
      IF(LTYP.LE.6) CALL SUNDRY(ELCORD, ELOAD, ELSTIF, IPROP, JPROP,
     .	 LCOEF, LNODZ, LPOP, LTYP, LVABZ, LVMAX, MAXTRS, NDIM, NEL,
     .	 NEWRHS, NFIRST, NROWST, NSTRES, STRESM, VPROP)
      IF(LTYP.EQ.7) CALL BEAM(ELCORD, ELOAD, ELSTIF, IPROP, JPROP,
     .	 LCOEF, LNODZ, LPOP, LVABZ, LVMAX, MAXTRS, NDIM,
     .	 NEL, NEWRHS, NFIRST, NODMAX, NROWST, NSTRES, STRESM,
     .	 VPROP)
      IF(LTYP.EQ.8) CALL HBRQD(ELCORD, ELOAD, ELSTIF, IPROP, JPROP,
     $	  LPOP,  LVMAX, MAXTRS, NDIM,
     $	 NEL, NEWRHS, NFIRST, NROWST, NSTRES, STRESM, VPROP)
      IF(LTYP.EQ.9) CALL HBRBRK(ELCORD, ELOAD, ELSTIF, IPROP, JPROP,
     $	  LPOP,  LVMAX, MAXTRS,
     $	 NDIM, NEL, NEWRHS, NFIRST, NROWST, NSTRES, STRESM, VPROP)
      IF(LTYP.EQ.10) CALL HBRPLT(COORD,ELCORD, ELOAD, ELSTIF, IPROP,
     $	 JPROP,LCOEF,LNODS, LNODZ,LNOMAX,LPOP, LVABZ, LVMAX, MAXTRS,
     $	 NDIM, NEL,NELZ,NEWRHS,NODMAX, NROWST, NSTRES, STRESM, VPROP)
      IF(LTYP.EQ.11) CALL SHELL(COORD,ELCORD, ELOAD, ELSTIF,IPROP,JPROP,
     $	 LCOEF, LNODS, LNODZ, LNOMAX, LPOP, LVABZ, LVMAX, MAXTRS, NDIM,
     $	 NEL, NELZ, NEWRHS, NFIRST, NODMAX, NROWST, NSTRES, STRESM,
     $	 VPROP)
      IF(LTYP.EQ.12) CALL SLBEAM(ELCORD, ELOAD, ELSTIF, IPROP, JPROP,
     $	 LCOEF, LNODS, LNODZ, LNOMAX, LPOP, LVABZ, LVMAX, MAXTRS, NDIM,
     $	 NEL, NELZ, NEWRHS, NFIRST, NODMAX, NROWST, NSTRES, STRESM,
     $	 VPROP)
C
C*** AND WE CONFIRM THE FEASIBILITY OF THE STIFFNESS MATRIX THAT EMERGES
C
      DO 18 N = 1,LVABZ
      DIAG = ELSTIF(NFUNC(N,N))
      IF(DIAG.EQ.0.0) CALL DOCTOR(-62,NEL)
      IF(DIAG.LT.0.0) CALL DOCTOR(-63,NEL)
   18 CONTINUE
      WRITE(1) ELSTIF
      WRITE(3) ELOAD
   20 CONTINUE
      RETURN
      END
C
      SUBROUTINE FRONT(DIAGY, ELOAD, ELSTIF, EQ, EQLOD, EQRTOT, EQSIG,
     .		      IFCOEF, ITERAT, JPROP, KODFIX, LCOEF, LDEST,
     .	 LIMFRO, LNODS, LNOMAX, LPROP, LTYPE, LVMAX, MAXRHS, MAXTRS,
     .	 MCOEF, NAMEQ, NBUFZ, NDFEQ, NDFMAX, NELZ, NEWRHS, NEXTIF, NFIX,
     .	 NLOAD, NODFIX, NODFRO, NODLOD, NOSTIF, NPIVEQ, POTEGY, RTOTAL,
     .	 SIGDIG, STREGY, STRESM, SUBLOD, SUSTIF, VFIX, VLOAD, VSTIF)
C952
C*** WITH VARIABLE DEGREES OF FREEDOM, VARIABLE R.H.S., AND RE-SOLUTION.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION DIAGY(NEWRHS), ELOAD(LVMAX,NEWRHS), ELSTIF(LCOEF),
     .	 EQ(LIMFRO,NBUFZ), EQLOD(NBUFZ,NEWRHS), EQRTOT(NBUFZ,NEWRHS),
     .	 EQSIG(NBUFZ), KODFIX(NFIX), LDEST(LVMAX), LNODS(LNOMAX,NELZ),
     .	 LPROP(NELZ), LTYPE(JPROP), NAMEQ(NBUFZ), NDFEQ(NBUFZ),
     .	 NODFIX(NFIX), NODFRO(LIMFRO), NODLOD(NLOAD), NOSTIF(NEXTIF),
     .	 NPIVEQ(NBUFZ), POTEGY(NEWRHS), RTOTAL(LIMFRO,NEWRHS),
     .	 SIGDIG(LIMFRO), STREGY(NEWRHS), STRESM(1,1),
     .	 SUBLOD(LIMFRO,NEWRHS), SUSTIF(MCOEF), VFIX(NFIX,NDFMAX,NEWRHS),
     .	 VLOAD(NLOAD,NDFMAX,NEWRHS), VSTIF(NEXTIF,NDFMAX)
      COMMON/SYSTEM/MAXDIM(12,3), NDF(8,12)
      SAVE
C
C*** ZERO THE VECTOR THAT WILL MONITOR THE FRONTAL HOUSEKEEPING PROCESS.
C
      WRITE(6,600)
 600  FORMAT(/49H ASSEMBLE AND SOLVE EQUATIONS IN SUBROUTINE FRONT/)
      DO 4 N = 1,LIMFRO
    4 NODFRO(N) = 0
C
C*** AND WE PREPARE FOR THE MAGNETIC TAPE READING AND WRITING OPERATIONS
C
      LENFRO = 0
      NBUF = 0
      IF(IFCOEF.EQ.0) NBUF = NBUFZ
      IF(IFCOEF.EQ.1) REWIND 1
      REWIND 2
      IF(IFCOEF.EQ.1) REWIND 3
      REWIND 4
C
C*** WE IMMEDIATELY SET UP THE MAIN ELEMENT ASSEMBLY-CUM-REDUCTION LOOP.
C
      DO 60 L = 1,NELZ
      NEL = L
      IF(IFCOEF.EQ.1) READ(1) ELSTIF
      IF(IFCOEF.EQ.0) BACKSPACE 3
      READ(3) ELOAD
      IF(IFCOEF.EQ.0) BACKSPACE 3
C
C*** TO ASSEMBLE THE ELEMENT WE FIRST LOOK FOR ANY EXISTING DESTINATIONS
C
      LVABZ = 0
      DO 10 NOD = 1,LNOMAX
      NIC = IABS(LNODS(NOD,NEL))
      IF(NIC.EQ.0) GO TO 10
      ND = 0
      DO 6 LN = 1,LENFRO
      IF(NIC.NE.NODFRO(LN)) GO TO 6
      LVABZ = LVABZ + 1
      LDEST(LVABZ) = LN
      ND = ND + 1
    6 CONTINUE
      IF(ND.NE.0) GO TO 10
C
C*** WE MUST NOW SEEK SOME NEW EMPTY PLACES, FOR THE DESTINATION VECTOR.
C
      DO 8 N = 1,LIMFRO
      IF(NODFRO(N).NE.0) GO TO 8
      ND = ND + 1
      LVABZ = LVABZ + 1
      NODFRO(N) = NIC
      LDEST(LVABZ) = N
C
C*** SEE WHETHER WE HAVE ENOUGH DESTINATIONS YET, FOR THE CURRENT NODE.
C
      IF(ND.EQ.NDF(NOD,LTYPE(LPROP(NEL)))) GO TO 9
    8 CONTINUE
C
C*** THE NEW PLACES MIGHT DEMAND AN INCREASE IN THE CURRENT FRONTWIDTH.
C
    9 IF(LDEST(LVABZ).GT.LENFRO) LENFRO = LDEST(LVABZ)
   10 CONTINUE
C
C*** THE EQUATION R.H.S. NOW ACCEPT THE CONTRIBUTIONS FROM THIS ELEMENT.
C
      DO 14 I = 1,LVABZ
      IDEST = LDEST(I)
      DO 11 NR = 1,NEWRHS
      IF(IFCOEF.EQ.1) RTOTAL(IDEST,NR) = RTOTAL(IDEST,NR) + ELOAD(I,NR)
   11 SUBLOD(IDEST,NR) = SUBLOD(IDEST,NR) + ELOAD(I,NR)
      IF(IFCOEF.EQ.0) GO TO 14
C
C*** ASSEMBLE THE ELEMENT STIFFNESSES
C
      DO 12 J = 1,I
      JDEST = LDEST(J)
      TERM = ELSTIF(NFUNC(J,I))
      IF(IDEST.EQ.JDEST. AND .I.NE.J) TERM = TERM + TERM
      IF(JDEST.GE.IDEST) NFUN = NFUNC(IDEST,JDEST)
      IF(JDEST.LT.IDEST) NFUN = NFUNC(JDEST,IDEST)
   12 SUSTIF(NFUN) = SUSTIF(NFUN) + TERM
   14 CONTINUE
C
C*** RE-EXAMINE EACH ELEMENT NODE, TO ENQUIRE WHICH CAN BE ELIMINATED.
C
      DO 58 NOD = 1,LNOMAX
      NIC = -LNODS(NOD,NEL)
      IF(NIC.LE.0) GO TO 58
C
C*** THIS IS A UNIQUE TIME, TO SEE WHETHER EXTRA STIFFNESSES ARE PRESENT
C
      NEXTF = 0
      IF(NEXTIF*IFCOEF.EQ.0) GO TO 18
      DO 16 N = 1,NEXTIF
      IF(NOSTIF(N).NE.NIC) GO TO 16
      NEXTF = N
      GO TO 18
   16 CONTINUE
C
C*** AND AT THE SAME TIME WE ALSO ENQUIRE IF ANY EXTRA LOADS ARE PRESENT
C
   18 LOAD = 0
      IF(NLOAD*IFCOEF.EQ.0) GO TO 22
      DO 20 N = 1,NLOAD
      IF(NODLOD(N).NE.NIC) GO TO 20
      LOAD = N
      GO TO 22
   20 CONTINUE
C
C*** ENQUIRE INTO THE CODE, FOR FIXING THE NODE ABOUT TO BE ELIMINATED.
C
   22 NDZ = NDF(NOD,LTYPE(LPROP(NEL)))
      ND = 0
      KEYFIX = 0
      IF(NFIX.EQ.0) GO TO 26
      DO 24 N = 1,NFIX
      IF(NODFIX(N).NE.NIC) GO TO 24
      KOD = KODFIX(N)
C
C*** FOR EXAMPLE IT IS WORTH INVESTIGATING IF NUMBER IS IMPOSSIBLY LARGE
C
      IF(KOD.GT.10**NDZ/9) CALL DOCTOR(-66,KOD)
      KEYFIX = N
      GO TO 26
   24 CONTINUE
C
C*** FIND THE POSITIONS OF ANY VARIABLES THAT ARE READY FOR ELIMINATION.
C
   26 DO 56 NFRO = 1,LIMFRO
      IF(NODFRO(NFRO).NE.NIC) GO TO 56
      ND = ND + 1
C
C*** ASSEMBLE THE EXTRA STIFFNESSES DIRECTLY INTO THE GLOBAL STIFFNESS.
C
      IF(NEXTF.NE.0) SUSTIF(NFUNC(NFRO,NFRO))
     .	 = SUSTIF(NFUNC(NFRO,NFRO)) + VSTIF(NEXTF,ND)
C
C*** AND ALSO THE OCCASIONAL LOADS CAN BE ACCUMULATED, AT THE SAME TIME.
C
      IF(LOAD.EQ.0) GO TO 30
      DO 28 NR = 1,NEWRHS
      VLOD = VLOAD(LOAD,ND,NR)
      RTOTAL(NFRO,NR) = RTOTAL(NFRO,NR) + VLOD
   28 SUBLOD(NFRO,NR) = SUBLOD(NFRO,NR) + VLOD
C
C*** WRITE EQUATIONS TO DISC OR TO TAPE, OR READ THEM IN A RE-SOLUTION.
C
   30 NBUF = NBUF + 1
      IF(NBUF.LE.NBUFZ) GO TO 32
      NBUF = 1
      IF(IFCOEF.EQ.1) WRITE(2) EQ, EQSIG, NPIVEQ, NAMEQ, NDFEQ
      IF(IFCOEF.EQ.0) READ (2) EQ, EQSIG, NPIVEQ, NAMEQ, NDFEQ
      IF(IFCOEF.EQ.1) WRITE(4) EQLOD, EQRTOT
      IF(IFCOEF.EQ.0) WRITE(4) EQLOD
C
C    The following section is added to correct errors in back-substitution
C    communicated by H.J. Pitz, Darmstadt, West Germany.
      IF(IFCOEF.EQ.0) GOTO 31
      DO 29 NB = 1,NBUFZ
       DO 27 LFRO = 1,LIMFRO
   27	EQ(LFRO,NB) = 0.0
       EQSIG(NB) = 0.0
       NPIVEQ(NB) = 0.0
       NAMEQ(NB) = 0.0
       NDFEQ(NB) = 0.0
       DO 29 NR = 1,NEWRHS
	EQRTOT(NB,NR) = 0.0
   29 CONTINUE
   31 DO 33 NR = 1,NEWRHS
      DO 33 NB = 1,NBUFZ
      EQLOD(NB,NR) = 0.0
   33 CONTINUE
C
C***********************************************************************
C*** EXTRACT THE COEFFICIENTS OF THE NEW EQUATION READY FOR ELIMINATION.
C
   32 IF(IFCOEF.EQ.0) GO TO 36
      DO 34 I = 1,LENFRO
      IF(NFRO.LT.I) NPOS = NFUNC(NFRO,I)
      IF(NFRO.GE.I) NPOS = NFUNC(I,NFRO)
      EQ(I,NBUF) = SUSTIF(NPOS)
   34 SUSTIF(NPOS) = 0.0
C
C*** AND EXTRACT THE CORRESPONDING RIGHT HAND SIDES, ALSO FOR REDUCTION.
C
   36 DO 37 NR = 1,NEWRHS
      EQLOD(NBUF,NR) = SUBLOD(NFRO,NR)
      SUBLOD(NFRO,NR) = 0.0
      IF(IFCOEF.EQ.0) GO TO 37
      EQRTOT(NBUF,NR) = RTOTAL(NFRO,NR)
      RTOTAL(NFRO,NR) = 0.0
   37 CONTINUE
C
C*** COLLECT INFORMATION NEEDED LATER, SO AS TO INTERPRET THE EQUATIONS.
C
      NDFEQ(NBUF) = ND
      NPIVEQ(NBUF) = NFRO
      PIVOT = EQ(NFRO,NBUF)
      EQ(NFRO,NBUF) = 0.0
C
C*** WE ENQUIRE WHETHER THE PRESENT VARIABLE WILL BE FREE OR PRESCRIBED.
C
      IF(KEYFIX.EQ.0) GO TO 40
      KODEL = 10**(NDZ-ND)
      DO 39 NR = 1,NEWRHS
      IF(KOD.LT.KODEL. AND .VFIX(KEYFIX,ND,NR).NE.0.0)
     .	 CALL DOCTOR(125,KEYFIX)
      IF(KOD.LT.KODEL) GO TO 39
C
C*** WHEN THERE IS A PRESCRIBED DEFLECTION, THE PROCEDURE IS DIFFERENT.
C
      DO 38 NF = 1,LENFRO
   38 SUBLOD(NF,NR) = SUBLOD(NF,NR) - VFIX(KEYFIX,ND,NR)*EQ(NF,NBUF)
      IF(LOAD.EQ.0) GO TO 39
      IF(VLOAD(LOAD,ND,NR).NE.0.0) CALL DOCTOR(126,LOAD)
   39 CONTINUE
C
C*** PUT MINUS ADDRESS IN VFIX INTO NAME, TO INTERPRET EQUATION LATER.
C
      IF(KOD.LT.KODEL) GO TO 40
      KOD = KOD - KODEL
      NAMEQ(NBUF) = -KEYFIX
      IF(NEXTF.EQ.0) GO TO 50
      IF(VSTIF(NEXTF,ND).NE.0.0) CALL DOCTOR(127,NEXTF)
      GO TO 50
C
C*** ESTIMATE THE DAMAGE DONE BY ROUNDOFF IN THE CURRENT FREE VARIABLE.
C
   40 IF(IFCOEF.EQ.0) GO TO 41
      SIG = SQRT(SIGDIG(NFRO))
      EQSIG(NBUF) = SIG
      SIGDIG(NFRO) = 0.0
      IF(PIVOT.GT.SIG*1.0E-4) GO TO 43
      WRITE(6,602) PIVOT, SIG, NEL, NIC, ND
 602  FORMAT(//21H *** ERROR IN PIVOT =,E20.10,5X,
     .	 31HROOT SUM OF DIAGONALS SQUARED =,E20.10/21X,
     .	 7HELEMENT,I4,9X,4HNODE,I3,9X,8HVARIABLE,I2)
      IF(PIVOT.LT.0.0) CALL DOCTOR(128,NIC)
      CALL DOCTOR(129,1)
      IF(PIVOT.EQ.0.0) CALL DOCTOR(-67,NIC)
      IF(ABS(PIVOT).LT.SIG*1.0E-10) CALL DOCTOR(-68,NIC)
      GO TO 43
C
C*** ELIMINATE A FREE VARIABLE, DEALING WITH THE RIGHT HAND SIDE FIRST.
C
   41 DO 42 NR = 1,NEWRHS
   42 STREGY(NR) = STREGY(NR) + 0.5*(EQLOD(NBUF,NR))**2/PIVOT
   43 NAMEQ(NBUF) = NIC
      DO 44 NR = 1,NEWRHS
      FACT = EQLOD(NBUF,NR)/PIVOT
      DO 44 NF = 1,LENFRO
   44 SUBLOD(NF,NR) = SUBLOD(NF,NR) - FACT*EQ(NF,NBUF)
      IF(IFCOEF.EQ.0) GO TO 50
C
C*** NOW DEAL WITH THE COEFFICIENTS IN CORE, UNLESS WE ARE IN RE-SOLVE.
C
      DO 48 I = 1,LENFRO
      FACT = EQ(I,NBUF)/PIVOT
      IF(FACT.EQ.0.0) GO TO 48
      SIGDIG(I) = SIGDIG(I) + SUSTIF(NFUNC(I,I))**2
      JDEL = NFUNC(0,I)
      JA = JDEL + 1
      JZ = JDEL + I
      DO 46 J = JA,JZ
   46 SUSTIF(J) = SUSTIF(J)-FACT*EQ(J-JDEL,NBUF)
   48 CONTINUE
   50 EQ(NFRO,NBUF) = PIVOT
C
C*** RECORD THE NEW VACANT SPACE, AND REDUCE THE FRONTWIDTH IF POSSIBLE.
C
      NODFRO(NFRO) = 0
   52 IF(NODFRO(LENFRO).NE.0) GO TO 54
      LENFRO = LENFRO - 1
      IF(LENFRO.GT.0) GO TO 52
      IF(NEL.NE.NELZ) CALL DOCTOR(130,NIC)
   54 IF(ND.EQ.NDZ) GO TO 58
C
C*** COMPLETE THE ELEMENT LOOP, AND HENCE ALSO THE FORWARD ELIMINATION.
C
   56 CONTINUE
   58 CONTINUE
   60 CONTINUE
C
C*** WE MUST RECORD THE LAST EQUATIONS, FOR USE LATER IN A RE-SOLUTION.
C
      IF(IFCOEF.EQ.1) WRITE(2) EQ, EQSIG, NPIVEQ, NAMEQ, NDFEQ
      BACKSPACE 2
C
C*** ENTER BACK-SUBSTITUTION PHASE, LOOP BACKWARDS THROUGH THE ELEMENTS.
C
      DO 76 LBACK = 1,NELZ
      NEL = NELZ + 1 - LBACK
      LTYP = LTYPE(LPROP(NEL))
C
C*** COUNT THE EQUATIONS NEEDED, BEFORE THE NEXT ELEMENT CAN BE OUTPUT.
C
      NEQ = 0
      DO 62 NOD = 1,LNOMAX
      IF(LNODS(NOD,NEL).LT.0) NEQ = NEQ + NDF(NOD,LTYP)
   62 CONTINUE
C
C*** TEST WHETHER WE ARE READY TO OUTPUT THE NEXT ELEMENT IMMEDIATELY.
C
      IF(NEQ.EQ.0) GO TO 70
   64 IF(NBUF.NE.0) GO TO 66
C
C*** READ IN A NEW BLOCK OF EQUATIONS, BUT ONLY WHEN THEY ARE REQUIRED.
C
      BACKSPACE 2
      READ(2) EQ, EQSIG, NPIVEQ, NAMEQ, NDFEQ
      BACKSPACE 2
      BACKSPACE 4
      IF(IFCOEF.EQ.1) READ(4) EQLOD, EQRTOT
      IF(IFCOEF.EQ.0) READ(4) EQLOD
      BACKSPACE 4
      NBUF = NBUFZ
   66 NFRO = NPIVEQ(NBUF)
C
C*** WE NOW PREPARE FOR THE BACK-SUBSTITUTION, IN THE CURRENT EQUATION.
C
      NAM = NAMEQ(NBUF)
      IF(NAM.GT.0) NIC = NAM
      KEYFIX = -NAM
      IF(KEYFIX.GT.0) NIC = NODFIX(KEYFIX)
      NODFRO(NFRO) = NIC
      ND = NDFEQ(NBUF)
C
C*** BACK SUBSTITUTE THE EXISTING VALUES, TIMES THE GIVEN COEFFICIENTS.
C
      PIVOT = EQ(NFRO,NBUF)
      IF(NAM.GT.0) EQ(NFRO,NBUF) = 0.0
      DO 69 NR = 1,NEWRHS
      GASH = EQLOD(NBUF,NR)
      IF(KEYFIX.GT.0) SUBLOD(NFRO,NR) = VFIX(KEYFIX,ND,NR)
      DO 68 N = 1,LIMFRO
   68 GASH = GASH - SUBLOD(N,NR)*EQ(N,NBUF)
C
C*** STORE THE NEW DEFLECTION IN THE VECTOR OF RUNNING VARIABLES, SUBLOD
C
      IF(NAM.GT.0) SUBLOD(NFRO,NR) = GASH/PIVOT
      IF(KEYFIX.GT.0) VFIX(KEYFIX,ND,NR) = -GASH
C
C*** INCREMENT THE STRAIN ENERGY, POTENTIAL ENERGY, AND DIAGONAL ENERGY.
C
      DISP = SUBLOD(NFRO,NR)
      IF(NAM.GT.0) DIAGY(NR) = DIAGY(NR) + EQSIG(NBUF)*DISP**2
      IF(IFCOEF.EQ.0) GO TO 69
      FORCE = EQRTOT(NBUF,NR)
      IF(KEYFIX.GT.0) FORCE = FORCE - GASH
      STREGY(NR) = STREGY(NR) + 0.5*FORCE*DISP
      IF(NAM.GT.0) FORCE = -FORCE
      POTEGY(NR) = POTEGY(NR) + 0.5*FORCE*DISP
   69 CONTINUE
      NBUF = NBUF - 1
      NEQ = NEQ - 1
      IF(NEQ.GT.0) GO TO 64
C
C*** NOW OUTPUT THE VALUES OF THE DEFLECTIONS, FOR THE CURRENT ELEMENT.
C
   70 LVABZ = 0
      WRITE (6,604) NEL
 604  FORMAT(/19H *** OUTPUT ELEMENT,I3//5H NODE,3X,3HRHS,10X,6HVALUES/)
      DO 74 NOD = 1,LNOMAX
      NIC = IABS(LNODS(NOD,NEL))
      IF(NIC.EQ.0) GO TO 74
      DO 72 N = 1,LIMFRO
      IF(NODFRO(N).NE.NIC) GO TO 72
      LVABZ = LVABZ + 1
      DO 71 NR = 1,NEWRHS
   71 ELOAD(LVABZ,NR) = SUBLOD(N,NR)
   72 CONTINUE
C
C*** TERMINATE THE ELEMENT LOOP, AND HENCE THE BACK-SUBSTITUTION PHASE.
C
      NA = LVABZ - NDF(NOD,LTYP) + 1
      DO 73 NR = 1,NEWRHS
   73 WRITE(6,606) NIC, NR, (ELOAD(N,NR), N = NA,LVABZ)
 606  FORMAT(1X,I3,I6,6E18.5)
   74 CONTINUE
      NROWST = LVMAX + MAXRHS
      IF(ITERAT.EQ.0)
     .	 CALL STRESS(ELOAD, LTYP, LVABZ, LVMAX, MAXTRS, NEWRHS, NROWST,
     .	 STRESM)
C     IF(ITERAT.EQ.1) CALL RESID
   76 CONTINUE
C
C*** WRITE OUT THE FINAL REACTIONS TO EARTH, REPLACING THE DEFLECTIONS.
C
      DO 80 NR = 1,NEWRHS
      WRITE(6,608) NR
 608  FORMAT(//16H RIGHT HAND SIDE,I2)
      IF(NFIX.EQ.0) GO TO 79
      WRITE(6,609)
 609  FORMAT(/5H NODE,3X,4HCODE,6X,
     .	 37HREACTIONS DUE TO PRESCRIBED VARIABLES/)
      DO 78 N = 1,NFIX
   78 WRITE(6,610) NODFIX(N), KODFIX(N), (VFIX(N,ND,NR), ND = 1,NDFMAX)
 610  FORMAT(1X,I4,I9,4X,6E15.7)
C
C*** CALCULATE VARIANCE ON STRAIN ENERGY DUE TO ROUNDOFF, AND COMMENT.
C
   79 IF(IFCOEF.EQ.0) POTEGY(NR) = -STREGY(NR)
      ERREGY = 1.0E-8*DIAGY(NR)*100.0/(STREGY(NR)+1.0E-30)
      WRITE(6,612) ERREGY, STREGY(NR), POTEGY(NR), DIAGY(NR)
 612  FORMAT(//49H *** RMS ERROR IN STRAIN ENERGY DUE TO ROUNDOFF =,
     .	 F10.5,9H PERCENT.//17H STRAIN ENERGY IS,D15.7,6X,
     .	 19HPOTENTIAL ENERGY IS,D15.7,6X,18HDIAGONAL ENERGY IS,D15.7)
      IF(DIAGY(NR).EQ.0.0) CALL DOCTOR(132,1)
      IF(STREGY(NR).LT.1.0E-8*ABS(POTEGY(NR))) CALL DOCTOR(133,1)
      IF(ERREGY.GT.0.1) CALL DOCTOR(134,1)
      IF(ERREGY.GT.5.0) CALL DOCTOR(70,1)
   80 CONTINUE
      RETURN
      END
      SUBROUTINE STRESS(ELDISP, LTYP, LVABZ, LVMAX, MAXTRS,
     .		       NEWRHS, NROWST, STRESM)
C1367
C*** TO CALCULATE AND PRINT THE STRESSES INTELLIGIBLY, FOR ALL ELEMENTS
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION ELDISP(LVMAX,NEWRHS), STRESM(NROWST,MAXTRS)
      DIMENSION DIREC(3,3), FRAME(3,3), POIN(3,4), PRIN(3), STRES(6)
      COMMON/SYSTEM/MAXDIM(12,3), NDF(8,12)
      SAVE
      NDIM = MAXDIM(LTYP,1)
      NSTRES = MAXDIM(LTYP,2)
      DO 54 N = 1,27
      BACKSPACE 7
      READ(7) NGAU, NS, LV, STRESM, POIN, FRAME, DET
      BACKSPACE 7
      IF(NS.NE.NSTRES) CALL DOCTOR(-73,NS)
      IF(LV.NE.LVABZ) CALL DOCTOR(-74,LV)
      WRITE(6,604) (POIN(I,1), I = 1,NDIM)
 604  FORMAT(/21H STRESSING POINT, X =,F10.6,6X,3HY =,F10.6:
     .	 6X,3HZ =,F10.6)
      IF(NDIM*NDF(2,LTYP).GE.15) WRITE(6,606) FRAME
 606  FORMAT(/53H THE STRESSES WILL BE IN THE LOCAL AXES, GIVEN BY THE,
     .	 10H ROWS OF (,3F8.5,1H)/(62X,1H(,3F8.5,1H)))
C
C*** STRESS MATRIX RETRIEVED - SO MULTIPLY IT BY THE ELEMENT DEFLECTIONS
C
      DO 52 NR = 1,NEWRHS
      DO 6 I = 1,NSTRES
      GASH = STRESM(LVABZ+NR,I)
      DO 4 J = 1,LVABZ
    4 GASH = GASH + STRESM(J,I)*ELDISP(J,NR)
    6 STRES(I) = GASH
      GO TO (8, 10, 12, 14, 16, 50, 32, 10, 34, 38, 44, 50), LTYP
C
C*** DEFLECTIONS AND SLOPES FOR THE SIMPLE MEMBRANE ELEMENT, TYPE 1.
C
    8 CALL PRINPL(1, THETA, DEGREE, DIREC, PRIN, STRES(2))
      WRITE(6,608) STRES(1), PRIN(1), DEGREE
 608  FORMAT(4X,12HDEFLECTION =,F7.4,2X,7HSLOPE =,F7.4,
     .	 13H, AT AN ANGLE,F8.2,31H DEGREES ANTICLOCKWISE FROM OX./)
      GO TO 52
C
C*** PLANE STRESS OR PLANE STRAIN, BOTH ELEMENT TYPE 2, OR HYBRID TYPE 8
C
   10 CALL PRINPL(2, THETA, DEGREE, DIREC, PRIN, STRES(1))
      WRITE(6,610) PRIN(1), DEGREE, PRIN(2)
 610  FORMAT(31H THE LARGER PRINCIPAL STRESS IS,E13.6,
     .	 13H, AT AN ANGLE,F8.2,36H DEGREES TO OX.  THE OTHER PRINCIPAL,
     .	 10H STRESS IS,E13.6)
      GO TO 52
C
C*** AXISYMMETRIC OBJECT, IN TORSION ONLY, ELEMENT TYPE 3.
C
   12 CALL PRINPL(1, THETA, DEGREE, DIREC, PRIN, STRES(2))
      ROT = STRES(1)/POIN(2,1)
      WRITE(6,612) ROT, PRIN(1), DEGREE
 612  FORMAT(4X,20HROTATION (RADIANS) =,E13.6,4X,7HSHEAR =,E12.5,
     .	 16H, AT AN ANGLE OF,F6.1,6H TO OX)
      GO TO 52
C
C*** AXISYMMETRIC OBJECT UNDER PRESSURE, ETC. ELEMENT TYPE 4.
C
   14 CALL PRINPL(2, THETA, DEGREE, DIREC, PRIN, STRES)
      WRITE(6,614) PRIN(1), DEGREE, PRIN(2), STRES(4)
 614  FORMAT(19H PRINCIPAL STRESS =,E12.5,10H, AT ANGLE,F6.1,
     .	 28H TO OX.  OTHER PRIN STRESS =,E12.5,4X,14H HOOP STRESS =,
     .	 E12.5)
      GO TO 52
C
C*** AXISYMMETRIC OBJECT IN BENDING, ELEMENT TYPE 5.
C
   16 CALL PRINPL(2, THETA, DEGREE, DIREC, PRIN, STRES)
      WRITE(6,614) PRIN(1), DEGREE, PRIN(2), STRES(4)
      CALL PRINPL(1, THETA, DEGREE, DIREC, PRIN, STRES(5))
      WRITE(6,616) PRIN(1), DEGREE
 616  FORMAT(4X,45HTHIS IS FOR TOP OF BEAM - NOW SHEAR AT SIDE =,
     .	 E12.5,10H, AT ANGLE,F6.1,6H TO OX)
      GO TO 52
C
C*** THE SIMPLE BEAM ELEMENT IN 3D, TYPE 7.
C
   32 WRITE(6,632) (STRES(I), I = 1,4)
 632  FORMAT(15H TENSILE LOAD =,F10.2,4X,18HB.M. HORIZ.PLANE =,F10.2,
     1	 4X,14HB.M. Z-PLANE =,F10.2,4X,14HTORSION MOM. =,F10.2)
      GO TO 52
C
C*** THE HYBRID 8-NODE BRICK, ELEMENT TYPE 9.
C
   34 WRITE(6,634)
 634  FORMAT(10H LOAD CASE,3X,35HPRINCIPAL STRESSES IN GLOBAL SYSTEM)
      CALL PRINPL(3, THETA, DEGREE, DIREC, PRIN, STRES)
      WRITE(6,636) PRIN(1), (DIREC(J,1), J = 1,3),
     $	 PRIN(2), (DIREC(J,2), J = 1,3),
     $	 PRIN(3), (DIREC(J,3), J = 1,3)
 636  FORMAT(8H PRIN1 =,G10.4,2X,9HDIREC1= (,3F8.5,1H)/
     $	 8H PRIN2 =,G10.4,2X,9HDIREC2 =(,3F8.5,1H)/
     $	 8H PRIN3 =,G10.4,9HDIREC3= (,3F8.5,1H))
      GO TO 52
C
C*** HYBRID PLATE BENDING ELEMENTS, TYPE 10.
C
   38 WRITE(6,638)
 638  FORMAT(33H PRINCIPAL MOMENTS PER UNIT WIDTH)
      CALL PRINPL(2, THETA, DEGREE, DIREC, PRIN, STRES)
      WRITE(6,660) PRIN(1), DEGREE, (DIREC(J,1), J = 1,3),
     $	 PRIN(2), DEGREE, (DIREC(J,2), J = 1,3)
      GO TO 52
C
C*** THE SEMILOOF SHELL ELEMENT, TYPE 11.
C
   44 WRITE(6,656) NR
 656  FORMAT(10H LOAD CASE,I3,3X,19HPRINCIPAL TENSIONS,,
     .	 37H THEN BENDING MOMENTS, PER UNIT WIDTH)
      DO 48 I = 1,4,3
      CALL PRINPL(2, THETA, DEGREE, DIREC, PRIN, STRES(I))
      COSE = COS(THETA)
      SINE = SIN(THETA)
      DO 46 J = 1,3
      DIREC(J,1) = COSE*FRAME(J,1) + SINE*FRAME(J,2)
   46 DIREC(J,2) = -SINE*FRAME(J,1) + COSE*FRAME(J,2)
   48 WRITE(6,660) PRIN(1), DEGREE, (DIREC(J,1), J = 1,3),
     .	 PRIN(2), (DIREC(J,2), J = 1,3)
 660  FORMAT(8H PRIN1 =,F10.5,1H,,F5.1,22H DEGREES TO OX, I.E. (,
     .	 3F8.5,11H),  PRIN2 =,F10.5,5H AT (,3F8.5,1H))
      GO TO 52
C
C*** THE SEMILOOF BEAM ELEMENT, TYPE 12.
C
   50 WRITE(6,654) NR, STRES
 654  FORMAT(/10H LOAD CASE,8X,1HT,17X,2HQY,16X,2HQZ,16X,2HMY,16X,
     .	 2HMZ,15X,3HTOR//2X,I3,6F18.6)
      GO TO 52
   52 CONTINUE
      IF(NGAU.EQ.1) RETURN
   54 CONTINUE
      END
      SUBROUTINE PRINPL(NSTYL, THETA, DEGREE, DIREC, PRIN, SIG)
C1508
C*** TO FIND PRINCIPAL STRESSES AND THEIR DIRECTIONS IN THREE DIMENSIONS
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION ADJ(3,3), DIREC(3,3), PRIN(3), SIG(6), TENS(3,3)
      DATA PI/3.14159265359/, ONE/1.0/
      S1 = SIG(1)
      S2 = SIG(2)
      S3 = SIG(3)
      GO TO (2, 4, 10), NSTYL
    2 THETA = ATAN(S2/(S1+1.0E-30))
      PRIN(1) = SQRT(S1*S1+S2*S2)
      IF(S1.LT.0.0. AND .S2.GT.0.0) THETA = THETA + PI
      IF(S1.LT.0.0. AND .S2.LE.0.0) PRIN(1) = -PRIN(1)
      GO TO 8
    4 THETA = 0.5*ATAN(2.0*S3/(S1-S2+1.0E-30))
    6 IF(THETA.LT.0.0) THETA = THETA + PI
      SINE = SIN(THETA)
      COSE = COS(THETA)
      PRIN(1) = S1 + SINE*(2.0*COSE*S3 + SINE*(S2-S1))
      PRIN(2) = S1 + S2 - PRIN(1)
C
C*** MAKE THE FIRST PRINCIPAL STRESS THE LARGER OF THE TWO IN EVERY CASE
C
      IF(ABS(PRIN(1)).GE.0.99999*ABS(PRIN(2))) GO TO 8
      THETA = THETA - 0.5*PI
      GO TO 6
    8 DEGREE = THETA*180.0/PI
      RETURN
C
C*** RAPID AND FOOLPROOF ANALYTIC PROCEDURE, FOR 3X3 EIGENVALUES.
C
   10 J = 3
      DO 12 I = 1,3
      TENS(I,I) = SIG(I)
      TENS(J,6-I-J) = SIG(3+I)
      TENS(6-I-J,J) = SIG(3+I)
   12 J = I
      B = 0.0
      C = 0.0
      DO 14 I = 1,3
      B = B + TENS(I,I)
      J = I + 1
      IF(J.EQ.4) J = 1
   14 C = C - TENS(I,I)*TENS(J,J) + TENS(I,J)**2
      CALL VECTOR(TENS, TENS(1,2), ADJ)
      CALL SCALAR(ADJ, TENS(1,3), D)
C
C*** SOLVE CUBIC, -P**3 + B*P**2 - C*P + D = 0 BY TRIGONOMETRICAL METHOD.
C
      DEL = B/3.0
      C = C + B*DEL + 1.0E-35
      IF(C.LT.0.0) C = -C
      D = D + DEL*(C - DEL*DEL)
      R = SQRT(0.75/C)
      ARG = 3.0*D*R/C
      IF(ARG.GT.ONE) ARG = ONE
      IF(ARG.LT.-ONE) ARG = -ONE
      THETA = ACOS(ARG)/3.0
C
C*** PUT THE THREE ROOTS INTO DESCENDING ORDER OF MAGNITUDE.
C
      DO 16 I = 1,3
   16 PRIN(I) = COS(THETA+(I-2)*PI*2.0/3.0)/R + DEL
      DO 20 I = 1,2
      DO 18 J = I,3
      IF(ABS(PRIN(J)).LE.ABS(PRIN(I))) GO TO 18
      GASH = PRIN(I)
      PRIN(I) = PRIN(J)
      PRIN(J) = GASH
   18 CONTINUE
   20 CONTINUE
C
C*** HAVING THE THREE EIGENVALUES, NOW FIND THE EIGENVECTORS.
C
      DO 34 I = 1,3
      DEL = PRIN(1)
      IF(I.GT.1) DEL = PRIN(I) - PRIN(I-1)
      DO 22 J = 1,3
   22 TENS(J,J) = TENS(J,J) - DEL
      DO 24 J = 1,3
      K = J + 1
      IF(K.EQ.4) K = 1
   24 CALL VECTOR(TENS(1,J), TENS(1,K), ADJ(1,6-J-K))
      BIG = 0.0
      DO 28 J = 1,3
      DO 26 K = 1,3
      IF(ABS(ADJ(J,K)).LT.BIG) GO TO 26
      BIG = ABS(ADJ(J,K))
      MAXCOL = K
   26 CONTINUE
   28 CONTINUE
      DO 30 J = 1,3
      DIREC(J,I) = 0.0
      DO 30 K = 1,3
   30 DIREC(J,I) = DIREC(J,I) + ADJ(J,K)*ADJ(K,MAXCOL)/(BIG*BIG)
      CALL SCALAR(DIREC(1,I), DIREC(1,I), SCALE)
      DO 32 J = 1,3
   32 DIREC(J,I) = DIREC(J,I)/SQRT(SCALE)
      DO 34 J = 1,3
      DO 34 K = 1,3
   34 TENS(J,K) = TENS(J,K) + PRIN(I)*DIREC(J,I)*DIREC(K,I)
      RETURN
      END

      SUBROUTINE SCALAR(U, V, PROD)
C1616

C*** TO COMPUTE SCALAR PRODUCT OF VECTORS U AND V.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION U(3), V(3)
      PROD = 0.0
      DO 2 I = 1,3
    2 PROD = PROD + U(I)*V(I)
      RETURN
      END
      SUBROUTINE VECTOR(U, V, W)
C1631
C*** TO COMPUTE VECTOR PRODUCT U*V INTO AREA W.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION U(3), V(3), W(3)
      K = 3
      DO 2 I = 1,3
      W(6-I-K) = U(K)*V(I)-U(I)*V(K)
    2 K = I
      RETURN
      END
C
      SUBROUTINE SUNDRY(ELCORD, ELOAD, ELSTIF, IPROP, JPROP, LCOEF,
     .		       LNODZ, LPOP, LTYP, LVABZ, LVMAX, MAXTRS, NDIM,
     .	 NEL, NEWRHS, NFIRST, NROWST, NSTRES, STRESM, VPROP)
C1648
C*** TO CREATE VARIOUS ISOPARAMETRIC MODELS, USING THE SUBROUTINE ISOPAR
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION B(6,24), BODY(3,3), CGAUS(18), CJACIN(3,3), D(6,6),
     .	 ELCORD(9,4), ELOAD(LVMAX,NEWRHS), ELSTIF(LCOEF), FRAME(3,3),
     .	 POIN(3,4), STRESM(NROWST,MAXTRS), TEMP(6), THERM(6,3),
     .	 VPROP(IPROP,JPROP), WCORN(10,4), XGAUS(2,18), XITA(3)
      EQUIVALENCE (D(1,1),D11), (D(1,2),D12), (D(1,3),D13),
     .	 (D(2,2),D22), (D(2,3),D23), (D(3,3),D33), (D(4,4),D44),
     .	 (D(5,5),D55), (D(6,6),D66)
C
C*** DESCRIBE THE INTEGRATION RULES, AND INITIALISE THE ARRAYS.
C
      DATA XGAUS/2*0., 2*.3333333333333, 3*.577350269189626,
     .	  4*-.577350269189626,.577350269189626,
     .	 .5,2*0.,3*.5, 3*-.774596669241483,
     .	 4*.774596669241483,-.774596669241483,0.,
     .	 2*-.774596669241483,2*0.,2*.774596669241483,3*0./,CGAUS/4.,
     .	 .5, 4*1.,3*.1666666666666667,4*.308641975308642,
     .	 4*.493827160493828,.790123456790124/, FRAME/9*0.0/
      DO 2 I = 1,3
      DO 1 J = 1,3
    1 BODY(I,J) = 0.0
      DO 2 J = 1,6
    2 THERM(J,I) = 0.0
      DO 4 I = 1,6
      DO 3 J = 1,6
    3 D(I,J) = 0.0
      DO 4 J = 1,24
    4 B(I,J) = 0.0
      NRHS = 1
C      GO TO (6, 8, 12, 14, 14, 28), 
      GO TO (6, 8, 12, 14, 14, 29), LTYP
C
C*** ELEMENT PROPERTIES, THE FLAT MEMBRANE ELEMENT, OF TYPE 1.
C
    6 THIK = VPROP(1,LPOP)
      STIF = VPROP(2,LPOP)
      SIGXX = VPROP(3,LPOP)
      SIGYY = VPROP(4,LPOP)
      SIGXY = VPROP(5,LPOP)
      PRESS = VPROP(6,LPOP)
      NGAUS = VPROP(7,LPOP)
      D22 = SIGXX*THIK
      D33 = SIGYY*THIK
      D23 = SIGXY*THIK
      D11 = STIF
      GO TO 24
C
C*** ELEMENT PROPERTIES, THE PLANE STRESS ELEMENT, OF TYPE 2
C
    8 YOUNG = VPROP(1,LPOP)
      POIS = VPROP(2,LPOP)
      DENSTY = VPROP(3,LPOP)
      THIK = VPROP(4,LPOP)
      NGAUS = VPROP(5,LPOP)
      THRM = VPROP(6,LPOP)*VPROP(7,LPOP)
      IF(THIK.EQ.0.0) GO TO 10
      D11 = YOUNG/(1.0-POIS*POIS)
      D22 = D11
      D12 = D11*POIS
      D33 = D11*(1.0-POIS)/2.0
      GO TO 24
C
C*** ELEMENT PROPERTIES FOR THE PLANE STRAIN ELEMENT, ALSO TYPE 2.
C
   10 FACT = YOUNG/(1.0+POIS)/(1.0-POIS-POIS)
      D11 = FACT*(1.0-POIS)
      D22 = D11
      D12 = FACT*POIS
      D33 = FACT*(0.5-POIS)
      GO TO 24
C
C*** PROPERTIES, TORSION OF AN AXISYMMETRIC BODY, TYPE 3.
C
   12 SHEMOD = VPROP(1,LPOP)*0.5/(1.0+VPROP(2,LPOP))
      NGAUS = VPROP(3,LPOP)
      D11 = 0.0
      D22 = SHEMOD
      D33 = SHEMOD
      GO TO 24
C
C*** PROPERTIES, AXISYMMETRIC BODY, PRESSURE LOADS ETC., TYPE 4 OR 5.
C
   14 YOUNG = VPROP(1,LPOP)
      POIS = VPROP(2,LPOP)
      DENSTY = VPROP(3,LPOP)
      NGAUS = VPROP(4,LPOP)
      THRM = VPROP(5,LPOP)*VPROP(6,LPOP)
      FACT = YOUNG/(1.0+POIS)/(1.0-POIS-POIS)
      D11 = FACT*(1.0-POIS)
      D12 = FACT*POIS
      D14 = D12
      D22 = D11
      D24 = D12
      D33 = FACT*(0.5-POIS)
      D44 = D11
      ANGVEL = VPROP(7,LPOP)
      IF(LTYP.EQ.4) GO TO 24
      D55 = D33
      D66 = D33
      GO TO 24
C
C*** NOW PREPARE FOR THE GAUSS INTEGRATION LOOP FOR STIFFNESS AND LOADS.
C
   24 DO 26 I = 1,NSTRES
      DO 26 J = I,NSTRES
   26 D(J,I) = D(I,J)
      IF(NGAUS.EQ.0) NGAUS = 2
      IF(NGAUS.LT.0. OR .NGAUS.GT.3) CALL DOCTOR(98,1)
      IF((LNODZ.EQ.6.OR.LNODZ.EQ.3). AND .NGAUS.EQ.2) NGAUS = 3
      IF(LNODZ.EQ.4. OR .LNODZ.EQ.8) NGAUS = NGAUS*NGAUS
      IF(NGAUS.EQ.1) NDEL = 0
      IF(NGAUS.EQ.1. AND .(LNODZ.EQ.3.OR.LNODZ.EQ.6)) NDEL = 1
      IF(NGAUS.EQ.3) NDEL = 6
      IF(NGAUS.EQ.4) NDEL = 2
      IF(NGAUS.EQ.9) NDEL = 9
C
C*** ENTER GAUSS LOOP; DON'T DIFFERENTIATE YET BETWEEN VARIOUS ELEMENTS.
C
      DO 80 NGAU = 1,NGAUS
      DO 28 IXY = 1,2
   28 XITA(IXY) = XGAUS(IXY,NGAU+NDEL)
C      CALL ISOPAR(CJACIN, DETJ, ELCORD, LNODZ, LTYP, NDIM, NEL, NFIRST,
   29 CALL ISOPAR(CJACIN, DETJ, ELCORD, LNODZ, LTYP, NDIM, NEL, NFIRST,
     .	 POIN, WCORN, XITA)
      RAD = POIN(2,1)
      CIRC = 6.2831853*RAD
      DV = DETJ*CGAUS(NGAU+NDEL)
C      GO TO (30, 34, 38, 42, 46, 70), LTYP
      GO TO (30, 34, 38, 42, 46, 71), LTYP
C
C*** MEMBRANE ELEMENT, CREATE B-MATRIX.
C
   30 DO 32 NOD = 1,LNODZ
      DO 32 I = 1,3
   32 B(I,NOD) = WCORN(NOD,I)
      BODY(1,1) = PRESS
      GO TO 60
C
C*** PLANE STRESS OR PLANE STRAIN ELEMENTS.
C
   34 DO 36 NOD = 1, LNODZ
      B(1,2*NOD-1) = WCORN(NOD,2)
      B(2,2*NOD) = WCORN(NOD,3)
      B(3,2*NOD-1) = WCORN(NOD,3)
   36 B(3,2*NOD) = WCORN(NOD,2)
      IF(THIK.NE.0.0) DV = DV*THIK
      BODY(2,1) = DENSTY
      THERM(1,1) = THRM
      THERM(2,1) = THRM
      GO TO 60
C
C*** AXISYMMETRIC ELEMENT IN TORSION, Y = RADIUS.
C
   38 DO 40 NOD = 1,LNODZ
      B(1,NOD) = WCORN(NOD,1)
      B(2,NOD) = WCORN(NOD,2)
   40 B(3,NOD) = WCORN(NOD,3) - WCORN(NOD,1)/RAD
      DV = DV*CIRC
      GO TO 60
C
C*** AXISYMMETRIC ELEMENT, PRESSURE ETC., Y = RADIUS.
C
   42 DO 44 NOD = 1,LNODZ
      B(1,2*NOD-1) = WCORN(NOD,2)
      B(2,2*NOD) = WCORN(NOD,3)
      B(3,2*NOD-1) = WCORN(NOD,3)
      B(3,2*NOD) = WCORN(NOD,2)
   44 B(4,2*NOD) = WCORN(NOD,1)/RAD
      BODY(1,1) = 0
      OMSQOG = ANGVEL**2/9.81
      BODY(2,1) = -OMSQOG*RAD*DENSTY
      DV = DV*CIRC
      THERM(1,1) = THRM
      THERM(2,1) = THRM
      THERM(4,1) = THRM
      GO TO 60
C
C*** AXISYMMETRIC ELEMENT IN BENDING, Y = RADIUS.
C
   46 DO 48 NOD = 1,LNODZ
      B(1,3*NOD-2) = WCORN(NOD,2)
      B(2,3*NOD-1) = WCORN(NOD,3)
      B(3,3*NOD-2) = WCORN(NOD,3)
      B(3,3*NOD-1) = WCORN(NOD,2)
      B(4,3*NOD-1) = WCORN(NOD,1)/RAD
      B(4,3*NOD) = WCORN(NOD,1)/RAD
      B(5,3*NOD-2) = -WCORN(NOD,1)/RAD
      B(5,3*NOD) = WCORN(NOD,2)
      B(6,3*NOD-1) = -WCORN(NOD,1)/RAD
   48 B(6,3*NOD) = -WCORN(NOD,1)/RAD + WCORN(NOD,3)
      BODY(2,1) = DENSTY
      BODY(3,1) = DENSTY
      DV = DV*0.5*CIRC
      GO TO 60
C
C*** CONTRIBUTIONS TO LOAD MATRIX AND TO ELEMENT STIFFNESS MATRIX
C
   60 NDZ = LVABZ/LNODZ
      DO 66 NOD = 1,LNODZ
      DO 66 ND = 1,NDZ
      NVAB = (NOD-1)*NDZ + ND
   66 ELOAD(NVAB,NRHS) = ELOAD(NVAB,NRHS)
     .	 - WCORN(NOD,1)*BODY(ND,NRHS)*DV
      NST = 0
      DO 76 IVAB = 1,LVABZ
      DO 72 N = 1,NSTRES
      GASH = 0.0
      DO 70 I = 1,NSTRES
   70 GASH = GASH + B(I,IVAB)*D(I,N)
C      STRESM(IVAB,N) = GASH   
   71 STRESM(IVAB,N) = GASH
      IF(LTYP.EQ.1. OR .LTYP.EQ.3) STRESM(IVAB,1) = WCORN(IVAB,1)
      TEMP(N) = GASH*DV
   72 ELOAD(IVAB,NRHS) = ELOAD(IVAB,NRHS) + TEMP(N)*THERM(N,NRHS)
      DO 76 JVAB = 1,IVAB
      NST = NST + 1
      GASH = ELSTIF(NST)
      DO 74 I = 1,NSTRES
   74 GASH = GASH + TEMP(I)*B(I,JVAB)
   76 ELSTIF(NST) = GASH
      DO 78 N = 1,NSTRES
      GASH = 0.0
      DO 77 I = 1,NSTRES
   77 GASH = GASH - THERM(I,NRHS)*D(I,N)
   78 STRESM(LVABZ+NRHS,N) = GASH
   80 WRITE(7) NGAU, NSTRES, LVABZ, STRESM, POIN, FRAME, DETJ
      RETURN
      END
CC
CC
CC
      SUBROUTINE ISOPAR(CJACIN, DETJ, ELCORD, LNODZ, LTYP, NDIM, NEL,
     .		       NFIRST, POIN, WCORN, XITA)
C1879
C*** TO TEST GEOMETRY, AND TRANSFORM SHAPE FUNCTIONS FOR ISO-P ELEMENTS
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION CJACIN(3,3), ELCORD(9,4), POIN(3,4), WCORN(10,4),
     .	 XINOD(8,11), XITA(3), XLOCAL(3)
      DATA XINOD/1.,0.,0.,0.,0.,0.,0.,0., 0.,1.,0.,0.,0.,0.,0.,0.,
     .	 -1.,1.,1.,-1.,0.,0.,0.,0., -1.,-1.,1.,1.,0.,0.,0.,0.,
     .	 1.,.5,0.,0.,0.,.5,0.,0., 0.,.5,1.,.5,0.,0.,0.,0.,
     .	 -1.,0.,1.,1.,1.,0.,-1.,-1., -1.,-1.,-1.,0.,1.,1.,1.,0.,
     .	 -1.,1.,1.,-1.,-1.,1.,1.,-1., -1.,-1.,1.,1.,-1.,-1.,1.,1.,
     .	 -1.,-1.,-1.,-1.,1.,1.,1.,1./
      IF(NFIRST.EQ.1) GO TO 22
    2 NFIRST = 0
      XLOCAL(3) = 0.0
      DO 4 ND = 1,NDIM
    4 XLOCAL(ND) = XITA(ND)
    6 CALL SFR(LNODZ, LTYP, NDIM, 1, WCORN, XLOCAL)
C
C*** CREATE THE JACOBIAN MATRIX, AND INVERT IT, AND FIND THE DETERMINANT
C
      NDEL = 0
      DO 12 J = 1, NDIM+1
      DO 10 I = 1,NDIM
      GASH = 0.0
      DO 8 NOD = 1,LNODZ
    8 GASH = GASH + WCORN(NOD+NDEL,J)*ELCORD(NOD,I)
   10 POIN(I,J) = GASH
   12 NDEL = 1
      IF(NDIM.EQ.2) GO TO 14
      CALL MATINV(POIN(1,2), CJACIN, NDIM, DETJ)
      GO TO 16
   14 DETJ = POIN(1,2)*POIN(2,3) - POIN(1,3)*POIN(2,2)
      CJACIN(1,1) = POIN(2,3)/DETJ
      CJACIN(2,2) = POIN(1,2)/DETJ
      CJACIN(1,2) = -POIN(1,3)/DETJ
      CJACIN(2,1) = -POIN(2,2)/DETJ
   16 IF(DETJ.LE.0.0) GO TO 99
      IF(NFIRST.EQ.1) GO TO 24
C
C*** NOW WE CAN TRANSFORM SHAPE FUNCTION DERIVATIVES FROM XI-ETA TO X-Y
C
      DO 20 NOD = 1,LNODZ
      DO 20 I = 1,NDIM
      GASH = 0.0
      DO 18 J = 1,NDIM
   18 GASH = GASH + WCORN(NOD+1,J+1)*CJACIN(J,I)
   20 WCORN(NOD,I+1) = GASH
      RETURN
C
C*** AT THE FIRST ENTRY, CHECK THE DETERMINANT IS POSITIVE AT EVERY NODE
C
   22 IDEL = 0
      IF(LNODZ.GE.4) IDEL = LNODZ - 2
      IF(LTYP.EQ.9) IDEL = 8
      NODTRY = 0
   24 NODTRY = NODTRY + 1
      IF(NODTRY.GT.LNODZ) GO TO 2
      DO 26 I = 1,NDIM
   26 XLOCAL(I) = XINOD(NODTRY,I+IDEL)
      GO TO 6
   99 WRITE(0,600) NEL
 600  FORMAT(/26H FAILED IN ISOPAR: ELEMENT,I3,16H IS A DAFT SHAPE)
      STOP
      END
C C
CCC
C C
      SUBROUTINE MATINV(AVEC, BVEC, N, DET)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION AVEC(36), BVEC(36), MEMORY(6)
      IF(N.LE.1. OR .N.GT.6) GO TO 18
      DO 2 I = 1, N*N
    2 BVEC(I) = AVEC(I)
      DET = 1.0
C1957
C*** CHOOSE THE PIVOT, IN THE NEXT ROW DOWN.
C
      DO 10 J = 1, N
      PIVOT = 0.0
      DO 4 K = J, N
      BJK = BVEC(J+(K-1)*N)
      IF(ABS(BJK).LE.ABS(PIVOT)) GO TO 4
      PIVOT = BJK
      KP = K
    4 CONTINUE
      IF(PIVOT.EQ.0.0) GO TO 20
      DET = DET*PIVOT
      MEMORY(J) = KP
C
C*** ELIMINATE, LIKE PART-INVERTING THE TRANSPOSED MATRIX.
C
      KPDEL = (KP-1)*N
      BVEC(J+KPDEL) = 0.0
      DO 8 K = 1,N
      KDEL = (K-1)*N
      FACT = BVEC(J+KDEL)/PIVOT
      IF(FACT.EQ.0.0) GO TO 8
      IDEL = (KP-K)*N
      DO 6 I = KDEL+1, KDEL+N
    6 BVEC(I) = BVEC(I) - FACT*BVEC(I+IDEL)
      BVEC(J+KDEL) = FACT
    8 CONTINUE
C
C*** COMPLETE THE PART-INVERSION, AND INTERCHANGE THE COLUMNS.
C
      BVEC(J+KPDEL) = -1.0
      DO 10 I = 1, N
      CHANGE = -BVEC(I+KPDEL)/PIVOT
      BVEC(I+KPDEL) = BVEC(I+(J-1)*N)
   10 BVEC(I+(J-1)*N) = CHANGE
C
C*** THE INVERSION IS NOW COMPLETED - NOW INTERCHANGE THE ROWS.
C
      DO 14 JJ = 1, N
      J = N + 1 - JJ
      JP = MEMORY(J)
      IF(JP.EQ.J) GO TO 14
      DET = -DET
      DO 12 K = 1, N
      KDEL = (K-1)*N
      CHANGE = BVEC(JP+KDEL)
      BVEC(JP+KDEL) = BVEC(J+KDEL)
   12 BVEC(J+KDEL) = CHANGE
   14 CONTINUE
C
C*** NOW DO ALL THE DIAGNOSTICS, FOR THE CALL FOR INVERSION.
C
      ERROR = 0.0
      I = 0
      DO 16 JA = 1, N
      DO 16 J = JA, N*N, N
      I = I + 1
   16 ERROR = ERROR + ABS(AVEC(I)*BVEC(J))
      IF(ERROR/N.GT.1.0E5) WRITE(6,600)
 600  FORMAT(/' YOU SEEM TO HAVE AN ILL-CONDITIONED MATRIX.'/)
      RETURN
   18 WRITE(6,602) N
 602  FORMAT(/' NXN MATRIX - N =',I3,' IS NOT ACCEPTABLE.')
      STOP
   20 WRITE(6,604)
 604  FORMAT(' YOU ARE TRYING TO INVERT A SINGULAR MATRIX.')
      STOP
      END
C
C
      SUBROUTINE BEAM(ELCORD, ELOAD, ELSTIF, IPROP, JPROP, LCOEF,
     .		     LNODZ, LPOP, LVABZ, LVMAX, MAXTRS, NDIM, NEL,
     .	 NEWRHS, NFIRST, NODMAX, NROWST, NSTRES, STRESM, VPROP)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION B(4,12), CGAUS(3), ELCORD(9,4), ELOAD(LVMAX),
     .	 ELSTIF(LCOEF), FRAME(3,3), POIN(3,4), STRESM(NROWST,MAXTRS),
     .	 TEMP(4), VPROP(IPROP,JPROP), WBEM(10,13), XGAUS(3)
      DATA XGAUS/-1.0, 1.0, 0.0/, CGAUS/2*.333333333, 1.333333333/,
     .	 DET/0.0/
C2044
C*** ENTER SIMPSON INTEGRATION LOOP, AND EXTRACT PHYSICAL PROPERTIES.
C
      DO 8 NGAU = 1,3
      XI = XGAUS(NGAU)
      CALL BEMSHA(ELCORD, FRAME, HALF, LNODZ, LVABZ, NFIRST, POIN, WBEM,
     .	 XI)
      DLENTH = HALF*CGAUS(NGAU)
      YMOD = VPROP(1,LPOP)
      SHEMOD = VPROP(2,LPOP)
      AREA = VPROP(3,LPOP)
      ZZMOM = VPROP(4,LPOP)
      XXMOM = VPROP(5,LPOP)
      POLMOM = VPROP(6,LPOP)
      DENSTY = VPROP(7,LPOP)
      THERM = VPROP(8,LPOP)*VPROP(9,LPOP)
      STRESM(13,1) = -THERM*YMOD*AREA
      NCOEF = 0
C
C*** CREATE THE MATRIX AND EFFECTIVELY MULTIPLY BY B = MODULUS MATRIX.
C
      DO 6 IVAB = 1,12
      ELOAD(IVAB) = ELOAD(IVAB) - AREA*DLENTH*DENSTY*WBEM(3,IVAB)
      B(1,IVAB) = WBEM(7,IVAB)
      B(2,IVAB) = WBEM(8,IVAB)
      B(3,IVAB) = WBEM(10,IVAB)
      B(4,IVAB) = WBEM(9,IVAB)
      STRESM(IVAB,1) = B(1,IVAB)*YMOD*AREA
      STRESM(IVAB,2) = B(2,IVAB)*YMOD*XXMOM
      STRESM(IVAB,3) = B(3,IVAB)*YMOD*ZZMOM
      STRESM(IVAB,4) = B(4,IVAB)*SHEMOD*POLMOM
      DO 2 I = 1,4
    2 TEMP(I) = STRESM(IVAB,I)*DLENTH
      ELOAD(IVAB) = ELOAD(IVAB) + THERM*TEMP(1)
C
C*** LOOP OVER ALL THE TERMS OF UPPER TRIANGLE OF THE STIFFNESS MATRIX
C
      DO 6 JVAB = 1,IVAB
      NCOEF = NCOEF + 1
      GASH = ELSTIF(NCOEF)
      DO 4 I = 1,4
    4 GASH = GASH + B(I,JVAB)*TEMP(I)
    6 ELSTIF(NCOEF) = GASH
      IF(NGAU.NE.3) WRITE(7) NGAU, NSTRES, LVABZ, STRESM, POIN,
     .	 FRAME, DET
    8 CONTINUE
      RETURN
      END
CC C
CC C
CC C
      SUBROUTINE BEMSHA(ELCORD, FRAME, HALF, LNODZ, LVABZ, NFIRST, POIN,
     .		       WBEM, XI)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION COEF(36), ELCORD(9,4), FRAME(3,3), POIN(3,4),
     .	 SHAPS(3,6), WBEM(10,13)
C2101
C*** SHAPE FUNCTION SUBROUTINE FOR SIMPLE BEAM, BUT IN 3 DIMENSIONS
C
      COMMON/SYSTEM/NDF(8,12)
      DATA COEF/.25,0.,-.75,.5, .75,0.,-.75, 1.5,0.,  .25,-.25,-.25,.25,
     .	 .75,-.5,-.25, 1.5,-.5,  -.25,0.,.75,.5, -.75,0.,.75, -1.5,0.,
     .	 .25,.25,-.25,-.25, .75,.5,-.25, 1.5,.5/
C
C*** DO DIAGNOSTIC TESTS, TO ASCERTAIN WHETHER THE ELEMENT IS FEASIBLE.
C
      NERROR = 1
      IF(LNODZ.NE.2. OR .LVABZ.NE.12) GO TO 99
      NERROR = 2
      IF(ABS(XI).GT.1.0) GO TO 99
      DO 2 N = 1,10
      DO 2 I = 1,13
    2 WBEM(N,I) = 0.0
      IF(NFIRST.EQ.0) GO TO 8
C
C*** THE LOCAL DIRECTION Y, THE SECOND COLUMN OF FRAME IS ALONG THE BEAM
C
      DO 4 I = 1,3
    4 FRAME(I,2) = ELCORD(2,I) - ELCORD(1,I)
      FRAME(2,2) = FRAME(2,2) + 1.0E-19
      FRAME(3,3) = 1.0E15
      CALL SCALAR(FRAME(1,2), FRAME(1,2), GASH)
      HALF = 0.5*SQRT(GASH)
C
C*** Z IS IN VERTICAL PLANE; IF BEAM IS VERTICAL, X LIES ALONG GLOBAL X.
C
      J = 1
      DO 6 I = 1,3
      K = J
      J = 4 - I
      CALL VECTOR(FRAME(1,6-J-K), FRAME(1,J), FRAME(1,K))
      CALL SCALAR(FRAME(1,K), FRAME(1,K), GASH)
      NERROR = 3
      IF(GASH.LE.1.0E-37) GO TO 99
      DO 6 N = 1,3
    6 FRAME(N,K) = FRAME(N,K)/SQRT(GASH)
C
C*** COMPUTE THE BEAM SHAPE FUNCTIONS AND DERIVATIVES IN TERMS OF XI
C
    8 NFIRST = 0
      NZ = 0
      DO 12 NVAB = 1,4
      DO 12 NDIF = 1,3
      NA = NZ + 2
      NZ = NA + 3 - NDIF
      GASH = COEF(NA-1)
      DO 10 N = NA,NZ
   10 GASH = GASH*XI + COEF(N)
      IF(NVAB.EQ.2. OR .NVAB.EQ.4) GASH = GASH*HALF
   12 SHAPS(NDIF,NVAB) = GASH*HALF**(1-NDIF)
      DO 13 I = 1,3
   13 POIN(I,1) = 0.0
C
C*** COMPUTE THE LINEAR SHAPE FUNCTIONS TO DEAL WITH TENSION AND TORSION
C
      SIGN = 1.0
      DO 14 NOD = 1,2
      SIGN = -SIGN
      SHA = (1.0+XI*SIGN)*0.5
      SHADIF = SIGN*0.5/HALF
      DO 14 NXYZ = 1,3
      POIN(NXYZ,1) = POIN(NXYZ,1) + SHA*ELCORD(NOD,NXYZ)
      COMP = FRAME(NXYZ,2)
      KDEF = 6*(NOD-1) + NXYZ
      KROT = KDEF + 3
      WBEM(2,KDEF+1) = COMP*SHA
      WBEM(5,KROT) = COMP*SHA
      WBEM(7,KDEF) = COMP*SHADIF
      WBEM(9,KROT) = COMP*SHADIF
C
C*** USE BENDING FUNCTIONS JUDICIOUSLY FOR BENDING, WITH VECTOR ROTATION
C
      NROT = 2*NOD
      NDEF = NROT - 1
      DO 14 KXZ = 1,3,2
      COMP = FRAME(NXYZ,KXZ)
      OTHER = FRAME(NXYZ,4-KXZ)*(KXZ-2)
      WBEM(KXZ,KDEF+1) = WBEM(KXZ,KDEF+1) + COMP*SHAPS(1,NDEF)
      WBEM(KXZ+3,KDEF) = WBEM(KXZ+3,KDEF) - OTHER*SHAPS(2,NDEF)
      WBEM(KXZ+7,KDEF) = WBEM(KXZ+7,KDEF) + COMP*SHAPS(3,NDEF)
      WBEM(KXZ,KROT+1) = WBEM(KXZ,KROT+1) + OTHER*SHAPS(1,NROT)
      WBEM(KXZ+3,KROT) = WBEM(KXZ+3,KROT) + COMP*SHAPS(2,NROT)
   14 WBEM(KXZ+7,KROT) = WBEM(KXZ+7,KROT) + OTHER*SHAPS(3,NROT)
      DO 18 NVAB = 1,12
      DO 18 NXYZ = 1,3
      GASH = 0.0
      DO 16 I = 1,3
   16 GASH = GASH + WBEM(I,NVAB+1)*FRAME(NXYZ,I)
   18 WBEM(NXYZ,NVAB) = GASH
      RETURN
   99 WRITE(0,699)NERROR
 699  FORMAT(/10H *** ERROR,I2,32H IN SIMPLE BEAM ROUTINE, BEMSHA.)
      STOP
      END
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      SUBROUTINE HBRQD (ELCORD,ELOAD,ELSTIF,IPROP,JPROP,LPOP,LVMAX,
     .			MAXTRS,NDIM,NEL,NEWRHS,NFIRST,NROWST,NSTRES,
     .			STRESM,VPROP)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C2210
C 4-NODE HYBRID QUADRILATERAL (LOIKKANEN)
C
      DIMENSION ELOAD(LVMAX,NEWRHS),ELSTIF(36),STRESM(NROWST,MAXTRS),
     .		VPROP(IPROP,JPROP),ELCORD(9,4),
     .		GAUSS(12),C(6),GPC(2,4),SHAPE(12),XJAC(3,3),
     .		XJACI(3,3),AK(91),AS(60),SP(3,5),POIN(3,4)
      DATA GAUSS/-.5773502691D0,-.5773502691D0,1.D0,
     .		 -.5773502691D0, .5773502691D0,1.D0,
     .		  .5773502691D0,-.5773502691D0,1.D0,
     .		  .5773502691D0, .5773502691D0,1.D0/,
     .	   SP/1.D0,6*0.D0,1.D0,6*0.D0,1.D0/
C
      NDIM=2
      DO 10 I=1,91
  10  AK(I)=0.D0
      INAS=0
C
C IDENTIFY MATERIAL PROPERTIES AND FORM COMPLIANCE MATRIX
C
      YMOD=VPROP(1,LPOP)
      POIS=VPROP(2,LPOP)
      DENS=VPROP(3,LPOP)
      THIK=VPROP(4,LPOP)
      ALPH=VPROP(5,LPOP)
      TEMP=VPROP(6,LPOP)
      WRITE (6,600) NEL,YMOD,POIS,DENS,ALPH,THIK,TEMP
 600  FORMAT (//,' ELEMENT NO.',I5,/,' Y MOD =',E12.6,5X,'POIS R =',
     .	      F6.3,5X,'W DENS =',E12.6,/,' ALPH =',E12.6,5X,'THICK =',
     .	      E12.6,5X,'ELEMENT TEMP =',E12.6)
C
      IF (THIK) 15,15,25
C
C PLANE STRAIN
C
  15  C(1)=(1.D0-POIS**2)/YMOD
      C(2)=(-POIS-POIS**2)/YMOD
      C(3)=C(1)
      C(4)=0.D0
      C(5)=0.D0
      C(6)=2.D0*(1.D0+POIS)/YMOD
      THIK=1.D0
      GO TO 35
C
C PLANE STRESS
C
  25  C(1)=1.D0/YMOD
      C(2)=-C(1)*POIS
      C(3)=C(1)
      C(4)=0.D0
      C(5)=0.D0
      C(6)=C(1)*2.D0*(1.D0+POIS)
C
C LOCAL BASE VECTOR COMPONENTS FOR STRESS MATRIX
C
  35  XC=0.D0
      YC=0.D0
      DO 40 I=1,4
      XC=XC+ELCORD(I,1)*.25D0
  40  YC=YC+ELCORD(I,2)*.25D0
      XI=(ELCORD(2,1)+ELCORD(3,1))/2-XC
      XJ=(ELCORD(2,2)+ELCORD(3,2))/2-YC
      YI=(ELCORD(3,1)+ELCORD(4,1))/2-XC
      YJ=(ELCORD(3,2)+ELCORD(4,2))/2-YC
C
C BEGIN AREA NUMERICAL INTEGRATION FOR STIFFNESS AND LOADING
C
      DO 120 IGP=1,4
      IG3=IGP*3
      XII=GAUSS(IG3-2)
      ETA=GAUSS(IG3-1)
      WGT=GAUSS(IG3  )
C
      CALL ISOQS (SHAPE,12,ELCORD,XJAC,XJACI,4,XII,ETA,DUM,DETJ,NEL)
C
      GPC(1,IGP)=0.D0
      GPC(2,IGP)=0.D0
      DO 50 I=1,4
      GPC(1,IGP)=GPC(1,IGP)+SHAPE(8+I)*ELCORD(I,1)
  50  GPC(2,IGP)=GPC(2,IGP)+SHAPE(8+I)*ELCORD(I,2)
C
C STRESS MATRIX AT PRESENT GAUSS POINT
C
      SP(1,2)=ETA*XI*XI
      SP(2,2)=ETA*XJ*XJ
      SP(3,2)=ETA*XI*XJ
      SP(1,4)=XII*YI*YI
      SP(2,4)=XII*YJ*YJ
      SP(3,4)=XII*YI*YJ
C
      DVOLU=WGT*DETJ*THIK
C
C GENERALIZED FLEXIBILITY MATRIX
C
      CALL FLEX (AK,91,C,6,SP,3,5,8,DVOLU,ELSTIF)
C
C LEVERAGE MATRIX
C
      I1=35
      I2=44
      I4=55
      I5=65
      I7=77
      DO 80 J=1,4
      J2=J*2
      J2M1=J2-1
      I1=I1+2
      I2=I2+2
      I3=I2+1
      I4=I4+2
      I5=I5+2
      I6=I5+1
      I7=I7+2
      I8=I7+1
      AK(I1)=AK(I1)+	     SHAPE(J2M1)		     *DVOLU
      AK(I2)=AK(I2)+(SP(1,2)*SHAPE(J2M1)+SP(3,2)*SHAPE(J2  ))*DVOLU
      AK(I3)=AK(I3)+(SP(2,2)*SHAPE(J2  )+SP(3,2)*SHAPE(J2M1))*DVOLU
      AK(I4)=AK(I4)+	     SHAPE(J2  )		     *DVOLU
      AK(I5)=AK(I5)+(SP(1,4)*SHAPE(J2M1)+SP(3,4)*SHAPE(J2  ))*DVOLU
      AK(I6)=AK(I6)+(SP(2,4)*SHAPE(J2  )+SP(3,4)*SHAPE(J2M1))*DVOLU
      AK(I7)=AK(I7)+	     SHAPE(J2  )		     *DVOLU
      AK(I8)=AK(I8)+	     SHAPE(J2M1)		     *DVOLU
  80  CONTINUE
C
C STORE STRESS MATRIX FOR USE IN STRESS RECOVERY MATRICES
C
      DO 90 IR=1,3
      DO 90 JC=1,5
      INAS=INAS+1
  90  AS(INAS)=SP(IR,JC)
C
C ELEMENT GRAVITY LOADING (Y-DIRECTION) . . . THERMAL LOADING LATER
C
      DVOL=DVOLU*DENS
      DO 100 I=1,4
 100  ELOAD(2*I,1)=ELOAD(2*I,1)-DVOL*SHAPE(8+I)
C
C END OF NUMERICAL INTEGRATION
C
 120  CONTINUE
C
C CONDENSE STRESS FIELDS TO FORM STIFFNESS MATRIX
C
      CALL ELCOND (AK,91,AK,0,0,13,5,1)
      DO 130 I=1,36
 130  ELSTIF(I)=AK(I)
C
C FORM STRESS RECOVERY MATRICES AND COMPUTE THERMAL LOADING - ALSO
C STORE ELEMENT DATA ON FILE
C
      CALL ELCOND (AK,91,AK,0,0,13,5,4)
      INAS=0
      DO 200 IGP=1,4
      DO 140 IR=1,3
      DO 140 JC=1,5
      INAS=INAS+1
 140  SP(IR,JC)=AS(INAS)
      INAK=37
      DO 170 IVAB=1,8
      DO 160 ISTRES=1,3
      INAKK=INAK
      SUM=0.D0
      DO 150 K=1,5
      SUM=SUM+SP(ISTRES,K)*AK(INAKK)
 150  INAKK=INAKK+8+K
 160  STRESM(IVAB,ISTRES)=-SUM
 170  INAK=INAK+1
C
C THERMAL LOADING
C
      E0=-ALPH*TEMP
      DVOLU=DETJ*THIK
      DO 180 I=1,8
 180  ELOAD(I,1)=ELOAD(I,1)-(STRESM(I,1)+STRESM(I,2))*E0*DVOLU
C
      POIN(1,1)=GPC(1,IGP)
      POIN(2,1)=GPC(2,IGP)
      WRITE (7) IGP,NSTRES,8,STRESM,POIN,XJAC,DETJ
 200  CONTINUE
C
      RX=((YMOD/(1-POIS**2))*(1.D0+POIS))*E0
      WRITE (6,810) RX
 810  FORMAT (1X,'INITIAL NORMAL STRESS DUE TO TEMPERATURE =',E12.6)
C
      RETURN
      END
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      SUBROUTINE HBRBRK (ELCORD,ELOAD,ELSTIF,IPROP,JPROP,LPOP,LVMAX,
     .			 MAXTRS,NDIM,NEL,NEWRHS,NFIRST,NROWST,NSTRES,
     .			 STRESM,VPROP)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C2401
C 8-NODE HYBRID SOLID (LOIKKANEN)
C
      DIMENSION ELOAD(LVMAX,NEWRHS),ELSTIF(300),STRESM(NROWST,MAXTRS),
     .		VPROP(IPROP,JPROP),ELCORD(9,4),
     .		GAUSS(32),C(21),GPC(3,8),SHAPE(32),XJAC(3,3),XJACI(3,3),
     .		AK(903),AS(864),P(6,18),POIN(3,4),Q(4),SM(12),LQ(12,2),
     .		LJAC(12,2),INP(3,3),INS(3,3),SV(3),SHIFT(3)
      DATA P/1.D0,6*0.D0,1.D0,6*0.D0,1.D0,6*0.D0,1.D0,6*0.D0,1.D0,
     .	     6*0.D0,1.D0,72*0.D0/,
     .	   Q/4*1.D0/,  LQ/3*1,3*2,3*3,2,3,1,9*4,3,1,2/,
     .	   SM/-1.D0,0.D0,1.D0,-1.D0,0.D0,1.D0,-1.D0,0.D0,1.D0,3*0.D0/,
     .	   LJAC/3*2,3*3,4*1,2,3,3*3,3*1,3*2,1,2,3/,
     .	   INP/1,2,3,4,4,5,6,5,6/,   INS/2,1,0,1,2,1,0,0,2/,
     .	   GAUSS/-.5773502691D0,-.5773502691D0,-.5773502691D0,1.D0,
     .		 -.5773502691D0,-.5773502691D0, .5773502691D0,1.D0,
     .		 -.5773502691D0, .5773502691D0,-.5773502691D0,1.D0,
     .		 -.5773502691D0, .5773502691D0, .5773502691D0,1.D0,
     .		  .5773502691D0,-.5773502691D0,-.5773502691D0,1.D0,
     .		  .5773502691D0,-.5773502691D0, .5773502691D0,1.D0,
     .		  .5773502691D0, .5773502691D0,-.5773502691D0,1.D0,
     .		  .5773502691D0, .5773502691D0, .5773502691D0,1.D0/
      NROW(I,J)=(J*J-J)/2+I
C
      NDIM=3
      DO 10 I=1,903
  10  AK(I)=0.D0
      INAS=0
      FAC=SQRT(3.D0)
C
C IDENTIFY MATERIAL PROPERTIES AND FORM COMPLIANCE MATRIX
C
      YMOD=VPROP(1,LPOP)
      POIS=VPROP(2,LPOP)
      DENS=VPROP(3,LPOP)
      ALPH=VPROP(4,LPOP)
      TEMP=VPROP(5,LPOP)
      IF (THIK.EQ.0.) THIK=1.D0
      WRITE (6,601) NEL,YMOD,POIS,DENS,ALPH,TEMP
 601  FORMAT (//,' ELEMENT NO.',I5,/,' Y MOD =',E12.6,5X,'POIS R =',
     .	      F6.3,5X,'W DENS =',E12.6,/,' ALPH =',E12.6,5X,
     .	      'ELEMENT TEMP =',E12.6)
C
      DO 20 I=7,21
  20  C(I)=0.D0
      C(1)=1.D0/YMOD
      C(2)=-C(1)*POIS
      C(3)=C(1)
      C(4)=C(2)
      C(5)=C(2)
      C(6)=C(1)
      C(10)=C(1)*2.D0*(1.D0+POIS)
      C(15)=C(10)
      C(21)=C(10)
C
C SHIFT ORIGIN TO CENTER OF ELEMENT AND EVALUATE CENTRAL JACOBIAN
C
      DO 40 I=1,3
      SHIFT(I)=0.D0
      DO 30 J=1,8
  30  SHIFT(I)=SHIFT(I)+ELCORD(J,I)*.125D0
      DO 40 J=1,8
  40  ELCORD(J,I)=ELCORD(J,I)-SHIFT(I)
C
      XII=0.D0
      CALL ISOQS (SHAPE,32,ELCORD,XJAC,XJACI,8,XII,XII,XII,DETJ,NEL)
C
C BEGIN VOLUME NUMERICAL INTEGRATION FOR STIFFNESS AND LOADING
C
      DO 500 IGP=1,8
      IG4=IGP*4
      XII =GAUSS(IG4-3)
      ETA =GAUSS(IG4-2)
      ZETA=GAUSS(IG4-1)
      WGT =GAUSS(IG4  )
C
      CALL ISOQS (SHAPE,32,ELCORD,ELSTIF,ELSTIF(10),8,XII,ETA,ZETA,
     .		  DETJ,NEL)
C
      PX=0.D0
      PY=0.D0
      PZ=0.D0
      DO 320 I=1,8
      PX=PX+SHAPE(24+I)*ELCORD(I,1)
      PY=PY+SHAPE(24+I)*ELCORD(I,2)
 320  PZ=PZ+SHAPE(24+I)*ELCORD(I,3)
      GPC(1,IGP)=PX+SHIFT(1)
      GPC(2,IGP)=PY+SHIFT(2)
      GPC(3,IGP)=PZ+SHIFT(3)
      DVOLU=WGT*DETJ
C
C STRESS MATRIX AT XII,ETA,ZETA - STORE IN AS
C
      DO 330 I=1,3
 330  Q(I)=XJACI(1,I)*PX+XJACI(2,I)*PY+XJACI(3,I)*PZ
      DO 360 ICOL=7,18
      ICM6=ICOL-6
      DO 340 I=1,3
 340  SV(I)=XJAC(LJAC(ICM6,1),I)+SM(ICM6)*FAC*XJAC(LJAC(ICM6,2),I)
      DO 350 JROW=1,3
 350  P(JROW,ICOL)=SV(JROW)*SV(JROW)*Q(LQ(ICM6,1))*Q(LQ(ICM6,2))
      JJ=12
      DO 360 JROW=4,6
      ISV1=LQ(JJ,1)
      ISV2=LQ(JJ,2)
      JJ=6+JROW
 360  P(JROW,ICOL)=SV(ISV1)*SV(ISV2)*Q(LQ(ICM6,1))*Q(LQ(ICM6,2))
      DO 380 IR=1,6
      DO 380 JC=1,18
      INAS=INAS+1
 380  AS(INAS)=P(IR,JC)
C
C GENERALIZED FLEXIBILITY MATRIX
C
      CALL FLEX (AK,903,C,21,P,6,18,24,DVOLU,ELSTIF)
C
C LEVERAGE MATRIX
C
      INAK=301
      DO 460 INOD=1,8
      IN3=INOD*3
      DO 440 ICOL=1,3
      INAKK=INAK
      DO 420 JROW=1,18
      SUM=0.D0
      DO 400 K=1,3
 400  SUM=SUM+P(INP(ICOL,K),JROW)*SHAPE(IN3-INS(ICOL,K))
      AK(INAKK)=AK(INAKK)+SUM*DVOLU
 420  INAKK=INAKK+24+JROW
 440  INAK =INAK+1
 460  CONTINUE
C
C GRAVITY LOADING (Z-DIRECTION) . . .  THERMAL LOADING LATER
C
      DVOL=DVOLU*DENS
      DO 480 I=1,8
 480  ELOAD(3*I,1)=ELOAD(3*I,1)-DVOL*SHAPE(24+I)
C
C END OF NUMERICAL INTEGRATION
C
 500  CONTINUE
C
C CONDENSE STRESS FIELDS TO FORM STIFFNESS MATRIX
C
      CALL ELCOND (AK,903,AK,0,0,42,18,1)
      DO 510 I=1,300
 510  ELSTIF(I)=AK(I)
C
C FORM STRESS RECOVERY MATRICES AND COMPUTE THERMAL LOADING - ALSO
C STORE ELEMENT DATA
C
      CALL ELCOND (AK,903,AK,0,0,42,18,4)
      INAS=0
      DO 600 IGP=1,8
      DO 520 IR=1,6
      DO 520 JC=1,18
      INAS=INAS+1
 520  P(IR,JC)=AS(INAS)
      INAK=301
      DO 570 IVAB=1,24
      DO 560 ISTRES=1,6
      INAKK=INAK
      SUM=0.D0
      DO 550 K=1,18
      SUM=SUM+P(ISTRES,K)*AK(INAKK)
 550  INAKK=INAKK+24+K
 560  STRESM(IVAB,ISTRES)=-SUM
 570  INAK=INAK+1
C
C THERMAL LOADING
C
      E0=-ALPH*TEMP
      DVOLU=DETJ
      DO 580 I=1,24
 580  ELOAD(I,1)=ELOAD(I,1)-(STRESM(I,1)+STRESM(I,2)+STRESM(I,3))*E0
     .		*DVOLU
C
      POIN(1,1)=GPC(1,IGP)
      POIN(2,1)=GPC(2,IGP)
      POIN(3,1)=GPC(3,IGP)
      WRITE (7) IGP,NSTRES,24,STRESM,POIN,XJAC,DETJ
 600  CONTINUE
C
      RX=(YMOD*(1.D0-POIS))/((1.D0+POIS)*(1.D0-2.D0*POIS))
     .	*(1.D0+2.D0*POIS/(1.D0-POIS))*E0
      WRITE (6,810) RX
 810  FORMAT (1X,'INITIAL NORMAL STRESS DUE TO TEMPERATURE =',E12.6)
C
      RETURN
      END
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      SUBROUTINE ISOQS (SHAPE,NTS,COORD,XJAC,XJACI,ISHAPE,XII,ETA,
     .			ZETA,DETJ,NELMT)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C2595
C SHAPE FUNCTION ROUTINE FOR 4-NODE QUAD (ISHAPE=4) AND 8-NODE SOLID
C (ISHAPE=8)
C
      DIMENSION SHAPE(NTS),COORD(9,4),XJAC(3,3),XJACI(3,3),
     .		IX(4),IE(4),IS(24),INV(3)
      DATA IS/1,1,1, -1,1,1, -1,-1,1, 1,-1,1, 1,1,-1, -1,1,-1, -1,-1,-1,
     .	      1,-1,-1/,
     .	   IX/-1,1,1,-1/,	IE/-1,-1,1,1/,	    INV/2,3,1/
C
      IF (ISHAPE.NE.4) GO TO 290
C
C 4-NODE QUAD
C
 160  DO 170 I=1,4
      SHAPE( 8+I )=(1.D0+IX(I)*XII)*(1.D0+IE(I)*ETA)*.25D0
      SHAPE(2*I-1)=	 IX(I)	   *(1.D0+IE(I)*ETA)*.25D0
 170  SHAPE(2*I  )=(1.D0+IX(I)*XII)*	  IE(I)     *.25D0
C
 240  DO 260 I=1,2
      DO 260 J=1,2
      II=I
      DUM=0.D0
      DO 250 K=1,4
      DUM=DUM+SHAPE(II)*COORD(K,J)
 250  II=II+2
 260  XJAC(I,J)=DUM
      DETJ=XJAC(1,1)*XJAC(2,2)-XJAC(1,2)*XJAC(2,1)
      IF (DETJ.GT.1.E-10) GO TO 270
      WRITE(6,810) NELMT,DETJ
      STOP
C
 270  DUM=1.D0/DETJ
      XJACI(1,1)= XJAC(2,2)*DUM
      XJACI(1,2)=-XJAC(1,2)*DUM
      XJACI(2,1)=-XJAC(2,1)*DUM
      XJACI(2,2)= XJAC(1,1)*DUM
      DO 280 I=1,4
      K=2*I
      J=K-1
      DUM     =XJACI(1,1)*SHAPE(J)+XJACI(1,2)*SHAPE(K)
      SHAPE(K)=XJACI(2,1)*SHAPE(J)+XJACI(2,2)*SHAPE(K)
 280  SHAPE(J)=DUM
      RETURN
C
C 8-NODE SOLID
C
 290  DO 300 I=1,8
      I3=I*3
      I2=I3-1
      I1=I3-2
      XXX=1.D0+IS(I1)*XII
      EEE=1.D0+IS(I2)*ETA
      ZZZ=1.D0+IS(I3)*ZETA
      SHAPE(24+I)= XXX	   *  EEE     *  ZZZ	 *.125D0
      SHAPE(  I1)= IS(I1)  *  EEE     *  ZZZ	 *.125D0
      SHAPE(  I2)= XXX	   *  IS(I2)  *  ZZZ	 *.125D0
 300  SHAPE(  I3)= XXX	   *  EEE     *  IS(I3)  *.125D0
C
 450  DO 470 I=1,3
      DO 470 J=1,3
      II=I
      JJ=J
      DUM=0.D0
      DO 460 K=1,8
      DUM=DUM+SHAPE(II)*COORD(K,J)
      II=II+3
 460  JJ=JJ+3
 470  XJAC(I,J)=DUM
      DETJ=XJAC(1,1)*XJAC(2,2)*XJAC(3,3)+XJAC(2,1)*XJAC(3,2)*XJAC(1,3)
     .	  +XJAC(1,2)*XJAC(2,3)*XJAC(3,1)-XJAC(1,3)*XJAC(2,2)*XJAC(3,1)
     .	  -XJAC(1,2)*XJAC(2,1)*XJAC(3,3)-XJAC(2,3)*XJAC(3,2)*XJAC(1,1)
      IF (DETJ.GT.1.E-10) GO TO 480
      WRITE(6,810) NELMT,DETJ
      STOP
C
 480  DINV=1.D0/DETJ
      DO 490 I=1,3
      J=INV(I)
      K=INV(J)
      XJACI(I,I)=(XJAC(J,J)*XJAC(K,K)-XJAC(K,J)*XJAC(J,K))*DINV
      XJACI(I,J)=(XJAC(K,J)*XJAC(I,K)-XJAC(I,J)*XJAC(K,K))*DINV
 490  XJACI(J,I)=(XJAC(J,K)*XJAC(K,I)-XJAC(J,I)*XJAC(K,K))*DINV
      DO 500 I=1,8
      L =I*3
      K =L-1
      J =L-2
      DUM     =XJACI(1,1)*SHAPE(J)+XJACI(1,2)*SHAPE(K)
     .				  +XJACI(1,3)*SHAPE(L)
      DUMM    =XJACI(2,1)*SHAPE(J)+XJACI(2,2)*SHAPE(K)
     .				  +XJACI(2,3)*SHAPE(L)
      SHAPE(L)=XJACI(3,1)*SHAPE(J)+XJACI(3,2)*SHAPE(K)
     .				  +XJACI(3,3)*SHAPE(L)
      SHAPE(J)=DUM
 500  SHAPE(K)=DUMM
      RETURN
C
 810  FORMAT (//,16X,'EXECUTION ERROR (SUBROUTINE "ISOQS") - ELEMENT ',
     .	     'NO. ',I5,'  HAS A ZERO OR NEGATIVE JACOBIAN DETERMINANT',
     .	       /,16X,'DETERMINANT = ',F22.16)
      END
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      SUBROUTINE FLEX (AK,NTAK,C,NTC,S,NSTRES,NCOND,NDOF,DVOLU,A)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
C FORM GENERALIZED FLEXIBILITY AND SUBTRACT INTO AK
C
      DIMENSION AK(NTAK),C(NTC),S(NSTRES,NCOND),A(NSTRES,NCOND)
      NROW(I,J)=(J*J-J)/2+I
C
      DO 20 I=1,NSTRES
      DO 20 J=1,NCOND
      SUM=0.D0
      DO 10 K=1,NSTRES
      II=MIN0(I,K)
      KK=MAX0(I,K)
  10  SUM=SUM+C(NROW(II,KK))*S(K,J)
  20  A(I,J)=SUM
C
      DO 40 I=1,NCOND
      IPN=I+NDOF
      DO 40 J=I,NCOND
      SUM=0.D0
      DO 30 K=1,NSTRES
  30  SUM=SUM+S(K,I)*A(K,J)
      INAK=NROW(IPN,(J+NDOF))
  40  AK(INAK)=AK(INAK)-SUM*DVOLU
C
      RETURN
      END
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      SUBROUTINE ELCOND (A,NTA,X,NTX,NLCASE,NUMEQ,NCOND,MODEX)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C2728
C CONDENSATION OF LAST 'NCOND' EQUATIONS IN A SQUARE SYMMETRIC MATRIX, A
C AND VECTOR(S) X, RECOVERY OF PREVIOUSLY CONDENSED UNKNOWNS AND
C REDUCTION OF UPPER RIGHT MATRIX PARTITION
C     A(NTA)	   =  STIFFNESS MATRIX
C     X(NTX,NLCASE)=  RIGHT-HAND-SIDE VECTOR(S) - IF NTX.EQ.1,
C		      CONDENSATION OF VECTOR X IS SKIPPED
C     NLCASE	   =  NO. OF RIGHT-HAND-SIDE LOAD VECTOR(S)
C     NUMEQ	   =  NO. OF EQUATIONS (ORDER OF MATRICES)
C     NCOND	   =  NO. OF EQUATIONS TO BE CONDENSED - CONDENSATION
C		      BEGINS WITH THE LAST EQUATION (NCOND<NUMEQ)
C     MODEX	   =  EXECUTION MODE
C		      .EQ. 1  CONDENSE MATRIX A
C		      .EQ. 2  CONDENSE NEW X VECTOR(S)
C		      .EQ. 3  RECOVER PREVIOUSLY CONDENSED UNKNOWNS
C		      .EQ. 4  REDUCE UPPER RIGHT MATRIX PARTITION
C
      DIMENSION A(NTA),X(NTX,NLCASE)
      IDIAG(J)=(J*J-J)/2+J
C
      IF (MODEX-3) 10,100,200
C
C REVERSE GAUSS FACTORIZATION OF COEFFICIENT MATRIX AND SIMULTANEOUS
C REDUCTION OF RIGHT-HAND-SIDE VECTOR(S)
C
  10  NTXM1=NTX-1
      NEQ=NUMEQ
      DO 90 I=1,NCOND
      ID=IDIAG(NEQ)
      AA=A(ID)
      JE=NUMEQ-I
      JEQ=JE
      DO 80 J=1,JE
      JD=IDIAG(JEQ)+1
      IDMJ=ID-J
      IF (MODEX.EQ.2) GO TO 60
      PIVOT=A(IDMJ)/AA
      KR=IDMJ+1
      DO 50 K=1,JEQ
      FAC=PIVOT*A(KR-K)
      KL=JD-K
  50  A(KL)=A(KL)-FAC
      A(IDMJ)=PIVOT
      IF (NTXM1) 80,80,60
  60  DO 70 ILC=1,NLCASE
  70  X(JEQ,ILC)=X(JEQ,ILC)-A(IDMJ)*X(NEQ,ILC)
  80  JEQ=JEQ-1
  90  NEQ=NEQ-1
      RETURN
C
C RECOVERY OF PREVIOUSLY CONDENSED UNKNOWNS
C
 100  NEQ=NUMEQ-NCOND+1
      DO 120 I=NEQ,NUMEQ
      ID=IDIAG(I)
      AA=A(ID)
      DO 110 ILC=1,NLCASE
 110  X(I,ILC)=X(I,ILC)/AA
      JE=I-1
      IDMI=ID-I
      DO 120 J=1,JE
      JD=IDMI+J
      DO 120 ILC=1,NLCASE
 120  X(I,ILC)=X(I,ILC)-A(JD)*X(J,ILC)
      RETURN
C
C REDUCE UPPER RIGHT MATRIX PARTITION
C
 200  NROW=NUMEQ-NCOND
      IB  =NROW+2
      IS  =0
      DO 230 I=IB,NUMEQ
      IA=IDIAG(I-1)-IS
      JS=1
      DO 220 J=I,NUMEQ
      JA=IDIAG(J)-JS
      FAC=A(JA)
      KS=IS
      DO 210 K=1,NROW
      KS=KS+1
      KA=JA-KS
 210  A(KA)=A(KA)-FAC*A(IA-K)
 220  JS=JS+1
 230  IS=IS+1
      RETURN
      END
C
C
      SUBROUTINE HBRPLT(COORD,ELCORD,ELOAD,ELSTIF,IPROP, JPROP, LCOEF,
     .		  LNODS,LNODZ,LNOMAX, LPOP, LVABZ, LVMAX, MAXTRS, NDIM,
     .	 NEL,NELZ, NEWRHS,NODMAX, NROWST, NSTRES, STRESM, VPROP)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C2824
C*** 4-NODE HYBRID PLATE BENDING ELEMENT
C*** WRITTEN BY MATTI J. LOIKKANEN, UNIVERSITY OF CALGARY, APRIL 1981.
C
      DIMENSION ELOAD(LVMAX,NEWRHS), ELSTIF(LCOEF),COORD(NODMAX,NDIM),
     .	LNODS(LNOMAX,NELZ),STRESM(NROWST,MAXTRS), VPROP(IPROP,JPROP)
C
      DIMENSION DMOD(3,3), ELCORD(9,4), FRAME(3,3), POINT(3),FRAM(2,2),
     .	SHAP(12,6), XITA(2),XGAUSS(2), PRESS(5), TEMPR(5,2),POIN(2)
C
      DATA XGAUSS/ -0.57735026918963, 0.57735026918963/,
     .	   FRAME / 1.0, 3*0.0, 1.0, 4*0.0/
C
C*** RE-SET THE DIMENSIONS
C
      LTYP   = 10
      NDIM   = 2
C
C*** RETRIEVE ISOTROPIC MATERIAL PROPERTIES AND FORM MODULUS MATRIX
C
      IF(LNODZ.EQ.3) CALL TRIBEN(ELCORD, ELOAD, ELSTIF, IPROP, JPROP,
     .	 LCOEF, LPOP, LVABZ, MAXTRS, NDIM, NEL, NEWRHS, NODMAX,
     .	 NROWST, NSTRES, STRESM, VPROP)
      IF(LNODZ.EQ.3) RETURN
      YMOD = VPROP(1,LPOP)
      POIS = VPROP(2,LPOP)
      DENS = VPROP(3,LPOP)
      THIK = VPROP(4,LPOP)
      PRES = VPROP(5,LPOP)
      ALPHA = VPROP(6,LPOP)
      DELT = VPROP(7,LPOP)
      IF(THIK.EQ.0.0)  THIK = 1.0
C
      DO 2 I = 1,9
    2 DMOD(I,1) = 0.0
      D =(YMOD*THIK**3)/(12.*(1.-POIS**2))
      DMOD(1,1) = D
      DMOD(1,2) = D*POIS
      DMOD(2,1) = D*POIS
      DMOD(2,2) = D
      DMOD(3,3) = D*(1.0-POIS)/2.0
      WRITE(6,600) YMOD, POIS, DENS, THIK,ALPHA
  600 FORMAT(/' Y MOD =',E12.6,5X,'POIS R =',F6.3,5X,'W DENS =',E12.6,
     . 5X,'THIK =',E12.6,5X,'ALPHA=',E12.6)
C
C*** COLLECT NODAL COORDINATES TO ELCORD(  ),ETC
C
      DO 4 NOD = 1,LNODZ
      PRESS(NOD) = PRES
      DO 4 I = 1,2
      NODE = IABS(LNODS(NOD,NEL))
    4 TEMPR(NOD,I) = COORD(NODE,3+I)
      WRITE(6,604)
  604 FORMAT(/ ' NODE',9X,1HX,14X,1HY,14X,5HPRESS,10X,5HTEMP1,10X,
     .	5HTEMP2 )
      DO 10 NOD = 1,LNODZ
   10 WRITE(6,606) LNODS(NOD,NEL), (ELCORD(NOD,J), J = 1,2), PRESS(NOD),
     .	(TEMPR(NOD,I), I = 1,2)
  606 FORMAT(1X,I5, 8(2X,F13.4))
C
C*** CALL THE HYBRID SHAPE FUNCTION SUBROUTINE
C
      DO 100 JGAUS = 1,2
      XITA(2) = XGAUSS(JGAUS)
      DO 100 IGAUS = 1,2
      XITA(1) = XGAUSS(IGAUS)
C
      CALL PLATE(D,DETJ,DMOD,ELSTIF,ELCORD,FRAM,LCOEF,LNODZ,
     . LNODZZ,LTYP,LVABZ,LVMAX,MAXTRS,NDIM,NEL,NROWST,NSTRES,POIN,
     . POIS,PRESS,SHAP,STRESM,TEMPR,THIK,XITA)
C
C*** NODAL LOADS FROM PRESSURE, GRAVITY AND TEMPERATURE VIA 2X2 GAUSS
C
      FORCE = DETJ*(PRESS(5)+DENS*THIK)
      DELT = TEMPR(5,1)-TEMPR(5,2)
      XMOMNT = ALPHA*DELT*D*(1.0+POIS)/THIK
      DO 20 JVAB = 1,LVABZ
      GASH = FORCE*SHAP(JVAB,1)
      GUSH = XMOMNT*SHAP(JVAB,4)
      GISH = XMOMNT*SHAP(JVAB,5)
   20 ELOAD(JVAB,1) = ELOAD(JVAB,1) + GASH + GUSH + GISH
      DO 22 I = 1,2
   22 POINT(I) = POIN(I)
      POINT(3) = 0.0
C
      WRITE(7) NSTRES, LVABZ, STRESM, POINT, FRAME
  100 CONTINUE
      RETURN
      END
C
C
      SUBROUTINE PLATE(D,DETJ,DMOD,ELSTIF,ELCORD,FRAME,LCOEF,LNODZ,
     . LNODZZ,LTYP,LVABZ,LVMAX,MAXTRS,NDIM,NEL,NROWST,NSTRES,POINT,
     . POIS,PRESS,SHAP,STRESM,TEMPR,THIK,XITA)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C2923
C*** MAIN SHAPE FUNCTION SUBROUTINE FOR THE 4-NODE HYBRID PLATE
C*** OUTPUTS ELSTIF, STRESM, DEFLECTIONS, SLOPES AND CURVATURES
C
      DIMENSION  ELSTIF(LCOEF),ELCORD(9,4),POINT(2),PRESS(5),
     . STRESM(NROWST,MAXTRS),CJAC(2,2),CJACI(2,2),FRAME(2,2)
C
      DIMENSION  DMOD(3,3),DMODI(3,3),STRESS(5,10),UPPER(9,21),
     . UPVEC(189),SHAP(12,6),SHIFT(2),W(5),WDIF(2,5),XGAUSS(3),
     . XIBOUN(12,2),XITA(2),XIUSED(2),TEMPR(5,2),XXXX(9),TEMP(5),
     . WEIGHT(3)
C
      EQUIVALENCE(UPPER,UPVEC)
C
      DATA XGAUSS /-0.77459666924148,0.0,0.77459666924148/
      DATA XIBOUN
     .	 /-.6, 0.0, .6, 1., 1., 1., .6, 0.0, -.6, -1., -1., -1.,
     .	  -1., -1., -1., -.6, 0.0, .6, 1., 1., 1., .6, 0.0, -.6/
      DATA WEIGHT
     . /0.55555555555555,0.88888888888888,0.55555555555555/
C
C*** FORM NSTAGE, CLEAR WORKING AREAS, SOME EARLY DIAGNOSTIC CHECKS
C
      NSTAGE = 1
      IF(NFIRST.EQ.1) NSTAGE = 2
      IF(NSTAGE.EQ.2) GO TO 50
      NELPRE = NEL
C
      DO 2 I = 1,9
    2 DMODI(I,1) = 0.0
      DO 4 I = 1,189
    4 UPVEC(I) = 0.0
C
      N ERROR = 1
      IF(NDIM.NE.2 .OR. LNODZ.NE.4)		  GO TO 999
      N ERROR = 2
      IF(LVABZ.NE.(3*LNODZ))			GO TO 999
      N ERROR = 3
      IF(NSTRES.NE.3)				GO TO 999
      N ERROR = 4
      IF(LCOEF.NE.((LVABZ**2+LVABZ)/2)) 	GO TO 999
C
      CALL MATINV(DMOD, DMODI, 3, DETMOD)
      N ERROR = 5
      IF(DETMOD.LE.0.0) 			GO TO 999
C     WRITE(6,604) ((DMODI(I,J), J = 1,3), I = 1,3)
C 604 FORMAT( /' DMODI '/,3(3X,G18.8))
C
C*** RELATE COORD TO CENTER ; CHECK THE OBLIQUENESS
C
      DO 6 I = 1,NDIM
      SHIFT(I) = 0.0
      DO 8 J = 1,LNODZ
    8 SHIFT(I) = SHIFT(I)+ELCORD(J,I)/FLOAT(LNODZ)
      DO 6 J = 1,LNODZ
    6 ELCORD(J,I) = ELCORD(J,I)-SHIFT(I)
C
      N ERROR = 6
      DO 10 NO = 2,4,2
      LA = NO-1
      NE = NO
      IF(NO.EQ.4) NE = 1
      X = SQRT((ELCORD(LA,1)-ELCORD(NO,1))**2
     .	  +    (ELCORD(LA,2)-ELCORD(NO,2))**2)
      Y = SQRT((ELCORD(NE,1)-ELCORD(NO,1))**2
     .	  +    (ELCORD(NE,2)-ELCORD(NO,2))**2)
      Z = SQRT((ELCORD(NE,1)-ELCORD(LA,1))**2
     .	  +    (ELCORD(NE,2)-ELCORD(LA,2))**2)
      COSN = (X**2+Y**2-Z**2)/(2.0*X*Y)
      IF(ABS(COSN) .GT. 0.9396926)   GO TO 999
   10 CONTINUE
C
C*** FIND NORMALIZED BASE VECTORS  XI-ETA AT CENTER
C
      N ERROR = 7
      DO 12 I = 1,NDIM
   12 XIUSED(I) = 0.0
      CALL ISOP(FRAME,CJACI,DETJ,ELCORD,LNODZ,LNODZZ,LTYP,
     . NDIM,NEL,NSTAGE,POINT,TEMP,W,WDIF,XIUSED)
      IF(DETJ.LE.0.0)				GO TO 999
      DO 14 J = 1,NDIM
      GASH = 0.0
      DO 16 I = 1,NDIM
   16 GASH = GASH + FRAME(J,I)**2
      DO 14 I = 1,NDIM
   14 FRAME(J,I) = FRAME(J,I)/SQRT(GASH)
C
C     WRITE(6,610) NEL,XIUSED,POINT
C 610 FORMAT(/' FRAME, NEL,XIUSED,POINT=',I5,4F12.6)
C     WRITE(6,612) ((FRAME(I,J), J = 1,2),I = 1,2)
C 612 FORMAT(10X, 2F15.6)
C
C*** START INTEGRATING 'CURLY F', WE USE 3X3 GAUSS RULE THRU AREA
C
   50 NFIRST = 0
      DO 70 JGAUS = 1,3
      XIUSED(2) = XGAUSS(JGAUS)
      DO 70 IGAUS = 1,3
      XIUSED(1) = XGAUSS (IGAUS)
C
      IF(NSTAGE.EQ.1)	GO TO 54
      DO 52 I = 1,NDIM
   52 XIUSED(I) = XITA(I)
C
   54 CALL ISOP(CJAC,CJACI,DETJ,ELCORD,LNODZ,LNODZZ,LTYP,
     . NDIM,NEL,NSTAGE,POINT,TEMP,W,WDIF,XIUSED)

      IF(DETJ.LE.0.0)				GO TO 999
      FACT = DETJ*WEIGHT(IGAUS)*WEIGHT(JGAUS)
C
C*** ON THE SECOND PASS FIND THE DEFLECTIONS AND SLOPES
C
      IF(NSTAGE.EQ.2)
     . CALL PSHAPE(CJAC,CJACI,DETJ,ELCORD,LNODZ,LNODZZ,LTYP,
     . NDIM,NEL,NSTAGE,POINT,TEMPR,PRESS,SHAP,XIUSED)
C
C*** ASSUMED MOMENTS AT THIS POINT, THEN TRIPLE PRODUCT
C
      CALL MOMNTS(D,FRAME,POINT,POIS,STRESS,NDIM,2)
      IF(NSTAGE.EQ.2)  GO TO 200
C
      DO 70 K = 1,9
      DO 72 J = 1,3
      GASH = 0.0
      DO 74 I = 1,3
   74 GASH = GASH + DMODI(J,I)*STRESS(I,K)
   72 XXXX(J) = GASH
      DO 70 L = 1,9
      GASH = 0.0
      DO 76 I = 1,3
   76 GASH = GASH + STRESS(I,L)*XXXX(I)
   70 UPPER(L,K) = UPPER(L,K)-GASH*FACT
C
C*** NOW 'CURLY L' INTO UPPER, WE USE 3-POINT GAUSS RULE ON EACH SIDE
C
      DO 100 ISD = 1,4
      NXT = ISD
      IF(NXT.EQ.5) NXT = 1
      SIDE = SQRT((ELCORD(NXT,1) - ELCORD(ISD,1))**2
     .		 +(ELCORD(NXT,2) - ELCORD(ISD,2))**2 )
      COSN = (ELCORD(NXT,2) - ELCORD(ISD,2))/SIDE
      SINN = (ELCORD(ISD,1) - ELCORD(NXT,1))/SIDE
C     WRITE(6,620) NEL,ISD,SIDE,COSN,SINN
C 620 FORMAT(/' NORMAL VECTOR, NEL,ISD ', 2I5,3F15.5)
C
      DO 100 INTP=1,3
      IRW = 3*ISD-3+INTP
      DO 82 I = 1,2
      XIUSED(I) = XIBOUN(IRW,I)
      IF(ABS(XIUSED(I)).EQ.0.6)
     . XIUSED(I) = (XIUSED(I)/0.6)*SQRT(0.6)
   82 CONTINUE
      CALL PSHAPE(CJAC,CJACI,DETJ,ELCORD,LNODZ,LNODZZ,LTYP,
     . NDIM,NEL,NSTAGE,POINT,TEMPR,PRESS,SHAP,XIUSED)
      CALL MOMNTS(D,FRAME,POINT,POIS,STRESS,NDIM,1)
C
C*** ROTATE MOMNTS ETC; COMP VIRTUAL WORK TERM BY TERM
C
      KOL = 9
      DO 100 IDOF = 1,12
      KOL = KOL
      DEFL = SHAP(IDOF,1)
      SLOPEN = SHAP(IDOF,2)*COSN + SHAP(IDOF,3)*SINN
      SLOPET = -SHAP(IDOF,2)*SINN + SHAP(IDOF,3)*COSN
C
      DO 100 ISS = 1,9
      XMOMNN = STRESS(1,ISS)*(COSN**2) + STRESS(2,ISS)*(SINN**2)
     .	       + 2.0*STRESS(3,ISS)*(COSN*SINN)
      XMOMNT = -(STRESS(1,ISS)-STRESS(2,ISS))*(COSN*SINN)
     .	       + STRESS(3,ISS)*(COSN**2-SINN**2)
      QN = STRESS(4,ISS)*COSN + STRESS(5,ISS)*SINN
      WORK = -(XMOMNN*SLOPEN + XMOMNT*SLOPET - QN*DEFL)
  100 UPPER(ISS,KOL) = UPPER(ISS,KOL) + WORK*(SIDE*0.5)*WEIGHT(INTP)
C
C     WRITE(6,622) NEL
C 622 FORMAT(//'  FULL UPPER, NEL = ',I5)
C     WRITE(6,624) ((UPPER(I,J) ,I = 1,9), J = 1,21)
C 624 FORMAT( 9(1X,G13.6))
C
C*** INTEGRATIONS FINISHED; PSEUDO-REDUCTION FOR TRIPLE PRODUCT
C
      N ERROR = 8
      DO 106 I = 1,9
      PIVOT = UPPER(I,I)
C     IF(ABS(PIVOT) .LT. 1.0)	WRITE(6,626) I, PIVOT
C 626 FORMAT(10X, ' I =',I5, ' PIVOT =', G15.6)
      IF(I.EQ.9)  GO TO 106
      IF(ABS(PIVOT) .LT. 0.000001)   GO TO 999
      IZ = I
      DO 104 J = IZ,9
  104 UPVEC(J) = UPPER(I,J)/PIVOT
      IZ = I
      DO 102 K = IZ,21
      JDEL = 9-9*K
      JZ = 9
      IF(K.LT.9) JZ = K
      GASH = UPPER(I,K)
      K1 = I-JDEL
      K2 = JZ-JDEL
      DO 102 J = K1,K2
  102 UPVEC(J) = UPVEC(J)-GASH*UPVEC(J+JDEL)
  106 CONTINUE
C
C*** FORM NODAL STIFF USING XXXX AS WORKING AREA
C
      NSTIF = 0
      DO 112 I = 10,21
      DO 114 K = 1,9
  114 XXXX(K) = UPPER(K,I)/UPPER(K,K)
      DO 112 J = 10,I
      GASH = 0.0
      KDEL = (J-1)*9
      DO 116 K = 1,9
  116 GASH = GASH - XXXX(K)*UPVEC(K+KDEL)
      NSTIF = NSTIF
  112 ELSTIF(NSTIF) = GASH
C     WRITE(6,630) NEL,ELSTIF
C 630 FORMAT(// ' NODAL STIFF, NEL = ',I5/(6(1X,G12.6)))
C
C*** UPWARDS REDUCTION FOR 'GENERALIZED FORCES'
C
      DO 140 II = 1,9
      I = 10-II
      DO 146 J = 1,9
  146 XXXX(J) = UPPER(I,J)
      DO 140 N = 10,21
      GASH = UPPER(I,N)
      JDEL = (N-1)*9
      IF(I.EQ.9)  GO TO 140
      JZ = I
      DO 144 J = JZ,9
  144 GASH = GASH - XXXX(J)*UPVEC(J+JDEL)
  140 UPPER(I,N) = GASH/UPPER(I,I)
C
      NSTAGE = 2
      GO TO 50
C
C*** COMPUTE ELEM STRESS MATRIX AT THIS POINT
C
  200 DO 202 I = 1,12
      DO 204 J = 1,3
      GASH = 0.0
      DO 206 K = 1,9
  206 GASH = GASH + STRESS(J,K)*UPPER(K,I)
  204 STRESM(I,J) = -GASH
C
C*** COMPUTE B-MATRIX AND PLACE IT IN 'SHAP'
C
      DO 202 J = 1,3
      GASH = 0.0
      DO 208 K = 1,3
  208 GASH = GASH + DMODI(J,K)*STRESM(I,K)
  202 SHAP(I,J) = GASH
C
C*** FINALLY SHIFT ORIGIN BACK TO ZERO
C
      DO 210 I = 1,2
  210 POINT(I) = POINT(I)+SHIFT(I)
C
C     WRITE(6,680) NEL,XIUSED
C 680 FORMAT(//' FINAL CHECK, NEL =',I5,'XI ETA =',2F12.6)
C     WRITE(6,684) ((STRESM(I,J), I = 1,12), J = 1,3)
C 684 FORMAT(//  ' STRESM '/(12(1X,F10.5)))
C     WRITE(6,686) ((SHAP(I,J),J = 1,6),I = 1,12)
C 686 FORMAT(// ' SHAPE'/(6(1X,F10.5)))
C
      RETURN
C
C*** WE WRITE DIAGNOSTICS IN THE CASE OF FAILURE
C
  999 WRITE(6,699) NEL, N ERROR
  699 FORMAT(///' ERROR IN SEGMENT PLATE; ELEMENT=',I5,
     .	' ERROR NO=',I2////)
      STOP 433
      END
CC
CC
      SUBROUTINE MOMNTS (D,FRAME,POINT,POIS,STRESS,NDIM,IKEY)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION FRAME(NDIM,NDIM), POINT(NDIM), STRESS(5,10)
C3207
C*** ASSUM. MOMNTS AND SHEARS IN GLOBAL DIR.
C
      DO 1 I = 1,50
    1 STRESS(I,1) = 0.0
      DO 2 I = 1,2
    2 STRESS(I,I) = 2.0
      STRESS(3,3) = 1.0
      STRESS(1,4) = 2.0*POINT(2)
      STRESS(1,6) = 6.0*POINT(1)
      STRESS(2,5) = 2.0*POINT(1)
      STRESS(2,7) = 6.0*POINT(2)
      STRESS(3,4) = 2.0*POINT(1)
      STRESS(3,5) = 2.0*POINT(2)
      STRESS(4,5) = 2.0
      STRESS(4,6) = 6.0
      STRESS(5,4) = 2.0
      STRESS(5,7) = 6.0
C
C*** FOR THE 8TH AND 9TH MOMENT FIELD WE USE THE "MEAN AXIS"
C
      DO 4 I = 1,2
      C = FRAME(I,1)
      S = FRAME(I,2)
      XPR = POINT(1)*C + POINT(2)*S
      YPR = -POINT(1)*S + POINT(2)*C
C
      STRESS(1,10) = 6.0*XPR*YPR
      STRESS(2,10) = 0.0
      STRESS(3,10) = 3.0*(XPR**2)
      STRESS(4,10) = 6.0*YPR
      STRESS(5,10) = 6.0*XPR
C
      STRESS(1,I) = STRESS(1,10)*(C**2) - 2.0*STRESS(3,10)*(C*S)
      STRESS(2,I) = STRESS(1,10)*(S**2) + 2.0*STRESS(3,10)*(C*S)
      STRESS(3,I) = STRESS(1,10)*(C*S) + STRESS(3,10)*(C**2-S**2)
      STRESS(4,I) = STRESS(4,10)*C - STRESS(5,10)*S
    4 STRESS(5,I) = STRESS(4,10)*S + STRESS(5,10)*C
C
C     WRITE(6,600) POINT
C 600 FORMAT( '  MOM FIELDS AT POINT= ',2F12.5)
C     WRITE(6,602) ((STRESS(I,J), J = 1,9),I = 1,5)
C 602 FORMAT(10X, 9F12.5)
C
      RETURN
      END
C

      SUBROUTINE PSHAPE(CJAC,CJACI,DETJ,ELCORD,LNODZ,LNODZZ,LTYP,
     . NDIM,NEL,NSTAGE,POINT,TEMPR,PRESS,SHAP,XITA)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C3262
C*** SHAPE(INTERPOLATION) FUNCTION SUBROUTINE FOR THE PLATE BENDING
C
      DIMENSION CJAC(2,2),CJACI(2,2),ELCORD(9,4),POINT(2),TEMPR(5,2),
     . PRESS(5),SHAP(12,6),XITA(2),W(5),WDIF(2,5),TEMP(5)
      DIMENSION D(2), DEF(3), DS(2), KEY(2,8), NDO(2,4),P(2), PERP(2),
     . R(2), RS(2), SIDE(2), SLOPES(3,2), XINOD(2,4)
C
      DATA KEY/1,2,1,4, 1,2,2,3,  4,3,2,3, 4,3,1,4/,
     .	   NDO/1,2, 1,1, 2,2, 1,1/,
     .	   XINOD/-1.0,-1.0, 1.0,-1.0, 1.0,1.0, -1.0,1.0/
C
      CALL ISOP(CJAC,CJACI,DETJ,ELCORD,LNODZ,LNODZZ,LTYP,
     . NDIM,NEL,NSTAGE,POINT,TEMP,W,WDIF,XITA)
C
C*** INTERPOLATE FOR TEMPERATURES AND PRESSURES AT THIS POINT
C
      DO 2 I = 1,2
    2 TEMPR(5,I) = 0.0
      PRESS(5)	 = 0.0
      DO 4 NOD = 1,4
      DO 6 I = 1,2
    6 TEMPR(5,I) = TEMPR(5,I) + W(NOD)*TEMPR(NOD,I)
    4 PRESS(5)	 = PRESS(5) + W(NOD)*PRESS(NOD)
C     WRITE(6,600) XITA, POINT,  (TEMPR(5,I),I = 1,2), PRESS(5)
C 600 FORMAT(/' XITA=',2F10.4,' POINT=',2G10.4,' TEMP=',2G10.4,' PRES=',
C    . G10.4)
C
C*** CALCULATE OR UPDATE THE SHAPE FUNCTIONS FOR THE TWO FAMILIES OF BE
C
      DO 16 NOD = 1,4
      N1 = NDO(1,NOD)
      N2 = NDO(2,NOD)
      DO 8 N = N1,N2
      Q = XITA(N)
      QNOD = XINOD(N,NOD)
      P(N) = 0.5 + 0.5*Q*QNOD
      D(N) = 0.5 + 0.25*Q*QNOD*(3.0-Q*Q)
      DS(N) = 0.75*QNOD*(1.0-Q*Q)
      R(N) = 0.25*(QNOD+Q)*(Q*Q-1.0)
    8 RS(N) = (0.75*Q + 0.5*QNOD)*Q-0.25
C
C*** DETERMINE THE RELEVANT EDGE BEAMS IN TURN; AS THEY ARE CONSIDERED
C
      DO 16 ISIDE = 1,2
      NSIDE = 2*(NOD-1) + ISIDE
      SIDESQ = 0.0
      DO 10 NXY = 1,2
      SIDE(NXY)
     . = 0.5*(ELCORD(KEY(2,NSIDE),NXY) - ELCORD(KEY(1,NSIDE),NXY))
   10 SIDESQ = SIDESQ+SIDE(NXY)**2
      PERP(1) = SIDE(2)
      PERP(2) = -SIDE(1)
C
C*** CHART THE BEHAVIOUR OF A POINT ON AN EDGE; CONSIDERING IT AS BEAM
C
      DEF(1) = D(ISIDE)
      DO 12 NXY = 1,2
      SLOPES(1,NXY) = DS(ISIDE)*SIDE(NXY)/SIDESQ
      DEF(NXY) = R(ISIDE)*SIDE(NXY)
      DO 12 MXY = 1,2
      SLOPES(MXY,NXY) = (RS(ISIDE)*SIDE(MXY)*SIDE(NXY)
     .	       +P(ISIDE)*PERP(MXY)*PERP(NXY))/SIDESQ
   12 CONTINUE
C
C*** CHART THE EFFECT OF THE RESPONSE OF EDGE BEAM ON INTERNAL BEAMS
C
      IBEAM = 3-ISIDE
      DO 16 N3 = 1,3
      NV = 3*(NOD-1) + N3
      S = 0.0
      DO 14 N = 1,2
   14 S = S+SLOPES(N3,N)*CJAC(IBEAM,N)
      SHAP(NV,IBEAM) = D(IBEAM)*DEF(N3)+R(IBEAM)*S
   16 SHAP(NV,IBEAM) = DS(IBEAM)*DEF(N3)+RS(IBEAM)*S
C
C*** TRANSFORM "SHAP"
C
      DO 20 NV = 1,12
      SHAP(NV,1) = 0.5*(SHAP(NV,1)+SHAP(NV,2))
      DO 20 M = 1,2
      GASH = 0.0
      DO 18 N = 1,2
   18 GASH = GASH + SHAP(NV,N)*CJACI(M,N)
   20 SHAP(NV,M) = GASH
C
C     WRITE(6,602) NEL, XITA,  ((SHAP(NV, I), I = 1,3), NV = 1,12)
C 602 FORMAT(//' SHAPE FUNCT. AND DERIVAT. ***NEL XITA =',I5,2F10.5/
C    . (6X,3F12.7))
C
      RETURN
      END
CC
CC
      SUBROUTINE TRIBEN(ELCORD, ELOAD, ELSTIF, IPROP, JPROP, LCOEF,
     .		       LPOP, LVABZ, MAXTRS, NDIM, NEL,
     .	 NEWRHS, NODMAX, NROWST, NSTRES, STRESM, VPROP)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION XGAUS(3,2), DB(3), EXLOAD(55), XITA(3), DMOD(3,3),
     .	 STREM(30,3), EXSTIF(55), ELSTIF(LCOEF), VPROP(IPROP,JPROP),
     .	 POIN(2,3), STRESM(LVABZ,NSTRES), W(18,7)
      DATA XGAUS/0., 4*0.5, 0./, ZERO/0.0/
C3369
C*** BENDING TRIANGLE, A HYBRID ELEMENT WITH AN ADDED BUBBLE FUNCTION.
C
      YOUNG = VPROP(1,LPOP)
      POISS = VPROP(2,LPOP)
      DENS = VPROP(3,LPOP)
      THIK = VPROP(4,LPOP)
      PRESS = VPROP(5,LPOP)
      ALPHA = VPROP(6,LPOP)
      DELT = VPROP(7,LPOP)
      BEND = YOUNG*THIK**3/(12.0*(1.0-POISS**2))
      WEIGHT = THIK*DENS
      DO 2 I = 1,55
    2 EXSTIF(I) = 0.0
C
C*** ENTER GAUSS INTEGRATION LOOP, AND CALL SHAPE FUNCTION ROUTINE.
C
      DO 21 IGAUS = 1,3
      DO 4 IXY = 1,2
    4 XITA(IXY) = XGAUS(IGAUS,IXY)
      CALL NAGWA(DET, ELCORD, W, XITA, EXE, WYE)
      POIN(1,IGAUS) = EXE
      POIN(2,IGAUS) = WYE
      DMOD(1,1) = BEND
      DMOD(2,2) = BEND
      DMOD(1,2) = BEND*POISS
      DMOD(2,1) = BEND*POISS
      DMOD(3,3) = BEND*0.5*(1.0-POISS)
      NV = 1
      DO 19 IVAB = 1,10
      EXLOAD(IVAB) = EXLOAD(IVAB) + (PRESS+WEIGHT)
      DO 14 I = 1,3
      GASH = 0.0
      DO 12 J = 1,3
   12 GASH = GASH + DMOD(I,J)*W(IVAB,J+3)
      DB(I) = GASH*DET/6.0
   14 STREM(10*(IGAUS-1)+IVAB,I) = GASH
      DO 19 JVAB = 1,IVAB
      GASH = EXSTIF(NV)
      DO 18 I = 1,3
   18 GASH = GASH + DB(I)*W(JVAB,I+3)
      EXSTIF(NV) = GASH
   19 NV = NV + 1
   21 CONTINUE
C
C*** RELAX OUT THE BUBBLE FUNCTION.
C
      PIVOT = EXSTIF(55)
      NV = 1
      DO 24 IVAB = 1,9
      FACT = EXSTIF(45+IVAB)/PIVOT
      EXLOAD(IVAB) = EXLOAD(IVAB) - FACT*EXLOAD(10)
      DO 22 JVAB = 1,IVAB
      EXSTIF(NV) = EXSTIF(NV) - FACT*EXSTIF(45+JVAB)
   22 NV = NV + 1
      DO 24 I = 1,3
      DO 24 IGAUS = 1,3
      STREM(10*(IGAUS-1)+IVAB,I) = STREM(10*(IGAUS-1)+IVAB,I)
     .	 - FACT*STREM(I*(IGAUS-1)+10,I)
   24 CONTINUE
      NSTRES = 3
      DO 30 NGAU = 1,3
   30 WRITE(7) NGAU, NSTRES, LVABZ,
     .	 ((STREM(10*(NGAU-1)+IV,J), J = 1,3), IV = 1,10),
     .	 (POIN(I,NGAU), I = 1,2), (ZERO, I = 1,19), DET
      DO 32 NV = 1,45
   32 ELSTIF(NV) = EXSTIF(NV)
      RETURN
      END
C
C
      SUBROUTINE NAGWA(DET, ELCORD, W, XITA, EXE, WYE)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION ELCORD(9,4), W(18,7), X(6), Y(6), XITA(3)
C3449
C*** BASICALLY RAZZAQUE'S STRESS-SMOOTHED BENDING TRIANGLE.
C
      DO 2 I = 2,18
      DO 2 J = 1,7
    2 W(I,J) = 0.0
      DO 4 I = 1,3
      X(I) = ELCORD(I,1)
      X(I+3) = X(I)
      Y(I) = ELCORD(I,2)
    4 Y(I+3) = Y(I)
      EXE = 0.0
      WYE = 0.0
      DET = 0.0
      DO 12 I = 1,3
      IW = 3*I - 1
      I1 = I + 1
      I4 = I + 4
      I10 = I + 10
      MULT1 = I + 12
      EI = XITA(I)
      EI2 = EI + EI
      EIS = EI*EI
      W(IW,1) = EI
      W(IW,I1) = 1.0
      W1 = EI + EIS
      W(MULT1,1) = W1
      W(MULT1,I1) = 1.0 + EI2
      EXE = EXE + EI*X(I)
      WYE = WYE + EI*Y(I)
      X(I+3) = X(I)
      Y(I+3) = Y(I)
      DO 10 ID = 1,2
      J = I + ID
      IF(J.GT.3) J = J - 3
      J1 = J + 1
      J4 = J + 4
      K = 6 - I - J
      ISL = IW + ID
      MULT2 = K + 15
      DET = -DET + X(J)*Y(I)
      EJ = XITA(J) + 1.0E-20
      EIJ = EI + EJ
      EK = XITA(K)
      W(ISL,1) = EIS*EJ
      W(ISL,I1) = EI2*EJ
      W(ISL,J1) = EIS
      W(ISL,I4) = EJ + EJ - EI2
      W(ISL,J4) = -EI2
      W(ISL,K+4) = EI2
      W2 = EJ*EJ/EIJ
      W(MULT2,1) = W2
      W(MULT2,I1) = -1.0/EIJ
      W(MULT2,J1) = (1.0 + EI/EIJ)/EJ
      DO 6 L = 2,4
      W(MULT2,L) = W2*W(MULT2,L)
      W(I10,L) = W1*W(MULT2,L) + W(MULT1,L)*W2
    6 W(MULT1,L) = W(I10,L)
      W1 = W1*W2
   10 W(I10,1) = W1
   12 W(I10,I4) = EI + EI - 1.0
      DO 18 ISL = 1,12
      ISL1 = ISL + 1
      WX = 0.0
      WY = 0.0
      WXX = 0.0
      WXY = 0.0
      WYY = 0.0
      DO 16 J = 2,4
      DXJ = (X(J+1) - X(J))/DET
      DYJ = (Y(J+1) - Y(J))/DET
      WX = WX - DYJ*W(ISL1,J)
      WY = WY + DXJ*W(ISL1,J)
      WJ = W(ISL1,J+3)
      WXX = WXX + WJ*DYJ*DYJ
      WXY = WXY - WJ*DXJ*DYJ
   16 WYY = WYY + WJ*DXJ*DXJ
      W(ISL,2) = W(ISL1,1)
      W(ISL,3) = WX
      W(ISL,4) = WY
      W(ISL,5) = WXX
      W(ISL,6) = WYY
   18 W(ISL,7) = 2.0*WXY
      DO 22 I = 1,3
      DO 22 ID = 1,2
      J = I + ID
      IF(J.GT.3) J = J - 3
      DXI = X(J) - X(I)
      DYI = Y(J) - Y(I)
      K = 6 - I - J
      IW = 3*I - 2
      ISL = IW + ID
      JW = 3*J - 2
      CONST = 2.0 +
     .	 3.0*(DXI*(X(I)-X(K)) + DYI*(Y(I)-Y(K)))/(DXI*DXI + DYI*DYI)
      DO 22 L = 2,7
      BEND = W(ISL,L) + W(J+9,L) + CONST*W(K+9,L)
      W(ISL,L) = BEND
      W(IW,L) = W(IW,L) + BEND
   22 W(JW,L) = W(JW,L) - BEND
      DO 26 I = 1,3
      IJ = 3*I - 2
      DX1 = X(I+1) - X(I)
      DX2 = X(I+2) - X(I)
      DY1 = Y(I+1) - Y(I)
      DY2 = Y(I+2) - Y(I)
      DO 26 L = 1,6
      L1 = L + 1
      W(IJ,L) = W(IJ,L1)
      W(IJ+1,L) = DX1*W(IJ+1,L1) + DX2*W(IJ+2,L1)
   26 W(IJ+2,L) = DY1*W(IJ+1,L1) + DY2*W(IJ+2,L1)
C
C*** NAGWA KHALIL'S EXTRA BUBBLE FUNCTION, TO RELAX ELEMENT.
C
      E12 = XITA(1)*XITA(2)
      E23 = XITA(2)*XITA(3)
      E31 = XITA(3)*XITA(1)
      Y23 = Y(2) - Y(3)
      Y31 = Y(3) - Y(1)
      Y12 = Y(1) - Y(2)
      X32 = X(3) - X(2)
      X13 = X(1) - X(3)
      X21 = X(2) - X(1)
C      D12 = -4.0 + 6.0*XITA(1) + 6.0*XITA(2)
C      D23 = -4.0 + 6.0*XITA(2) + 6.0*XITA(3)
C      D13 = -4.0 + 6.0*XITA(1) + 6.0*XITA(3)
      D12 = 6.0*(XITA(1)-XITA(2))
      D23 = 6.0*(XITA(2)-XITA(3))
      D13 = 6.0*(XITA(3)-XITA(1))
      W(10,1) = 0.0
      W(10,2) = 0.0
      W(10,3) = 0.0
      W(10,4) = (D23*Y23*Y23 + D13*Y31*Y31 + D12*Y12*Y12)/(DET*DET)
      W(10,5) = (D23*X32*X32 + D13*X13*X13 + D12*X21*X21)/(DET*DET)
      W(10,6) = (D23*Y23*X32 + D13*Y31*X13 + D12*Y12*X21)/(DET*DET)*2.0
      RETURN
      END
C
C
C
      SUBROUTINE SHELL(COORD,ELCORD, ELOAD, ELSTIF, IPROP, JPROP, LCOEF,
     .		      LNODS, LNODZ, LNOMAX, LPOP, LVABZ, LVMAX, MAXTRS,
     .	 NDIM, NEL, NELZ, NEWRHS, NFIRST, NODMAX, NROWST, NSTRES,
     .	 STRESM, VPROP)
C3596
C*** THE SEMILOOF ELEMENT WITH 2X2 GAUSS AND STRESSES AT THE SAME POINTS
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION ELCORD(9,4), ELOAD(LVMAX,NEWRHS), ELSTIF(LCOEF),
     .	 LNODS(LNOMAX,NELZ), STRESM(NROWST,MAXTRS), VPROP(IPROP,JPROP),
     .	 COORD(NODMAX,NDIM)
      COMMON/SHEL/AREA, FRAM(3,3), POIN(3), SIDE, THIK,
     .	 WCORN(10,3), WLOOF(10,3), WSHEL(13,45)
      DIMENSION B(6,32), BV(192), DB(6), DMOD(6,6), XGAUS(4,4), XITA(2)
      EQUIVALENCE (B(1,1),BV(1)), (DB(1),P), (DB(2),Q), (DB(3),R),
     .	 (DB(4),S), (DB(5),T), (DB(6),H)
      DATA XGAUS/0., 4*.5, 0., 2*.5, -.577350269, 2*.577350269,
     .	 3*-.577350269, 2*.577350269/
C
C*** EXTRACT ALL THE RELEVANT MATERIAL PROPERTIES, FROM THE GIVEN LISTS.
C
      YMOD = VPROP(1,LPOP)
      POIS = VPROP(2,LPOP)
      DENSTY = VPROP(3,LPOP)
      PRESS = VPROP(4,LPOP)
!      WRITE(6,600) YMOD, POIS, DENSTY, PRESS
! 600  FORMAT(/17H YOUNGS MODULUS =,F13.6,10X,17H POISSONS RATIO =,F5.3,
!     .	 10X,9HDENSITY =,F10.8,10X,10HPRESSURE =,F12.6)
C
C*** FOR DEMONSTRATION PURPOSES ONLY, WE PUT THE NODAL THICKNESSES EQUAL
C
      DO 4 NOD = 1,LNODZ
      ELCORD(NOD,4) = VPROP(5,LPOP)
C
C*** WE COLLECT THE NODAL COORDINATES FOR THE ELEMENT ALSO IN THIS ARRAY
      DO 4 ND = 1,NDIM
      NODE = IABS(LNODS(NOD,NEL))
    4 ELCORD(NOD,ND) = COORD(NODE,ND)
!      WRITE(6,602) (LNODS(NOD,NEL),
!     .	 (ELCORD(NOD,J), J = 1,4), NOD = 1,LNODZ)
! 602  FORMAT(/5H NODE,6X,1HX,12X,1HY,12X,1HZ,8X,9HTHICKNESS//
!     .	 (1X,I3,4F13.7))
C
C*** CALL THE SHAPE FUNCTION SUBROUTINE AT THE CURRENT INTEGRATING POINT
C
      IGAUSZ = LVABZ/8
      DO 22 IGAUS = 1,IGAUSZ
      DO 8 IXY = 1,2
    8 XITA(IXY) = XGAUS(IGAUS,IXY+LNODZ-6)
      CALL HALOOF(ELCORD, LNODS, LNODZ, LVABZ, LNOMAX, NEL, NELZ, XITA)
C
C*** CREATE MODULUS MATRIX, ALREADY MULTIPLIED BY ITS INTEGRATING FACTOR
C
      DO 10 N = 1,36
   10 DMOD(N,1) = 0.0
      PLANE = YMOD*THIK*AREA/(1.0-POIS*POIS)
      DMOD(1,1) = PLANE
      DMOD(2,1) = PLANE*POIS
      DMOD(1,2) = PLANE*POIS
      DMOD(2,2) = PLANE
      DMOD(3,3) = PLANE*0.5*(1.0-POIS)
      BEND = PLANE*THIK*THIK/12.0
      DMOD(4,4) = BEND
      DMOD(5,4) = BEND*POIS
      DMOD(4,5) = BEND*POIS
      DMOD(5,5) = BEND
      DMOD(6,6) = BEND*0.5*(1.0-POIS)
C
C*** ACCUMULATE FIRST THE GRAVITY LOADS, THEN THOSE FROM NORMAL PRESSURE
C
      NST = 0
      WEIGHT = AREA*THIK*DENSTY
      DO 20 JVAB = 1,LVABZ
      GASH = ELOAD(JVAB,1)
      DO 12 I = 1,3
   12 GASH = GASH + WEIGHT*FRAM(3,I)*WSHEL(I,JVAB)
      ELOAD(JVAB,1) = GASH + PRESS*AREA*WSHEL(3,JVAB)
C
C*** AND WE NOW GENERATE THE MATRIX B, USING THE DERIVATIVES FROM WSHEL.
C
      B(1,JVAB) = WSHEL(4,JVAB)
      B(2,JVAB) = WSHEL(7,JVAB)
      B(3,JVAB) = WSHEL(5,JVAB) + WSHEL(6,JVAB)
      B(4,JVAB) = WSHEL(10,JVAB)
      B(5,JVAB) = WSHEL(12,JVAB)
      B(6,JVAB) = 2.0*WSHEL(11,JVAB)
C
C*** DB THEN LEADS TO ELSTIF AND STRESM, EXACTLY AS IN SUBROUTINE BEAM.
C
      DO 16 I = 1,6
      GASH = 0.0
      DO 14 K = 1,6
   14 GASH = GASH + DMOD(K,I)*B(K,JVAB)
      DB(I) = GASH
   16 STRESM(JVAB,I) = GASH/AREA
C
C*** ONE STATEMENT INSTEAD OF INNERMOST LOOP CAN SAVE FIFTH OF THE COST.
C
      JDEL = 1
      DO 18 IVAB = 1,JVAB
      ELSTIF(NST+IVAB) = ELSTIF(NST+IVAB) + P*BV(JDEL) + Q*BV(JDEL+1)
     .	 + R*BV(JDEL+2) + S*BV(JDEL+3) + T*BV(JDEL+4) + H*BV(JDEL+5)
   18 JDEL = JDEL + 6
   20 NST = NST + JVAB
   22 WRITE(7) NSTRES, LVABZ, STRESM, POIN, FRAM
      RETURN
      END
C
      SUBROUTINE HALOOF(ELCORD, LNODS, LNODZ, LVABZ, LNOMAX, NEL, NELZ,
     .	 XITA)
C3708
C*** TO CREATE SHAPE FUNCTION ARRAY WSHEL, FOR SEMILOOF SHELL ELEMENT.
C
C*** TENTATIVELY WRITTEN, BY BRUCE IRONS, JULY 1972, IN WASHINGTON D.C.
C
C*** FINALLY CLEARED OF BUGS, OCTOBER 1973, SWANSEA UNIVERSITY, WALES.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION LNODS(LNOMAX,NELZ)
      COMMON/SHEL/AREA, FRAM(3,3), POIN(3), SIDE, THIK,
     .	 WCORN(10,3), WLOOF(10,3), WSHEL(13,45)
      DIMENSION AREAV(3), ELCORD(9,4), FRAME(3,3), GENSID(6,4),
     .	 POINT(3), SHEAR(11,43), SIGT(3), SWOP(6), THIKDD(3,3),
     .	 TRANS(2,2), VLOOF(3,36), XGAUS(4,4), XILOOF(9,4), XITA(2),
     .	 XLOCAL(3), XYZDD(3,3), XYZPRE(8,4)
      EQUIVALENCE (T11,TRANS(1,1)), (T12,TRANS(1,2)),
     .	 (T21,TRANS(2,1)), (T22,TRANS(2,2))
      DATA GENSID/1., -1., 0., 3*-.5, 0., 1., -1., 4*1., 0., -1.,
     1	 4*0., 1., 0., -1., 2*1./,XILOOF/.211324866, 2*.788675134,
     2	 .211324866, 2*0., .3333333333, 4*0., .211324866, 2*.788675134,
     3	 .211324866, .3333333333, 2*0., -.577350269, .577350269, 2*1.,
     4	 .577350269, -.577350269, 2*-1., 0., 2*-1., -.577350269,
     5	 .577350269, 2*1., .577350269, -.577350269, 0. /,
     6	 XGAUS/0., 4*.5, 0., 2*.5, -.577350269, 2*.577350269,
     7	 3*-.577350269, 2*.577350269/, XYZPRE/32*0.0/, NOZPRE/0/
      DO 1 I = 1,585
    1 WSHEL(I,1) = 0.0
C
C*** GENERATE NSTAGE TO DEFINE PATH THROUGH HALOOF.
C
      N   ERROR = 1
      IF((LNODZ.NE.6.AND.LNODZ.NE.8). OR .LVABZ.NE.LNODZ*4) GO TO 99
      NSTAGE = 4
      IF(NFIRST.EQ.0) GO TO 18
      NSTAGE = 2
C
C*** INITIALIZATION FOR NEW ELEMENT, NSTAGE = 1. FIND CENTRE COORDINATES
C
      LIMZ = (3*LNODZ)/2 - 1
      LNODZA = LNODZ + 1
      LVABZA = LVABZ + 1
      LVABZZ = LVABZ + LIMZ
      DO 3 L = LNODZA,LIMZ
      DO 3 J = 1,LVABZZ
    3 SHEAR(L,J) = 0.0
      DO 5 NX = 1,4
      GASH = 0.0
      LNODZH = LNODZ/2
      DO 4  KORN =  1, LNODZH
      DO 4 K = 1,2
    4 GASH = GASH
     .	 + 8.0*ELCORD(2*KORN+K-2,NX)/FLOAT(216*K-408-LNODZ*(21*K-41))
    5 ELCORD(9,NX) = GASH
C
C*** DIAGNOSTICS FOR A NEW ELEMENT. RELATE COORDINATES TO CENTRE.
C
      DO 10 I = 1, LNODZ
      N   ERROR = 2
      IF(ELCORD(I,4).LE.0.0) GO TO 99
      IF(I.EQ.LNODZ) GO TO 9
      JA = I + 1
      DO 8 J = JA, LNODZ
      N   ERROR = 3
      IF(IABS(LNODS(I,NEL)).EQ.IABS(LNODS(J,NEL))) GO TO 99
      DO 7 K = 1,3
      IF(ELCORD(I,K).NE.ELCORD(J,K)) GO TO 8
    7 CONTINUE
      N   ERROR = 4
      GO TO 99
    8 CONTINUE
    9 DO 10 NX = 1,4
      IF(NX.NE.4) ELCORD(I,NX) = ELCORD(I,NX) - ELCORD(9,NX)
   10 XYZPRE(I,NX) = ELCORD(I,NX)
      NFIRST = 0
C     WRITE(6,600) ((ELCORD(I,J), J = 1,4), I = 1, LNODZ)
C600  FORMAT(/11X,1HX,12X,1HY,12X,1HZ,12X,1HT/(4X,4F13.7))
C
C*** CREATE SWOP = 1.0 OR -1.0, TO IMPLEMENT SIGN CHANGES AT LOOF NODES.
C
C*** ALSO INTERPOLATE TO ESTIMATE NORMAL THICKNESSES AT LOOF NODES.
C
      VLOOF(1,LVABZA) = ELCORD(9,4)
      DO 12 NSIDE = 1,6
   12 SWOP(NSIDE) = 1.0
      LAST = LNODZ - 1
      DO 14 NEXT = 1, LNODZ, 2
      MID = LAST + 1
      IF(IABS(LNODS(NEXT,NEL)).LT.IABS(LNODS(LAST,NEL)))
     .	 SWOP(MID/2) = -1.0
      VLOOF(1,4*LAST-3) = .455341801D0*ELCORD(LAST,4)
     .	 + .666666667D0*ELCORD(MID,4)-.122008468D0*ELCORD(NEXT,4)
      VLOOF(1,4*MID-3) = -.122008468D0*ELCORD(LAST,4)
     .	 + .666666667D0*ELCORD(MID,4)+.455341801D0*ELCORD(NEXT,4)
C
C*** ALSO CHECK THAT MIDSIDE NODES ARE REASONABLY CENTRAL.
C
      GASH = 0.0
      GISH = 0.0
      GUSH = 0.0
      DO 13 I = 1,3
      ELMID = ELCORD(MID,I)
      GASH = GASH + (ELCORD(NEXT,I)-ELMID)**2
      GISH = GISH + (ELCORD(LAST,I)-ELMID)**2
   13 GUSH = GUSH + (ELCORD(LAST,I)+ELCORD(NEXT,I)-ELMID-ELMID)**2
      N   ERROR = 5
      IF(ABS(GASH - GISH).GT.0.040*(GASH + GISH)) GO TO 99
      N   ERROR = 6
      IF(GUSH.GT.0.25*(GASH + GISH)) GO TO 99
   14 LAST = NEXT
C     WRITE(6,602) SWOP, (VLOOF(1,I), I = 1, LVABZA, 4)
C602  FORMAT(/7H SWOP =,6F6.3//26H THICKNESSES AT LOOF NODES/1X,9F13.8)
C
C*** ORGANISE LOOP AROUND LOOF NODES, FOR NSTAGE = 2
C
C    DO 76 NSTAGE = 2,4 (IN EFFECT)
   15 NLOOF = 0
   16 NLOOF = NLOOF + 1
C    DO 67 NLOOF = 1, LNODZ+1 IF NSTAGE = 2,
C     OR DO 67 NLOOF = 1, (3*LNODZ)/2 IF NSTAGE = 3.
      DO 17 I = 1,2
      IF(NSTAGE.EQ.2. OR .NLOOF.LE.LNODZ)
     .	 XLOCAL(I) = XILOOF(NLOOF,LNODZ+I-6)
C
C*** AND ALSO AROUND INTEGRATING POINTS IF NSTAGE = 3.
C
      IF(NSTAGE.EQ.3. AND .NLOOF.GT.LNODZ)
     .	 XLOCAL(I) = XGAUS(NLOOF-LNODZ,LNODZ+I-6)
   17 CONTINUE
      GO TO 23
C
C*** OTHERWISE, ORGANISE SINGLE-SHOT OPTION, FOR NSTAGE = 4.
C
C*** TEST WHETHER INPUT POINT IS A LOOF NODE, PLUS OR MINUS 0.0001.
C
   18 DO 19 I = 1,2
   19 XLOCAL(I) = XITA(I)
      NLOOF = LNODZA
      DO 22 MAYBE = 1,LNODZ
      DO 20 I = 1,2
      IF(ABS(XLOCAL(I)-XILOOF(MAYBE,LNODZ+I-6)).GT.0.0001) GO TO 22
   20 CONTINUE
      NLOOF = MAYBE
   22 CONTINUE
C     IF(NLOOF.LE.LNODZ) WRITE(6,604) NLOOF
C604  FORMAT(/36H INPUT POINT RECOGNISED AS LOOF NODE,I3)
C
C*** CREATE VALUES AND XI,ETA DERIVATIVES OF X,Y,Z IN XYZDD, T IN THIKDD
C
   23 CONTINUE
C     WRITE(6,606) NSTAGE, NLOOF, XLOCAL
C606  FORMAT(/13H *** NSTAGE =,I2,10H,	NLOOF =,I3,7H,	XI =,F12.8,
C    .	 8H,  ETA =,F12.8)
      CALL SFR(LNODZ,LTYP,NDIM,NSTAGE,WCORN,XLOCAL)
      K = 0
      DO 27 I = 1,3
      DO 26 J = 1,3
      GASH = 0.0
      DO 24 L = 1,LNODZ
   24 GASH = GASH + WCORN(L+K,I)*ELCORD(L,J)
      XYZDD(J,I) = GASH
      IF(NSTAGE.EQ.2) GO TO 26
      GASH = 0.0
      DO 25 L = 1,LNODZA
   25 GASH = GASH + WLOOF(L+K,I)*VLOOF(J,4*L-1)
      THIKDD(J,I) = GASH
   26 CONTINUE
   27 K = 1
C     WRITE(6,608) XYZDD
C608  FORMAT(/6H XYZDD/(1X,3F15.10))
C     IF(NSTAGE.EQ.3) WRITE(6,610) THIKDD
C610  FORMAT(/7H THIKDD/(1X,3F15.10))
C
C*** CREATE VECTOR AREA = VAREA, AT GIVEN POINT XI, ETA.
C
      CALL VECTOR(XYZDD(1,2), XYZDD(1,3), AREAV(1))
      CALL SCALAR(AREAV(1), AREAV(1), AREASQ)
      N   ERROR = 7
      IF(AREASQ.EQ.0.0) GO TO 99
      AREA = SQRT(AREASQ)
C     WRITE(6,612) AREA, AREAV
C612  FORMAT(/7H AREA =,F13.10,10X,13HAREA VECTOR =,3F13.10)
C
C*** NORMALISE VECTOR AREA INTO FRAME, COL.3, AS LOCAL UNIT NORMAL Z.
C
C*** COLUMN 2 OF FRAME BECOMES UNIT Y AROUND EDGE.
C
      DO 30 I = 1,3
      FRAME(I,3) = AREAV(I)/AREA
      GASH = 0.0
      DO 29 J = 1,2
   29 GASH = GASH + GENSID((NLOOF+1)/2,LNODZ+J-6)*XYZDD(I,J+1)
   30 FRAME(I,2) = GASH
C
C*** NORMALISE Y, AND IMPLEMENT SWOP BY REVERSING SIGN OF Y.
C
C*** PUT APPROXIMATE VECTOR THICKNESS ETC. INTO VLOOF, FOR NSTAGE = 2
C
      N   ERROR = 8
      CALL SCALAR(FRAME(1,2), FRAME(1,2), SIDESQ)
      IF(SIDESQ.EQ.0.0) GO TO 99
      SIDE = SQRT(SIDESQ)
      DO 31 I = 1,3
      FRAME(I,2) = FRAME(I,2)*SWOP((NLOOF+1)/2)/SIDE
      IF(NSTAGE.NE.2) GO TO 31
      VLOOF(I,4*NLOOF-2) = FRAME(I,2)
      VLOOF(I,4*NLOOF-1) = FRAME(I,3)*VLOOF(1,4*NLOOF-3)
      VLOOF(I,4*NLOOF) = FRAME(I,3)
   31 CONTINUE
C
C*** AND COLUMN 1 IS UNIT X, THE OUTWARD POINTING IN-PLANE NORMAL.
C
      CALL VECTOR(FRAME(1,2), FRAME(1,3), FRAME(1,1))
C     WRITE(6,614) ((FRAME(J,I), I = 1,3), J = 1,3)
C614  FORMAT(/44H COLS OF FRAME ARE UNIT LOCAL CARTESIAN AXES//
C    .	 (1X,3F13.10))
C
C*** CHECK THAT NORMALS ARE REASONABLY PARALLEL, WHILE NSTAGE = 2.
C
      IF(NSTAGE.GT.2) GO TO 35
      IF(NLOOF.EQ.1) GO TO 67
      KZ = 4*NLOOF-4
      DO 32 K = 4, KZ, 4
      CALL VECTOR(VLOOF(1,4*NLOOF), VLOOF(1,K), POINT(1))
      CALL SCALAR(POINT(1), POINT(1), COSSQ)
      N   ERROR = 9
      IF(COSSQ.GT.0.75) GO TO 99
   32 CONTINUE
C
C*** PLACE CONTRIBUTION OF CENTRAL NODE IN VLOOF (NSTAGE = 2 ONLY)
C
C*** COMPLETE LOOP NLOOF = 1 TO LNODZ+1 FOR NSTAGE = 2.
C
      IF(NLOOF.LE.LNODZ) GO TO 67
      THIKC = VLOOF(1,LVABZA)
      DO 33 I = 1,3
      DO 33 J = 1,2
   33 VLOOF(I,LVABZ+J) = FRAME(I,J)*THIKC
      GO TO 67
C
C*** CREATE THE 2X2 JACOBIAN MATRIX, AND INVERT IT. (NSTAGE = 3 OR 4)
C
   35 DO 36 J = 1,2
      DO 36 I = 1,2
      CALL SCALAR(FRAME(1,I), XYZDD(1,J+1), TRANS(J,I))
   36 CONTINUE
C     WRITE(6,616) TRANS
C616  FORMAT(/6H TRANS/(1X,2F13.10))
      GASH = T11
      T11 = T22/AREA
      T22 = GASH/AREA
      T12 = -T12/AREA
      T21 = -T21/AREA
C     WRITE(6,616) TRANS
C
C*** TRANSFORM WCORN AND WLOOF INTO LOCAL X,Y DERIVATIVES.
C
      DO 41 N = 1,LNODZA
      DO 41 I = 1,2
      GASH = 0.0
      GISH = 0.0
      DO 40 J = 1,2
      GASH = GASH + TRANS(I,J)*WCORN(N+11,J)
   40 GISH = GISH + TRANS(I,J)*WLOOF(N+11,J)
      WCORN(N,I+1) = GASH
   41 WLOOF(N,I+1) = GISH
C     WRITE(6,618)
C618  FORMAT(/16H WCORN AND WLOOF/)
C     DO 42 I = 1,3
C  42 WRITE(6,620) (WCORN(N,I), N = 1,LNODZA)
C620  FORMAT(1X,9F13.10)
C     DO 43 I = 1,3
C  43 WRITE(6,620) (WLOOF(N,I), N = 1,LNODZA)
C
C*** PUT THICKNESS AND DERIVATIVES INTO LOCAL COORDINATE SYSTEM.
C
      DO 45 I = 1,3
      DO 44 J = 1,2
      POINT(J) = 0.0
      DO 44 K = 1,2
   44 POINT(J) = POINT(J) + TRANS(J,K)*THIKDD(I,K+1)
      DO 45 J = 1,2
   45 THIKDD(I,J+1) = POINT(J)
      DO 48 J = 1,3
      DO 47 I = 1,3
      CALL SCALAR(THIKDD(1,J), FRAME(1,I), POINT(I))
   47 CONTINUE
      DO 48 I = 1,3
   48 THIKDD(I,J) = POINT(I)
C     WRITE(6,622) THIKDD
C622  FORMAT(/17H THICKNESS VECTOR,3F12.7//17H X-DERIVATIVES   ,3F12.7//
C    .	 17H Y-DERIVATIVES   ,3F12.7)
      THIK = THIKDD(3,1)
      N   ERROR = 10
      IF(THIK.LE.0.0) GO TO 99
C
C*** FIND THE CHANGE IN LOCAL X,Y DERIVATIVES ACROSS THICKNESS OF SHELL.
C
      DO 57 LNOD = 1,LNODZA
      IF(NSTAGE.NE.4) GO TO 51
      DO 50 I = 2,3
      GASH = 0.0
      DO 49 J = 1,2
   49 GASH = GASH - THIKDD(J,I)*WCORN(LNOD,J+1)
   50 POINT(I) = GASH
C
C*** CREATE WSHEL = SHAPE FUNCTION ARRAY, DISPLACEMENT TERMS FIRST.
C
   51 KORN = (LNOD+1)/2
      DO 54 K = 1,3
      KOL = 2*KORN + 3*LNOD + K - 5
      IF(LNOD.GT.LNODZ) KOL = 5*LNODZ + 2 + K
      DO 53 N = 1,3
      FACT = FRAME(K,N)
      WSHEL(N,KOL) = WCORN(LNOD,1)*FACT
      IF(NSTAGE.EQ.4. AND .N.EQ.3) FACT = 0.0
      DO 53 ND = 2,3
   53 WSHEL(N+N+ND,KOL) = WCORN(LNOD,ND)*FACT
      DO 54 N = 1,2
      DO 54 ND = 2,3
      WSHEL(N+7,KOL) = WSHEL(N+7,KOL)
     .	-THIKDD(ND-1,1)*WSHEL(N+N+ND,KOL)/THIK
      IF(NSTAGE.EQ.4) WSHEL(N+N+ND+6,KOL) = (POINT(ND)*FRAME(K,N)
     .	 + THIKDD(3,ND)*WCORN(LNOD,N+1)*FRAME(K,3))/THIK
   54 CONTINUE
C
C*** INTRODUCE ROTATION TERMS WITH BENDING ACTION INTO WSHEL.
C
      DO 57 L = 1,2
      KOL = (L-1)*4*LNODZ + (2-L)*6*KORN + LNOD
      IF(LNOD.GT.LNODZ) KOL = 5*LNODZ + 3 - L
      DO 56 N = 1,2
      CALL SCALAR(VLOOF(1,4*LNOD+L-4), FRAME(1,N), FACT)
      WSHEL(N+7,KOL) = FACT*WLOOF(LNOD,1)/THIK
      IF(NSTAGE.NE.4) GO TO 56
      DO 55 ND = 2,3
   55 WSHEL(N+N+ND+6,KOL) = FACT*WLOOF(LNOD,ND)/THIK
   56 CONTINUE
   57 CONTINUE
C
C*** COMBINE LAST THREE COLUMNS OF WSHEL TO CREATE NORMAL DEFLECTION.
C
      IF(LNODZ.EQ.6) GO TO 61
      IZ = 3*NSTAGE + 1
      DO 60 I = 1,IZ
      GASH = 0.0
      DO 59 K = 1,3
   59 GASH = GASH + WSHEL(I,42+K)*VLOOF(K,4*LNODZ+4)
   60 WSHEL(I,43) = GASH
C     WRITE(6,624) (N, (WSHEL(K,N), K = 1,13), N = 1, LVABZZ)
C624  FORMAT(/15H WSHEL ORIGINAL/9X,1HU,8X,1HV,8X,1HW,8X,2HUX,7X,2HUY,
C    .	 7X,2HVX,7X,2HVY,7X,2HUZ,7X,2HVZ,6X,3HUXZ,6X,3HUYZ,6X,3HVXZ,6X,
C    .	 3HVYZ/68X,18HOR UZ+WX	OR VZ+WY/(I4,13F9.5))
   61 IF(NSTAGE.EQ.4) GO TO 86
C
C*** CREATE ARRAY SHEAR, FOR INTRODUCING THE CONSTRAINTS (NSTAGE = 3)
C
      IF(NLOOF.GT.LNODZ) GO TO 63
      DO 62 I = 1,LVABZZ
      SHEAR(NLOOF,I) = WSHEL(9,I)
      SHEAR(11,I) = SHEAR(11,I) + WSHEL(8,I)*SIDE*THIK*SWOP((NLOOF+1)/2)
   62 CONTINUE
      GO TO 67
   63 DO 66 KOL = 1,LVABZZ
      DO 66 NXY = 1,2
      GASH = SHEAR(LNODZ+NXY,KOL)
      DO 65 MXY = 1,2
      CALL SCALAR(FRAME(1,MXY), VLOOF(1,4*LNODZ+NXY), FACT)
   65 GASH = GASH + WSHEL(MXY+7,KOL)*AREA*THIK*FACT
   66 SHEAR(LNODZ+NXY,KOL) = GASH
C
C*** COMPLETE LOOP AROUND LOOF NODES ETC. TO CREATE VLOOF OR SHEAR.
C
   67 IF(NLOOF.LE.LNODZ. OR .
     .	 (NSTAGE.EQ.3. AND .NLOOF.LT.(3*LNODZ)/2)) GO TO 16
      IF(NSTAGE.NE.2) GO TO 76
C
C*** CREATE PLUS-MINUS SUM OF THICKNESS VECTORS AT LOOF NODES (NSTAGE=2)
C
      DO 70 I = 1,3
      GASH = 0.0
      DO 68 N = 3, LVABZ, 4
   68 GASH = -GASH + VLOOF(I,N)
      SIGT(I) = GASH
C
C*** AND THE 3X3 MATRIX ASSOCIATED WITH IT, STORED IN XYZDD.
C
      DO 70 J = 1,3
      GASH = 0.0
      IF(I.EQ.J) GASH = FLOAT(LNODZ)
      DO 69 N = 2, LVABZ, 4
   69 GASH = GASH - VLOOF(I,N)*VLOOF(J,N)
   70 XYZDD(I,J) = GASH
C     WRITE(6,626) SIGT, XYZDD
C626  FORMAT(/24H PLUS-MINUS ERROR VECTOR,3F12.8//
C    .	 25H MATRIX FOR CORRECTING IT,3F12.8,2(/25X,3F12.8))
C
C*** GET THE ADJUGATE OF THIS 3X3 SYMMETRIC POSITIVE DEFINITE MATRIX.
C
      K = 3
      DO 71 I = 1,3
      CALL VECTOR(XYZDD(1,I), XYZDD(1,6-I-K), FRAME(1,K))
   71 K = I
      CALL SCALAR(XYZDD(1,1), FRAME(1,1), DETERM)
      DO 73 I = 1,3
      CALL SCALAR(FRAME(1,I), SIGT(1), PROD)
   73 POINT(I) = PROD/DETERM
C     WRITE(6,628) FRAME, POINT
C628  FORMAT(/9H ADJUGATE,3(/1X,3F12.8)//10H SOLUTIONS,3F12.8)
C
C*** CORRECT VECTOR THICKNESSES IN VLOOF.
C
      FACT = 1.0
      DO 75 N = 2,LVABZ,4
      FACT = -FACT
      CALL SCALAR(POINT(1), VLOOF(1,N), PROD)
      DO 74 I = 1,3
   74 VLOOF(I,N+1) = VLOOF(I,N+1)-FACT*(POINT(I)-PROD*VLOOF(I,N))
C
C*** CREATE DIFFERENTIAL DISPLACEMENT VECTORS TO DEFINE ROTATIONS.
C
C*** THIS COMPLETES WORK FOR NSTAGE = 2.
C
      TFIRST = VLOOF(1,N-1)
      CALL VECTOR(VLOOF(1,N), VLOOF(1,N+1), VLOOF(1,N-1))
      DO 75 I = 1,3
   75 VLOOF(I,N) = VLOOF(I,N)*TFIRST
C     NZ = 4*LNODZA
C     WRITE(6,630) (N, (VLOOF(I,N), I = 1,3), N = 1,NZ)
C630  FORMAT(/6H VLOOF/(1X,I3,6X,3F15.10))
      NSTAGE = 3
      GO TO 15
   76 CONTINUE
C     WRITE(6,632)
C632  FORMAT(/6H SHEAR)
C     DO 77 N = 1,LVABZZ
C  77 WRITE(6,634) N, (SHEAR(I,N), I = 1,LIMZ)
C634  FORMAT(I4,11F10.6)
C
C*** SHEAR HAS BEEN CREATED IN NLOOF LOOP FOR NSTAGE = 3.
C
C*** CHOOSE PIVOT FOR REDUCING ARRAY SHEAR, AND DO ROW INTERCHANGE.
C
      DO 83 LIM = 1,LIMZ
      KP = LVABZ + LIM
      PIVOT = 0.0
      DO 79 L = LIM,LIMZ
      IF(ABS(PIVOT).GT.ABS(SHEAR(L,KP))) GO TO 79
      LBIG = L
      PIVOT = SHEAR(LBIG,KP)
   79 CONTINUE
      DO 80 K = 1,LVABZZ
      CHANGE = SHEAR(LBIG,K)
      SHEAR(LBIG,K) = SHEAR(LIM,K)
   80 SHEAR(LIM,K) = CHANGE/PIVOT
C
C*** REDUCE ARRAY SHEAR TO CREATE CONSTRAINT MATRIX,
C
C*** THIS COMPLETES WORK FOR NSTAGE = 3.
C
      DO 82 NROW = 1,LIMZ
      FACT = SHEAR(NROW,KP)
      IF(NROW.EQ.LIM. OR .FACT.EQ.0.0) GO TO 82
      DO 81 KOL = 1,LVABZZ
   81 SHEAR(NROW,KOL) = SHEAR(NROW,KOL)-FACT*SHEAR(LIM,KOL)
   82 CONTINUE
   83 CONTINUE
C     WRITE(6,636)
C636  FORMAT(/22H SHEAR AFTER REDUCTION)
C     DO 85 N = 1,LVABZZ
C  85 WRITE(6,634) N, (SHEAR(I,N), I = 1,LIMZ)
      NSTAGE = 4
      GO TO 18
C
C*** USE ARRAY SHEAR TO CONSTRAIN WSHEL AT THE GIVEN POINT XI,ETA.
C
   86 DO 88 I = 1,LVABZ
      DO 88 J = 1,13
      GASH = WSHEL(J,I)
      DO 87 K = 1,LIMZ
   87 GASH = GASH - WSHEL(J,K+LVABZ)*SHEAR(K,I)
   88 WSHEL(J,I) = GASH
C     WRITE(6,638)
C638  FORMAT(/18H WSHEL CONSTRAINED)
C     DO 89 N = 1,LVABZ
C  89 WRITE(6,640) N, (WSHEL(J,N), J = 1,13)
C640  FORMAT(I4,13F9.5)
C
C*** IMPLEMENT SWOP TO EXCHANGE TWO NORMAL SLOPES.
C
      DO 92 N = 8, LVABZ, 8
      IF(SWOP(N/8).EQ.1.0) GO TO 92
      DO 91 J = 1,13
      CHANGE = WSHEL(J,N)
      WSHEL(J,N) = WSHEL(J,N-1)
   91 WSHEL(J,N-1) = CHANGE
   92 CONTINUE
C     WRITE(6,642)
C642  FORMAT(/14H WSHEL SWOPPED)
C     DO 94 N = 1,LVABZ
C  94 WRITE(6,640) N, (WSHEL(J,N), J = 1,13)
C
C*** ASSEMBLE UXZ, UYZ, VXZ, VYZ TO CREATE WXX, WXY, WYY.
C
C     WRITE(6,644)
C644  FORMAT(/30H WSHEL WITH SECOND DERIVATIVES)
      DO 96 N = 1,LVABZ
      WSHEL(10,N) = -WSHEL(10,N)
      WSHEL(11,N) = -0.5*(WSHEL(11,N)+WSHEL(12,N))
      WSHEL(12,N) = -WSHEL(13,N)
C     WRITE(6,640) N, (WSHEL(J,N), J = 1,12)
   96 CONTINUE
C
C*** PUT POIN, FRAM IN COMMON, ALSO AREA, SIDE, WITH INTEGRATING FACTORS
C
      AREA = AREA*(FLOAT(LNODZ)-5.6)/2.4
      SIDE = SIDE*FLOAT(LNODZ-4)/4.0
      DO 98 I = 1,3
      POIN(I) = XYZDD(I,1) + ELCORD(9,I)
      DO 98 J = 1,3
   98 FRAM(I,J) = FRAME(I,J)
      RETURN
C
C*** WRITE DIAGNOSTIC ERROR MESSAGE.
C
   99 WRITE(6,699) NERROR
 699  FORMAT(/6H ERROR,I5,18H IN SEGMENT HALOOF)
      STOP
      END
C****************************************************************************
      SUBROUTINE ISOP(CJAC,CJACI,DETJ,ELXYZ,LNODZ,LNODZZ,LTYP,
     .	NDIM,NEL,NSTAGE,POINT,TEMP,W,WDIF,XITA)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
C*** FINDS ISOPARAMETRIC SHAPE FUNCTIONS AND THEIR X-Y-Z DERIVATIVES
C*** AT GIVEN XI-ETA POINT FOR 4-NODE QUAD AND 8-NODE BRICK
C*** WRITTEN BY MATTI J., NOV 1980
C
      DIMENSION ELXYZ(NDIM,LNODZ),POINT(NDIM),
     . TEMP(LNODZZ),W(LNODZZ),WDIF(NDIM,LNODZZ),CJAC(NDIM,NDIM),
     . CJACI(NDIM,NDIM),XITA(NDIM)
      DIMENSION BPOINT(8,3)
      DATA BPOINT
     ./-1.0D0,1.0D0,1.0D1,-1.0D0,-1.0D0,1.0D0,1.0D0,-1.0D0,
     . -1.0D0,-1.0D0,1.0D0,1.0D0,-1.0D0,-1.0D0,1.0D0,1.0D0,
     . -1.0D0,-1.0D0,-1.0D0,-1.0D0,1.0D0,1.0D0,1.0D0,1.0D0/
C
C*** SOME EARLY DIAGNOSTICS
C

      IF(LTYP.EQ.4 .AND. NDIM.NE.2) GOTO 999
      IF(LTYP.EQ.5 .AND. NDIM.NE.3) GOTO 999
      IF(LTYP.EQ.4 .AND. LNODZ.NE.4) GOTO 999
      IF(LTYP.EQ.5 .AND. LNODZ.NE.8) GOTO 999
      IF(LTYP.EQ.6 .AND. NDIM.NE.2) GOTO 999
      IF(LTYP.EQ.6 .AND. LNODZ.NE.4) GOTO 999
      DO 2 I=1,NDIM
      IF(ABS(XITA(I)).GT.1.0000000D0) GOTO 999
    2 CONTINUE
C
C***  THE VALUES OF SHAPE FUNC AND XI ETA DERIVATIVES
C
      XLNO = FLOAT(LNODZ)
      DO 4I=1,LNODZ
      XII  = BPOINT(I,1)
      ETAI = BPOINT(I,2)
      ZETAI= BPOINT(I,3)
      IF(NDIM.EQ.2) ZETAI = 0.00D0
      W(I)=(1.0D0+XII*XITA(1))*(1.0D0+ETAI*XITA(2))*
     .	   (1.0D0+ZETAI*XITA(3))/XLNO
      WDIF(1,I+1) = XII*(1.0D0+ETAI*XITA(2))*
     .		    (1.0D0+ZETAI*XITA(3))/XLNO
      WDIF(2,I+1) = ETAI*(1.0D0+XII*XITA(1))*(1.0D0+ZETAI*XITA(2))/XLNO
      IF(NDIM .EQ. 2) GOTO 4
      WDIF(3,I+1) = ZETAI*(1.0D0+XII*XITA(1))*(1.0D0+ETAI*XITA(2))/XLNO
    4 CONTINUE
C
      DO 10 I=1,NDIM
       GASH = 0.0D0
       TEMP(LNODZZ) = 0.0D0
       DO 6 NOD=1,LNODZ
	GASH=GASH+W(NOD)*ELXYZ(I,NOD)
    6	POINT(I) = GASH
C
C***  COMPUTE AND INVERT THE JACOBIAN, CJAC, CJACI
C
       DO 10 J = 1,NDIM
       GASH = 0.0D0
       DO 8 K = 1,LNODZ
    8	GASH = GASH+WDIF(I,K+1)*ELXYZ(J,K)
   10 CJAC(I,J) = GASH
C      WRITE(6,604)  TEMP(LNODZZ), (POINT(I), I=1,NDIM)
C 604 FORMAT(//' TEMPERATURE= ',F10.5,' POINT= ',3F10.5)
C
      NDIMSQ = NDIM*NDIM
      CALL MATINV(CJAC,CJACI,NDIM,DETJ)
      IF(DETJ .LE. 0.0D0) GOTO 999
C
      IF(NSTAGE .EQ. 2) RETURN
C
C*** TRANSFORM WDIF INTO GLOBAL DIRECTIONS
C
      DO 24 N=2,LNODZZ
      DO 24 I=1,NDIM
      GASH=0.0D0
      DO 22 J=1,NDIM
   22 GASH=GASH+WDIF(J,N)*CJACI(I,J)
   24 WDIF(I,N-1) = GASH
C
      RETURN
C
C*** WRITE DIAGNOSTICS IF NECESSARY
C
  999 WRITE(6,608) NEL,LTYP,NDIM,(XITA(I), I=1,NDIM)
  608 FORMAT('   ELEM NO =',I5,' LTYP =',I2,' NDIM =',I2,
     .	' XI ETA ZETA =',3F12.6)
      STOP 222
      END

      SUBROUTINE SLBEAM(ELCORD, ELOAD, ELSTIF, IPROP, JPROP, LCOEF,
     .	    LNODS, LNODZ, LNOMAX, LPOP, LVABZ, LVMAX, MAXTRS, NDIM, NEL,
     .	 NELZ, NEWRHS, NFIRST, NODMAX, NROWST, NSTRES, STRESM, VPROP)

C4246
C*** SEMILOOF BEAM STIFFNESS ETC. WITH REDUCTION FROM 21 TO 17 VARIABLES
C
C*** RE-WRITTEN BY BRUCE IRONS AND SOHRAB AHMAD, IN CALGARY, SPRING 1978
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION ELCORD(9,4), ELOAD(LVMAX,NEWRHS), ELSTIF(LCOEF),
     .	 LNODS(LNOMAX,NELZ), STRESM(NROWST,MAXTRS), VPROP(IPROP,JPROP)
      COMMON/BEAMS/SIDE, WBEAM(12,27), WCORN(3,2), WLOOF(4,2)
      DIMENSION B(6,21), CGAUS(5), DB(6), DMOD(6,6), EXLOAD(21),
     .	 EXSTIF(231), FRALOF(3,6), POIN(3,2), POINT(3), ROW(32),
     .	 STREM(6,42), XGAUS(5)
      DATA CGAUS/1.0, 1.0, .555555556, .555555556, .888888889/,
     .	 XGAUS/-.577350269, .577350269, -.7745966692, .7745966692, 0.0/
C
C*** THE SECTION PROPERTIES ARE ASSUMED TO REMAIN CONSTANT OVER THE BEAM
C
      YMOD = VPROP(1,LPOP)
      SHEMOD = VPROP(2,LPOP)
      AREA = VPROP(3,LPOP)
      ZZMOM = VPROP(4,LPOP)
      YYMOM = VPROP(5,LPOP)
      POLMOM = VPROP(6,LPOP)
      DENSTY = VPROP(7,LPOP)
!      WRITE(6,600) YMOD, SHEMOD, AREA, ZZMOM, YYMOM, POLMOM, DENSTY
! 600  FORMAT(/17H YOUNGS MODULUS =,F13.6,7X,15HSHEAR MODULUS =,F13.6,7X,
!     .	 23HAREA OF CROSS SECTION =,F10.8//21H 2ND MOM. OF AREA, XY,
!     .	 10H BENDING =,F10.8,7X,19HDITTO, XZ BENDING =,F10.8,7X,
!     .	 18HTORSION CONSTANT =,F10.8//10H DENSITY =,F10.8,
!     .	 16H PER UNIT VOLUME)
C
C*** EXTRACT THE ELEMENT COORDINATES AND INITIALISE THE GENERATED ARRAYS
C
      DO 6 I = 1,21
    6 EXLOAD(I) = 0.0
      DO 8 I = 1,231
    8 EXSTIF(I) = 0.0
      DO 10 I = 1,36
   10 DMOD(I,1) = 0.0
C
C*** ENTER THE TWO INTEGRATING LOOPS
C
      DO 22 IGAUS = 1,5
      XI = XGAUS(IGAUS)
      CALL LOFBEM(ELCORD, FRALOF, LNODS, LNODZ, LNOMAX, LVABZ, NEL,
     .	 NELZ, NFIRST, POINT, XI)
C
C*** THE MODULUS MATRIX IS DIAGONAL
C
      TENS = YMOD*SIDE*CGAUS(IGAUS)
      SHE = SHEMOD*SIDE*CGAUS(IGAUS)
      DMOD(1,1) = TENS*AREA
      DMOD(2,2) = SHE*AREA
      DMOD(3,3) = SHE*AREA
      DMOD(4,4) = TENS*ZZMOM
      DMOD(5,5) = TENS*YYMOM
      DMOD(6,6) = SHE*POLMOM
C
C*** FIRST WE INTRODUCE THE GRAVITY LOADS, THE COMPONENTS DUE TO WEIGHT.
C
      NV = 1
      DO 18 IVAB = 1,21
      IF(IGAUS.LE.2)
     .	 EXLOAD(IVAB) = EXLOAD(IVAB) + SIDE*AREA*DENSTY*WBEAM(3,IVAB)
      B(1,IVAB) = WBEAM(4,IVAB)
C
C*** IN MATRIX B THE SHEARING TERMS MUST BE RELATIVE TO THE SHEAR CENTRE
C
      B(2,IVAB) = WBEAM(11,IVAB)
      B(3,IVAB) = WBEAM(12,IVAB)
C
C*** AND THE TENSILE CONTRIBUTION IS THAT OF THE FIBRE AT THE CENTROID.
C
      B(4,IVAB) = WBEAM(8,IVAB)
      B(5,IVAB) = WBEAM(9,IVAB)
      B(6,IVAB) = WBEAM(10,IVAB)
C
C*** DB IS CURRENT WORKING COLUMN OF MATRIX D TIMES B
C
      DO 14 I = 1,6
      DB(I) = DMOD(I,I)*B(I,IVAB)
C
C*** ALSO WITH IGAUS = 1 OR 2, WE CREATE THE STRESS MATRIX, IN TWO PARTS
C
      IF(IGAUS.LE.2) STREM(I,IVAB+(IGAUS-1)*21) = DB(I)/SIDE
   14 CONTINUE
C
C*** USE DB TO MAKE ITS CONTRIBUTION TO THE STIFFNESS, AN UPPER TRIANGLE
C
      DO 18 JVAB = 1,IVAB
      GASH = EXSTIF(NV)
C
C*** IGAUS = 1,2 USES TENSILE AND SHEAR - 3,4,5 USES BENDING AND TORSION
C
      JA = 1 + IGAUS/3*3
      JZ = JA + 2
      DO 16 J = JA,JZ
   16 GASH = GASH + B(J,JVAB)*DB(J)
      EXSTIF(NV) = GASH
   18 NV = NV + 1
C
C*** KEEP SOME GEOMETRIC INFORMATION, TO PRINT LATER, WITH THE STRESSES.
C
      IF(IGAUS.GT.2) GO TO 22
      DO 20 I = 1,3
   20 POIN(I,IGAUS) = POINT(I)
   22 CONTINUE
C
C*** REDUCE OUT THE FOUR UNWANTED ROTATION VARIABLES, AT THE LOOF NODES.
C
      NVAB = 21
      DO 28 KOUNT = 1,4
      NVAB = NVAB - 1
      IREDUC = (KOUNT + 15)/2
      PIVOT = EXSTIF(NFUNC(IREDUC,IREDUC))
      RHS = EXLOAD(IREDUC)
C
C*** KEEP, AMONGST OTHER THINGS, THE COLUMNS OF STRESM TO BE ELIMINATED,
C
      DO 24 IG = 1,2
      DO 24 I = 1,6
   24 ROW(6*IG+I+14) = STREM(I,IREDUC+(IG-1)*21)
C
C*** WE FILL UP THE SPACE OF THE EQUATION BY SHIFTING ALL ITS SUCCESSORS
C
      DO 28 IZ = 1,NVAB
      IA = IZ
      IF(IZ.GE.IREDUC) IA = IZ + 1
      N = NFUNC(IA,IREDUC)
      IF(IA.GT.IREDUC) N = NFUNC(IREDUC,IA)
      ROW(IZ) = EXSTIF(N)
      FACT = ROW(IZ)/PIVOT
C
C*** SUBTRACT FACT TIMES EQUATION IREDUC FROM EQ. IA, AND PUT IT IN IZ.
C
      DO 26 JZ = 1,IZ
      JA = JZ
      IF(JZ.GE.IREDUC) JA = JZ + 1
   26 EXSTIF(NFUNC(JZ,IZ)) = EXSTIF(NFUNC(JA,IA)) - FACT*ROW(JZ)
C
C*** WE ADJUST THE RIGHT HAND SIDE OF THE EQUATIONS, TO SPREAD THE LOAD.
C
      EXLOAD(IZ) = EXLOAD(IA) - FACT*RHS
C
C*** FINALLY WE MUST CORRECT THE STRESS MATRICES TO REPLACE WHAT IS LOST
C
      DO 28 IG = 1,2
      DO 28 I = 1,6
   28 STREM(I,IZ+(IG-1)*21)
     .	 = STREM(I,IA+(IG-1)*21) - FACT*ROW(6*IG+I+14)
C
C*** SUBDIVIDE STREM INTO TWO STRESS MATRICES OF THE STANDARD DIMENSIONS
C
      NSTRES = 6
      DO 34 IG = 1,2
C
C*** AND DEPOSIT ALL THE MATERIAL FOR STRESSING ONTO TAPE, FOR LATER USE
C
      DO 32 I = 1,17
      DO 32 J = 1,6
   32 STRESM(I,J) = STREM(J,I+(IG-1)*21)
   34 WRITE(7) NSTRES, LVABZ, STRESM, (POIN(I,IG), I = 1,3),
     .	 (FRALOF(I,3*IG-2), I = 1,9)
C
C*** NOW TRANSFER THE STIFFNESSES AND LOADS TO THEIR ASSIGNED LOCATIONS.
C
      DO 36 I = 1,153
   36 ELSTIF(I) = EXSTIF(I)
      DO 38 I = 1,17
   38 ELOAD(I,1) = EXLOAD(I)
      RETURN
      END
C
C
      SUBROUTINE LOFBEM(ELCORD, FRALOF, LNODS, LNODZ, LNOMAX, LVABZ,
     .		       NEL, NELZ, NFIRST, POINT, XI)
C4427
C*** TO CREATE WBEAM, THE SHAPE FUNCTIONS FOR THE SEMILOOF BEAM ELEMENT.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION LNODS(LNOMAX,NELZ)
      COMMON/BEAMS/SIDE, WBEAM(12,27), WCORN(3,2), WLOOF(4,2)
      DIMENSION ELCORD(9,4), FRAME(3,3), FRALOF(3,6), POINT(3),
     .	 VANPOT(3), XILOOF(2)
      DATA XILOOF/-.577350269, .577350269/, VANPOT/3*0.0/
      DO 1 I = 1,324
    1 WBEAM(I,1) = 0.0
C
C*** IS THIS THE FIRST VISIT FOR THIS ELEMENT
C
      NERROR = 1
      IF(LNODZ.NE.5. OR .LVABZ.NE.17) GO TO 99
    2 NLOOF = -10
      IF(NFIRST.EQ.1) NLOOF = 0
      NFIRST = 0
      XLOCAL = XI
      IF(NLOOF.LT.0) GO TO 10
C
C*** CHECK THAT MIDSIDE IS NEARLY CENTRAL AND CURVATURE IS NOT EXCESSIVE
C
      GASH = 0.0
      GISH = 0.0
      GUSH = 0.0
      DO 6 I = 1,3
      GASH = GASH + (ELCORD(3,I)-ELCORD(2,I))**2
      GISH = GISH + (ELCORD(1,I)-ELCORD(2,I))**2
    6 GUSH = GUSH + (ELCORD(1,I)-2.0*ELCORD(2,I)+ELCORD(3,I))**2
      NERROR = 2
      IF(ABS(GASH - GISH).GT.0.040*(GASH + GISH)) GO TO 99
      NERROR = 3
      IF(GUSH.GT.0.25*(GASH + GISH)) GO TO 99
C
C*** DEFINE THE INTEGRATING POINT, AND ALSO THE TANGENT ALONG THE ARC.
C
    8 NLOOF = NLOOF + 1
      XLOCAL = XILOOF(NLOOF)
   10 CALL SFRBEM(XLOCAL)
      DO 12 J = 1,3
      CALL SCALAR(ELCORD(1,J), WCORN(1,1), POINT(J))
   12 CALL SCALAR(ELCORD(1,J), WCORN(1,2), FRAME(J,1))
C
C*** USE VANISHING POINT IF APPROPRIATE TO DEFINE THE LOCAL AXIS SYSTEM.
C
      CALL SCALAR(FRAME(1,1), FRAME(1,1), SQ)
      SIDE = SQRT(SQ)
      CALL SCALAR(VANPOT(1), VANPOT(1), SQ)
      IF(SQ.EQ.0.0) GO TO 18
      DO 16 I = 1,3
   16 FRAME(I,2) = POINT(I) - VANPOT(I)
      GO TO 26
C
C*** IF THIS FAILS THEN ERECT AN AXIS NORMAL TO THE PLANE OF THE ELEMENT
C
   18 DO 20 I = 1,3
   20 FRAME(I,2) = ELCORD(1,I) - 2.0*ELCORD(2,I) + ELCORD(3,I)
      GO TO 26
C
C*** OR ELSE, FIND AXIS ALONG WHICH THE TANGENT HAS SMALLEST COMPONENT.
C
   22 SMALL = 1.0E20
      DO 24 I = 1,3
      FRAME(I,2) = 0.0
      IF(ABS(FRAME(I,1)).GT.SMALL) GO TO 24
      SMALL = ABS(FRAME(I,1))
      LITL = I
   24 CONTINUE
      FRAME(LITL,2) = SIDE
      GO TO 28
C
C*** NOW SEE IF IT REALLY WORKS OUT NUMERICALLY, ALLOWING FOR ROUNDOFF.
C
   26 CALL SCALAR(FRAME(1,2), FRAME(1,2), SQ)
      IF(SQ.LT.SIDE*SIDE*1.0E-16) GO TO 22
   28 CALL VECTOR(FRAME(1,1), FRAME(1,2), FRAME(1,3))
      CALL VECTOR(FRAME(1,3), FRAME(1,1), FRAME(1,2))
C
C*** NORMALISE THE LOCAL AXES AND STORE THEM IN FRALOF FOR A NEW ELEMENT
C
      DO 30 K = 1,3
      CALL SCALAR(FRAME(1,K), FRAME(1,K), SQ)
      SQ = SQRT(SQ)
      DO 30 I = 1,3
      FRAME(I,K) = FRAME(I,K)/SQ
      IF(NLOOF.GT.0) FRALOF(I,3*(NLOOF-1)+K) = FRAME(I,K)
   30 CONTINUE
      IF(NLOOF.EQ.1) GO TO 8
      IF(NLOOF.EQ.2) GO TO 2
C
C*** INTRODUCE THE DISPLACEMENT CONTRIBUTIONS IN VARIOUS WBEAM LOCATIONS
C
      DO 34 NOD = 1,3
      DO 34 IUVW = 1,3
      KOL = 3*(NOD-1)**2 + IUVW
      WBEAM(IUVW,KOL) = WCORN(NOD,1)
      WBEAM(4,KOL) = WCORN(NOD,2)*FRAME(IUVW,1)/SIDE
      DO 34 NSHEAR = 2,3
   34 WBEAM(NSHEAR+9,KOL) = WCORN(NOD,2)*FRAME(IUVW,NSHEAR)/SIDE
C
C*** ROTATIONS: THE LOOFS NEED TRANSFORMING, STORE THEM IN COLUMNS 22-27
C
      DO 38 NOD = 1,4
      DO 38 IUVW = 1,3
      KOL = (NOD*(9-2*NOD)-1)*NOD/2 + 12 + IUVW
      DO 36 IXYZ = 1,3
   36 WBEAM(IXYZ+4,KOL) = WLOOF(NOD,1)*FRAME(IUVW,IXYZ)
      WBEAM(8,KOL) = WLOOF(NOD,2)*FRAME(IUVW,3)/SIDE
      WBEAM(9,KOL) = -WLOOF(NOD,2)*FRAME(IUVW,2)/SIDE
      WBEAM(10,KOL) = WLOOF(NOD,2)*FRAME(IUVW,1)/SIDE
      WBEAM(11,KOL) = -WLOOF(NOD,1)*FRAME(IUVW,3)
   38 WBEAM(12,KOL) = WLOOF(NOD,1)*FRAME(IUVW,2)
C
C*** THE ROTATIONS AT THE LOOF NODES ARE THEMSELVES IN LOCAL DIRECTIONS.
C
      DO 42 KOL = 7,12
      NDEL = (KOL+14)/3*3
      DO 42 NROW = 1,12
      GASH = 0.0
      DO 40 J = 1,3
   40 GASH = GASH + WBEAM(NROW,J+NDEL)*FRALOF(J,KOL-6)
   42 WBEAM(NROW,KOL) = -GASH
C
C*** IF END NODE NUMBERS ARE IN DESCENDING ORDER, ADJUST LOOF ROTATIONS.
C
      IF(LNODS(1,NEL).LT.LNODS(3,NEL)) RETURN
      DO 44 NROW = 1,12
      GASH = WBEAM(NROW,7)
      WBEAM(NROW,7) = -WBEAM(NROW,10)
   44 WBEAM(NROW,10) = -GASH
      RETURN
   99 WRITE(6,620) NERROR
 620  FORMAT(//6H ERROR,I2,10H IN LOFBEM)
      STOP
      END
C
C
      SUBROUTINE SFRBEM(XLOCAL)
C4572
C*** ROUTINE TO COMPUTE 3-NODE AND 4-NODE SHAPE FUNCTIONS FOR NEW BEAM.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/BEAMS/SIDE, WBEAM(12,27), WCORN(3,2), WLOOF(4,2)
      DIMENSION COEF(43)
      DATA COEF/.5,-.5,0.0, 1.0,-.5, -1.0,0.0,1.0, -2.0,0.0, .5,.5,0.0,
     1	 1.0,.5, -.75,.75,.25,-.25, -2.25,1.5,.25, 1.299038106,-.75,
     2	 -1.299038106,.75, 3.897114318,-1.5,-1.299038106, -1.299038106,
     3	 -.75,1.299038106,.75, -3.897114318,-1.5,1.299038106, .75,.75,
     4	 -.25,-.25, 2.25,1.5,-.25/
      IF(ABS(XLOCAL).GT.1.0) GO TO 99
      NZ = 0
      DO 4 NOD = 1,7
      DO 4 IDIF = 1,2
      NA = NZ + 2
      NZ = NA + 2-IDIF + NOD/4
      GASH = COEF(NA-1)
      DO 2 N = NA,NZ
    2 GASH = GASH*XLOCAL + COEF(N)
      IF(NOD.LE.3) WCORN(NOD,IDIF) = GASH
      IF(NOD.GE.4) WLOOF(NOD-3,IDIF) = GASH
    4 CONTINUE
      RETURN
   99 WRITE(6,600)
 600  FORMAT(//18H ERROR 4 IN SFRBEM)
      STOP
      END
C
C
      SUBROUTINE SFR(LNODZ, LTYP, NDIM, NSTAGE, WCORN, XLOCAL)
C4607
C*** SHAPE FUNCTION SUBROUTINE CREATES ALL PARENT ISOPARAMETRIC ELEMENTS
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/COEF/COEF(247)
      DIMENSION FACT(3), HAFXYZ(3,8), MD(4), TERMV(46), TURNER(2,3),
     .	 WCORN(10,4), WLOOF(10,3), XLOCAL(3)
      DATA MD/8, 43, 90, 171/, TERMV/0.0, 1.0, 44*0.0/
      DATA HAFXYZ/-.5,-.5,-.5, .5,-.5,-.5, .5,.5,-.5, -.5,.5,-.5,
     .	 -.5,-.5,.5, .5,-.5,.5, .5,.5,.5, -.5,.5,.5/
      DATA TURNER/1., 0., 0., 1., -1., -1./
C
C*** CREATE THE LIST OF POLYNOMIAL TERMS AND THEIR XI, ETA DERIVATIVES.
C
      XI = XLOCAL(1)
      ETA = XLOCAL(2)
      ZETA = XLOCAL(3)
      IF(ABS(XI).GT.1.0. OR .ABS(ETA).GT.1.0. OR .ABS(ZETA).GT.1.0. OR .
     .	((LNODZ.EQ.3.OR.LNODZ.EQ.6). AND .(XI.LT.0.0.OR.ETA.LT.0.0.OR.
     .	 XI+ETA.GT.1.00000001D0))) GO TO 99
      IF(LNODZ.EQ.3) GO TO 20
      IF(LNODZ.EQ.4. OR .LTYP.EQ.9) GO TO 24
      IA = 2
      NZ = (LNODZ+NSTAGE-3)/2
      DO 6 N = 1,NZ
      IAN = IA + N
      N2 = N + 15
      N3 = N + 30
      DO 4 J = IA,IAN
      TERMV(J+N) = TERMV(J)*XI
      TERMV(J+N2) = TERMV(J)*(IAN-J)
    4 TERMV(J+N3) = TERMV(J-1)*(J-IA)
      IA = IAN
    6 TERMV(IA+N) = TERMV(IA-1)*ETA
C
C*** CREATE SPECIAL COMBINATIONS FOR LOOF NODES, ETC.
C
      DO 8 I = 8, 38, 15
      IF(LNODZ.EQ.6) TERMV(I) =
     .	 2.0*(TERMV(I)-TERMV(I+3)) + 3.0*(TERMV(I+1)-TERMV(I+2))
      IF(LNODZ.EQ.8) TERMV(I) = TERMV(I+2)
      IF(LNODZ.EQ.8) TERMV(I+2) = TERMV(I+6)
    8 CONTINUE
C
C*** USE TERMV TO FIND WCORN AND WLOOF AND XI, ETA DERIVATIVES.
C
      NFOISZ = (NSTAGE+1)/2
      DO 18 NFOIS = 1, NFOISZ
      NZ = (3*LNODZ)/2 + NFOIS - 4
      IF(NZ.NE.10) GO TO 12
      NZ = 9
      DO 10 I = 10, 40, 15
   10 TERMV(I) = TERMV(I+3) - TERMV(I+5)
   12 NDEL = 0
      DO 18 I = 1,3
      DO 16 N = 1,NZ
      GASH = 0.0
      MDEL = MD(LNODZ+NFOIS-6) + N*NZ - 15*I
      MA = 16*I - 14
      MZ = 15*I+NZ-14
      DO 14 M = MA,MZ
   14 GASH = GASH + TERMV(M)*COEF(M+MDEL)
      IF(NFOIS.EQ.1) WCORN(N+NDEL,I) = GASH
      IF(NFOIS.EQ.2) WLOOF(N+NDEL,I) = GASH
   16 CONTINUE
   18 NDEL = 1
C
C*** TURNER'S LINEAR TRIANGLE, THE VERY SIMPLEST ISOPARAMETRIC ELEMENT.
C
      RETURN
   20 DO 22 I = 1,2
      WCORN(I,1) = XLOCAL(I)
      DO 22 J = 1,3
   22 WCORN(J+1,I+1) = TURNER(I,J)
      WCORN(3,1) = 1.0 - XI - ETA
      RETURN
C
C*** TAIG'S QUADRILATERAL OF ABOUT 1957 IS THE SIMPLEST NONTRIVIAL ISO-P
C
   24 DO 28 NOD = 1,LNODZ
      GASH = 1.0
      DO 26 IXYZ = 1,NDIM
      FACT(IXYZ) = 0.5 + XLOCAL(IXYZ)*HAFXYZ(IXYZ,NOD) + 1.0E-30
   26 GASH = GASH*FACT(IXYZ)
      WCORN(NOD,1) = GASH
      DO 28 IXYZ = 1,NDIM
   28 WCORN(NOD+1,IXYZ+1) = GASH*HAFXYZ(IXYZ,NOD)/FACT(IXYZ)
      RETURN
C
C*** ERROR DIAGNOSTICS, IF POINT LIES OUTSIDE ELEMENT.
C
   99 WRITE(0,610) XI, ETA, ZETA
 610  FORMAT(/30H ERROR 11 IN SEGMENT SFR, XI =,F15.9,3X,5HETA =,F15.9,
     .	 3X,6HZETA =,F15.9)
      STOP
      END
C
C

C.... *****************************************************************<-70
      subroutine FILLCOMMON(mynen, mydm, myn, myior, myiow, mynh1, 
     1                      mynh2, mynh3, sumnh, myh, myctan, nrcount)
C .....................................................................
C     fillCommon - a fortran subroutine to fill the named common block
C                  used by the elements .. NOT YET TAKING ALL ARGS
C
C     written:  fmk
C     created:  03/99
C     revision: A
C .....................................................................

      implicit none

C.... common declarations
      character*4 o,head
      common /bdata/ o,head(20)

      integer         numnp,numel,nummat,nen,neq,ipr
      common /cdata/  numnp,numel,nummat,nen,neq,ipr

      real*8          dm
      integer            n,ma,mct,iel,nel
      common /eldata/ dm,n,ma,mct,iel,nel

      real *8         bpr, ctan
      common /eltran/ bpr(3), ctan(3)

      integer         ior,iow
      common /iofile/ ior,iow

      integer         nh1,nh2,nh3
      common /hdata/  nh1,nh2,nh3

      real*8          tol,rnmax,shift
      logical                         linear,shflg
      common /rdata/  tol,rnmax,shift,linear,shflg

      real*8  hr
      common  hr(10000)


C ... subroutine arguments
C.... *****************************************************************<-70
      integer mynen, myn, myior, myiow, mynh1, mynh2, mynh3, sumnh
      integer nrcount
      real *8 mydm, myh(*), myctan(*)

C ... local variables
      integer  i

C ... simply set the variables in the common blocks      
      nen = mynen
      n = myn
      ior = myior
      iow = myiow
      nh1 = mynh1
      nh2 = mynh2
      nh3 = mynh3
      rnmax = nrcount

C ... copy the stuff in the h array to the common block
      if (sumnh.gt.10000) then
         write(*,*)'fillCommon.f - allocated common block of'
         write(*,*)'needs to be of size: ',sumnh
         stop
      endif
      

      do i=1,sumnh
         hr(i) = myh(i)
      enddo

      ctan(1) = myctan(1)
      ctan(2) = myctan(2)
      ctan(3) = myctan(3)

      end
C
C
C.... *****************************************************************<-70
      subroutine GETCOMMON(mynh1, mynh3, sumnh, myh)
C .....................................................................
C     getCommon - a fortran subroutine to read info from the feap
C                 common blocks
C
C     written:  fmk
C     created:  03/99
C     revision: A
C .....................................................................

      implicit none

C.... common declarations
      character*4 o,head
      common /bdata/ o,head(20)

      integer         numnp,numel,nummat,nen,neq,ipr
      common /cdata/  numnp,numel,nummat,nen,neq,ipr

      real*8          dm
      integer            n,ma,mct,iel,nel
      common /eldata/ dm,n,ma,mct,iel,nel

      real *8         bpr, ctan
      common /eltran/ bpr(3), ctan(3)

      integer         ior,iow
      common /iofile/ ior,iow

      integer         nh1,nh2,nh3
      common /hdata/  nh1,nh2,nh3

      real*8  hr
      common  hr(10000)

C ... subroutine arguments
      integer mynh1, mynh3, sumnh
      real *8 myh(*)

C ... local variables
      integer  i

C ... simply retrieve the variables from the common blocks     
      mynh1 = nh1
      mynh3 = nh3

C ... copy the stuff from the common block to the h array
      do i=1,sumnh
         myh(i) = hr(i)
      enddo

      end
C
C
      SUBROUTINE BEAMSTIF(CARMA,GRAVY,LNODS,NUMAV,XYZCO,IELEM,NCARA,
     .                    NELEM,NNODE,NOELZ,NUMAT)
C
C***  TO CREATE THE STIFFNESS, LOAD AND STRESS MATRICES FOR THE
C***  SEMILOOF BEAM ELEMENT
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION XYZCO(NNODE,3),ELOAD(17),ELSTIF(153),LNODS(NOELZ,NELEM),
     .  STREM(6,34), NUMAV(NELEM),CARMA(NUMAT,NCARA),B(6,17),
     .  DB(6),DMD(6,6),STRESM(17,6),FRALOF(3,6),GRAVY(3),STRRO(3,2),
     .  POINT(3),ROW(32),ATNOD(3),ELXYZ(3,3),WBEAM(12,27),SHEAR(4,21),
     .  DEXCE(3)
      COMMON/B/CGAUS(5),XGAUS(5)
      DATA CGAUS/1.0,1.0,.555555556,.555555556,.888888889/
     .     XGAUS/-.577350269,.577350269,-0.7745966692,.7745966692,0.0/
C
C***  SECTION PROPERTIES ARE ASSUEMD TO BE CONSTANT OVER THE ELEMENT
C
      LPROP=NUMAV(IELEM)
      VOUNG=CARMA(LPROP,1)
      SHEMD=CARMA(LPROP,2)
      TAREA=CARMA(LPROP,3)
      ZZMOM=CARMA(LPROP,4)
      YYMOM=CARMA(LPROP,5)
      POLMO=CARMA(LPROP,6)
      DENST=CARMA(LPROP,7)
      DO 2 I=1,3
          ATNOD(I)=CARMA(LPROP,7+I)
2     CONTINUE
      EXCEN=CARMA(LPROP,11)
      DO 3 I=1,3
          DEXCE(I)=CARMA(LPROP,11+I)
3     CONTINUE
C
C***  EXTRACT ELEMENT COORDINATES AND INITIALISE ARRAYS
C
      DO 4 NOD=1,3
          NODE=IABS(LNODS(NOD,IELEM))
          DO 4 I=1,3
              ELXYZ(NOD,I)=XYZCO(NODE,I)
          CONTINUE
4     CONTINUE
      DO 6 I=1,17
          ELOAD(I)=0.0
6     CONTINUE
      DO 8 I=1,153
          ELSTIF(I)=0.0
8     CONTINUE
      DO 10 I=1,36
          DMD(I,1)=0.0
10    CONTINUE
C
C***  ENTER THE TWO INTEGRATING LOOPS - TWO POINTS, THEN THREE POINT
C
      LVABZ=21
      KOUNT=0
      DO 22 IGAUS=1,5
          KOUNT=KOUNT+1
          XI=XGAUS(IGAUS)
          CALL BLOFBEAM(FRALOF,LNODS,ELXYZ,SIDE,WBEAM,NOELZ,LVABZ,IELEM,
     .                  NELEM,POINT,XI,KOUNT,ATNOD,EXCEN,DEXCE,SHEAR)
          PRINT*,"BACK TO BEAMSTIF"
C
C***  MODULUS MATRIX IS DIAGONAL -AT WORST IT COULD BE TWO 3X3 PARTS
C
          TEN=YOUNG*SIDE*CGAUS(IGAUS)
          SHE=SHEMD*SIDE*CGAUS(IGAUS)
          DMD(1,1)=TEN*TAREA
          DMD(2,2)=SHE*TAREA
          DMD(3,3)=SHE*TAREA
          DMD(4,4)=TEN*ZZMOM
          DMD(5,5)=TEN*YYMOM
          DMD(6,6)=SHE*POLMO
C
C***  FIRST INTRODUCE THE GRAVIT LOADS, THE COMPONENTS DUE TO WEIGHT
C
          NV=1
          DO 18 IVAB=1,17
              IF(IGAUS.GT.2) GOTO 13
              TEMP=0.0
              DO 12 K=1,3
                  TEMP=TEMP+WBEAM(K,IVAB)*GRAVY(K)
12            CONTINUE
              ELOAD(IVAB)=ELOAD(IVAB)+TEMP*SIDE*TAREA*DENST*CGAUS(IGAUS)
13            CONTINUE
C
              B(1,IVAB)=WBEAM(4,IVAB)
C
C***  MATRIX B SHEARING TERMS MUST BE RELATIVE TO THE SHEAR CENTER
C
              B(2,IVAB)=WBEAM(11,IVAB)
              B(3,IVAB)=WBEAM(12,IVAB)
C
C***  TENSILE CONTRIBUTION IS THAT OF THE FIBER AT THE CENTROID
C
              B(4,IVAB)=WBEAM(8,IVAB)
              B(5,IVAB)=WBEAM(9,IVAB)
              B(6,IVAB)=WBEAM(10,IVAB)
C
C***  CALCUATE CURRENT WORKING COLUMN OF MATRIX D TIMES B
C
              DO 14 I=1,6
                  DB(I)=DMD(I,I)*B(I,IVAB)
C
C***  ALSO WITH IGAUS = 1 OR 2 WE CREATE THE STRESS MATRIX
C
                  IF(IGAUS.GT.2) STRESM(I,IVAB)=DB(I)/SIDE/CGAUS(IGAUS)
14            CONTINUE
C
C***  USE DB TO MAKE ITS CONTRIBUTION TO THE STIFFNESS MATRIX
C
              DO 18 JVAB=1,IVAB
                  GASH=ELSTIF(NV)
C
C***  IGAUS = 1,2 USES TENSILE AND SHEAR
C***  IGAUS = 3,4,5 USES BENDING AND TORSION
C
                  JA=1+IGAUS/3*3
                  JZ=JA+2
                  DO 16 J=JA,JZ
                      GASH=GASH+B(J,JVAB)*DB(J)
16                CONTINUE
                  ELSTIF(NV)=GASH
                  NV=NV+1
18        CONTINUE
C
C***  KEEP SOME GEOMETRIC INFORMATION TO PRINT LATER
C     WITH THE STRESSES
C
          IF(IGAUS.LE.2) GOTO 22
          WRITE(*)SIDE,(POINT(I),I=1,3),((STRESM(I,J),I=1,6),J=1,17)
22    CONTINUE
C
      WRITE(*)(ELSTIF(I),I=1,153)
      WRITE(*)(ELOAD(I),I=1,17)
C     
      RETURN
      END
C
C
      SUBROUTINE BLOFBEAM(FRLOF,LNODS,ELXYZ,ESIDE,WBEAM,NNODE,
     .   LVABZ,IELEM,NELEM,POINT,XI,IGAUS,VANPO,EXCEN,DEXCE,SHEAR)
C
C***  MASTER PROGRAM FOR 'LOFBEAM'
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION FRLOF(3,6),LNODS(NNODE,NELEM),ELXYZ(3,3),SHEAR(4,21),
     .   VANPO(3),POINT(3),DEXCE(3),WBEAM(12,27)
C
C***  ELXYZ,FRLOF, AND SHEAR ARE GENERATED ONLY ONCE FOR EACH ELEMENT
C
      IF(IGAUS.EQ.1) THEN
          CALL BCHECK(ELXYZ)
          CALL CFRLOF(ELXYZ,FRLOF,VANPO)
          CALL BSHEAR(NNODE,IELEM,NELEM,LNODS,VANPO,ELXYZ,FRLOF,SHEAR,
     .                EXCEN,DEXCE)
      ENDIF
C
C***  AN ARRAY WBEAM IS GENERATED FOR EACH GAUSS POINT
C
      CALL BWBEAM(NNODE,IELEM,NELEM,LNODS,VANPO,POINT,XI,ELXYZ,FRLOF,
     .            ESIDE,SHEAR, WBEAM,EXCEN,DEXCE)
C
      RETURN
      END
C     
C
      SUBROUTINE CFRLOF(ELXYZ,FRLOF,VANPO)
C
C***  CREATES MATRIX 'FRLOF' LISTING THE UNIT VECTOR AT LOOF NODE
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION WCORN(3,2),WLOOF(4,2),FRAME(3,3),FRLOF(3,6),VANPO(3),
     .          ELXYZ(3,3),POINT(3)
      COMMON/BFR/XILOOF(2)
      DATA XILOOF/-.577350269,+.577350269/
C
      DO 20 NLOOF=1,2
          XLOCAL=XILOOF(NLOOF)
          CALL SFRBEAM(XLOCAL,WCORN,WLOOF)
          CALL BFRAME(ELXYZ,WCORN,VANPO,FRAME,ESIDE,POINT)
          DO 20 I=1,3
              DO 20 J=1,3
                  FRLOF(I,3*(NLOOF-1)+J)=FRAME(I,J)
20    CONTINUE
C
      RETURN
      END
C
C
      SUBROUTINE BSHEAR(NNODE,IELEM,NELEM,LNODS,VANPO,ELXYZ,FRLOF,
     .                 SHEAR,EXCEN,DEXCE)
C
C***  TO CREATE THE MATRIX OF CONSTRAINTS [C]*SHEAR
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION LNODS(NNODE,NELEM),WBEAM(12,27),WCORN(3,2),WLOOF(4,2),
     .        FRAME(3,3),FRLOF(3,6),ELXYZ(3,3),SHEAR(4,21),X(2),DEXCE(3)
C
C***  GET RAW MATERIAL FOR DEFINING THE CONSTRAINTS
C
      X(1)=-.577350269
      X(2)=+.577350269
C
C***  CREATE EQUATIONS TO ELIMINATE ROTATIONS
C
      DO 100 LNOD=1,2
          XLOCAL=X(LNOD)
          CALL BMAIN(NNODE,IELEM,NELEM,LNODS,VANPO,POINT,XLOCAL,ELXYZ,
     .               FRLOF,ESIDE,WBEAM,EXCEN,DEXCE,1)
          DO 100 J=1,21
              SHEAR(2*LNOD-1,J)=WBEAM(11,J)
              SHEAR(2*LNOD  ,J)=WBEAM(12,J)
100   CONTINUE
C
C***  A NON REDUCED ARRAY SHEAR HAS BEEN CREATED
C
C***  CHOOSE PIVOT FOR REDUCING SHEAR AND DO ROW INTERCHANGE
C
      DO 70 LIM=1,4
          KP=17+LIM
          PIVOT=0.0
          DO 30 L=LIM,4
              IF(ABS(PIVOT).GT.ABS(SHEAR(L,KP))) GOTO 30
              LBIG=L
              PIVOT=SHEAR(LBIG,KP)
30        CONTINUE
          IF(PIVOT.EQ.0.0) GOTO 45
          DO 40 K=1,21
              CHANGE=SHEAR(LBIG,K)
              SHEAR(LBIG,K)=SHEAR(LIM,K)
              SHEAR(LIM,K)=CHANGE/PIVOT
40        CONTINUE
45        CONTINUE
C
C***  REDUCE ARRAY SHEAR TO CREATE THE CONSTRAINT MATRIX
C
      DO 60 NROW=1,4
          FACT=SHEAR(NROW,KP)
          IF(NROW.EQ.LIM.OR.FACT.EQ.0.0) GOTO 60
          DO 50 KOL=1,21
              SHEAR(NROW,KOL)=SHEAR(NROW,KOL)-
     .                        FACT*SHEAR(LIM,KOL)
50        CONTINUE
60        CONTINUE
70    CONTINUE
C
      RETURN
      END
C
C
      SUBROUTINE BWBEAM(NNODE,IELEM,NELEM,LNODS,VANPO,POINT,XLOCAL,
     .                  ELXYZ,FRLOF,ESIDE,SHEAR,WBEAM,EXCEN,DEXCEN)
C
C***  TO CREATE THE CONSTRAINED VERSION OF 'WBEAM' - SHAPE FUNCTIONS
C     ARRAY FOR THE SEMILOOF BEAM ELEMENT
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION LNODS(NNODE,NELEM),WBEAM(12,27),WCORN(3,2),WLOOF(3,2),
     .        FRAME(3,3),FRLOF(3,6),ELXYZ(3,3),SHEAR(4,21),DEXCE(3),
     .        VANPO(3)
      CALL BMAIN(NNODE,IELEM,NELEM,LNODS,VANPO,POINT,XLOCAL,ELXYZ,
     .            FRLOF,ESIDE,WBEAM,EXCEN,DEXCE,2)
C
C***  USE ARRAY SHEAR TO CONSTRAIN WBEAM
C
      DO 20 I=1,21
          DO 20 J=1,12
              TEMP=WBEAM(I,J)
              DO 10 K=1,4
                  TEMP=TEMP+WBEAM(J,K+17)*SHEAR(K,I)
10            CONTINUE
              WBEAM(J,I)=TEMP
          CONTINUE
20    CONTINUE
C
      RETURN
      END
C
C
      SUBROUTINE BMAIN(NNODE,IELEM,NELEM,LNODS,VANPO,POINT,XLOCAL,
     .                 ELXYZ,FRLOF,ESIDE,WBEAM,EXCEN,DEXCE,IFLAG)
C
C***  GENERATES THE INITIAL (NONCONSTRAINTED) VERSION OF 'WBEAM'
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION LNODS(NNODE,NELEM),WBEAM(12,27),WCORN(3,2),WLOOF(4,2),
     .    FRAME(3,3),FRLOF(3,6),ELXYZ(3,3),DEXCE(3),DGLOB(3),EMAT(3,3),
     .    VANPO(3)
      COMMON/WB/INDIR(9),INDROT(18)
      DATA INDIR/1,2,3,7,8,9,12,13,14/
     .    INDROT/4,5,6,22,23,24,25,26,27,15,16,17,10,18,19,11,20,21/
C
C***  IFLAG=1 IF WBEAM IS USED TO GENERATE SHEAR; IFLAG=2 IF THE REAL 
C     SHAPE FUNCTIONS ARRAY 'WBEAM' IS BEING CREATED
      DO 5 I=1,12
          DO 5 J=1,27
              WBEAM(I,J)=0.0
          CONTINUE
5     CONTINUE
      CALL SFRBEAM(XLOCAL,WCORN,WLOOF)
      CALL BFRAME(ELXYZ,WCORN,VANPO,FRAME,ESIDE,POINT)
      CALL MPROD(FRAME,DEXCE,DGLOB,3,3,1)
      DO 10 I=1,3
          DO 10 J=1,3
              EMAT(I,J)=0.0
          CONTINUE
10    CONTINUE
C
C***  CREATE ECCENTRICITY MATRIX
C
      EMAT(1,2)=+EXCEN*DGLOB(3)
      EMAT(1,3)=-EXCEN*DGLOB(2)
      EMAT(2,1)=-EXCEN*DGLOB(3)
      EMAT(2,3)=+EXCEN*DGLOB(1)
      EMAT(3,1)=+EXCEN*DGLOB(2)
      EMAT(3,2)=-EXCEN*DGLOB(1)
C
C***  IMPLEMENT DISPLACEMENT CONTRIBUTIONS
C
      DO 34 NOD=1,3
          DO 34 IUVW=1,3
              KOL=INDIR(3*(NOD-1)+IUVW)
              IF(IFLAG.EQ.1) GOTO 134
              WBEAM(IUVW,KOL)=WCORN(NOD,1)
              WBEAM(4,KOL)=WCORN(NOD,2)*FRAME(IUVW,1)/ESIDE
134           CONTINUE
              DO 34 NSHEAR=2,3
                  WBEAM(NSHEAR+9,KOL)=WCORN(NOD,2)
     .                               *FRAME(IUVW,NSHEAR)/ESIDE
              CONTINUE
          CONTINUE
34    CONTINUE
      
C
C***  IMPLEMENT ROTATION CONTRIBUTIONS
C
      DO 38 NOD=1,4
          DO 38 IUVW=1,3
              KOL=INDROT(3*(NOD-1)+IUVW)
C
              TEMP1=0.0
              TEMP2=0.0
              TEMP3=0.0
              DO 37 K=1,3
                  TEMP1=TEMP1+FRAME(K,1)*EMAT(K,IUVW)
                  TEMP2=TEMP2+FRAME(K,2)*EMAT(K,IUVW)
                  TEMP3=TEMP3+FRAME(K,3)*EMAT(K,IUVW)
37            CONTINUE
              WBEAM( 4,KOL)=+WLOOF(NOD,2)*TEMP1/ESIDE
C
              IF(IFLAG.EQ.1) GOTO 138
              DO 36 IXYZ=1,3
                  WBEAM(IXYZ  ,KOL)=+WLOOF(NOD,1)*EMAT(IXYZ,IUVW)
                  WBEAM(IXYZ+4,KOL)= WLOOF(NOD,1)*FRAME(IUVW,IXYZ)
36            CONTINUE
              WBEAM( 8,KOL)= WLOOF(NOD,2)*FRAME(IUVW,3)/ESIDE
              WBEAM( 9,KOL)=-WLOOF(NOD,2)*FRAME(IUVW,2)/ESIDE
              WBEAM(10,KOL)= WLOOF(NOD,2)*FRAME(IUVW,1)/ESIDE
138           CONTINUE
              WBEAM(11,KOL)=-WLOOF(NOD,1)*FRAME(IUVW,3)
     .                      +WLOOF(NOD,2)*TEMP2/ESIDE
              WBEAM(12,KOL)= WLOOF(NOD,1)*FRAME(IUVW,2)
     .                      +WLOOF(NOD,2)*TEMP3/ESIDE
          CONTINUE
38    CONTINUE
C
C***  TRANSFORM LOOF ROTATIONS FROM GLOBAL TO LOCAL AXES
C
C     (IF SHEAR IS BING CREATED DEAL WITH ROWS 11 AND 12)
      NF=1
      IF(IFLAG.EQ.1) NF=11
      DO 42 KOL=13,18
          IKOL=INDROT(KOL)
          NDEL=(KOL-10)/3*3
          DO 42 NROW=NF,12
              GASH=0.0
              DO 40 J=1,3
                  JMNDEL=INDROT(J+NDEL)
                  GASH=GASH+WBEAM(NROW,JMNDEL)*FRLOF(J,KOL-12)
40            CONTINUE
              WBEAM(NROW,IKOL)=+GASH
          CONTINUE
42    CONTINUE
C
C***  IF END NODE NUMBERS ARE IN DESCENDING ORDER, ADJUST LOOF ROTATIONS
C
      IF(LNODS(1,IELEM).LT.LNODS(3,IELEM)) GOTO 45
      DO 44 NROW=NF,12
          GASH=WBEAM(NROW,10)
          WBEAM(NROW,10)=-WBEAM(NROW,11)
          WBEAM(NROW,11)=-GASH
44    CONTINUE
45    CONTINUE
C
      RETURN
      END
C
C
      SUBROUTINE BCHECK(ELXYZ)
C
C***  TO CHECK IF MIDSIDE NODE IS NEARLY CENTRAL AND CURVATURE IS NOT EXCESSIVE
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION ELXYZ(3,3)
C
      GASH=0.0
      GISH=0.0
      GUSH=0.0
      DO 10 I=1,3
          GASH=GASH+(ELXYZ(3,I)-ELXYZ(2,I))**2
          GISH=GISH+(ELXYZ(1,I)-ELXYZ(2,I))**2
          GUSH=GUSH+(ELXYZ(1,I)-ELXYZ(2,I)*2.0+ELXYZ(3,I))**2
10    CONTINUE
      NERROR=2
      IF(ABS(GASH-GISH).GT.0.40*(GASH+GISH)) GOTO 99
      NERROR=3
      IF(GUSH.GT.0.25*(GASH+GISH)) GOTO 99
C
      RETURN
99    WRITE(*,9999) NERROR
9999  FORMAT("STOP -BCHECK ERROR",I3)
      STOP
      END
C
C
      SUBROUTINE SFRBEAM(XLOCAL,WCORN,WLOOF)
C
C***  CREATE SHAPE FUNCTIONS 'N' (FOR DISPLACEMENT) AND 'L' (FOR
C     ROTATIONS
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION WCORN(3,2),WLOOF(4,2)
C
      COMMON/SFRB/COEF(43)
      DATA COEF/.5,-.5,0.0, 1.0,-.5, -1.0,0.0,1.0, -2.0,0.0, .5,.5,0.0,
     .	 1.0,.5, -.75,.75,.25,-.25, -2.25,1.5,.25, 1.299038106,-.75,
     .	 -1.299038106,.75, 3.897114318,-1.5,-1.299038106, -1.299038106,
     .	 -.75,1.299038106,.75, -3.897114318,-1.5,1.299038106, .75,.75,
     .	 -.25,-.25, 2.25,1.5,-.25/
C
      IF(ABS(XLOCAL).GT.1.0) GOTO 99
      NZ=0
      DO 4 NOD=1,7
        DO 4 IDIF=1,2
          NA=NZ+2
          NZ=NA+2-IDIF+NOD/4
          GASH=COEF(NA-1)
          DO 2 N=NA,NZ
    2       GASH = GASH*XLOCAL + COEF(N)
          IF(NOD.LE.3) WCORN(NOD  ,IDIF) = GASH
          IF(NOD.GE.4) WLOOF(NOD-3,IDIF) = GASH
    4 CONTINUE
      RETURN
99    WRITE(*,9999)
9999  FORMAT("ERROR : POINT OUTSIDE THE ELEMENT")
      STOP
      END
C
C
      SUBROUTINE BFRAME(ELXYZ,WCORN,VANPO,FRAME,ESIDE,POINT)
C
C***  DEFINE THE LOCAL AXES REFERENTIAL 'FRAME'
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION ELXYZ(3,3),WCORN(3,2),VANPO(3),FRAME(3,3),POINT(3)
C
C***  DEFINE THE TANGENT TO THE ELEMENT AXIS
C
      DO 12 J=1,3
          CALL SCALAR(ELXYZ(1,J),WCORN(1,1),POINT(J))
          CALL SCALAR(ELXYZ(1,J),WCORN(1,2),FRAME(J,1))
12    CONTINUE
C
C***  USE VANISHING POINT TO DEFINE THE LOCAL AXES
C
      CALL SCALAR(FRAME(1,1),FRAME(1,1),SQ)
      ESIDE=SQRT(SQ)
      IF(SQ.EQ.0.0) GOTO 18
      DO 16 I=1,3
          FRAME(I,2)=POINT(I)-VANPO(I)
16    CONTINUE
      GOTO 21
C
C***  IF THIS FAILS THEN ERECT AN AXIS NORMAL TO THE PLANE OF THE ELEMENT
C
18    DO 20 I=1,3
          FRAME(I,2)=ELXYZ(1,I)-2.0*ELXYZ(2,I)+ELXYZ(3,I)
20    CONTINUE
21    CALL SCALAR(FRAME(1,2),FRAME(1,2),SQ)
      IF(SQ.LE.ESIDE*ESIDE*1.0E-16) GOTO 99
C
C***  CREATE Z AND Y AND NORMALISE THEM TO OBTAIN UNIT VECTORS
C
28    CALL VECTOR(FRAME(1,1),FRAME(1,2),FRAME(1,3))
      CALL VECTOR(FRAME(1,3),FRAME(1,1),FRAME(1,2))
      DO 30 K=1,3
          CALL SCALAR(FRAME(1,K),FRAME(1,K),SQ)
          SQ=SQRT(SQ)
          DO 30 I=1,3
              FRAME(I,K)=FRAME(I,K)/SQ
30    CONTINUE
C
      RETURN
99    WRITE(*,9999)
9999  FORMAT("ERROR : VANISHING POINT NOT APPROPRIATE")
      STOP
      END
C
C
      SUBROUTINE MPROD(A,B,AB,M,L,N)
C
C***  MULTIPLY MATRIX (A) AND (B)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION A(M,L),B(L,N),AB(M,N)
C
      DO 20 I=1,M
        DO 20 J=1,N
          TEMP=0.D0
          DO 10 K=1,L
            TEMP=TEMP+A(I,K)*B(K,J)
10        CONTINUE
          AB(I,J)=TEMP
        CONTINUE
20    CONTINUE
C
      RETURN
      END
C
C
      BLOCK DATA
C4710
C*** TO INITIALIZE COEFFICIENTS FOR CORNER-MIDSIDE AND LOOF VERSIONS
C
C*** OF QUADRATIC TRIANGLE AND QUADRILATERAL FOR SEMILOOF SUBROUTINES.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION COEFA(166), COEFB(81)
      COMMON/COEF/COEF(247)
      COMMON/SYSTEM/MAXDIM(12,3), NDF(8,12)
      EQUIVALENCE (COEF(1),COEFA(1)), (COEF(167),COEFB(1))
      DATA COEFA/ 1.,-3.,-3., 2., 4., 2., 0., 4., 0.,-4.,-4., 0., 0.,
     1 -1., 0., 2., 0., 0., 0., 0., 0., 0., 4., 0., 0., 0.,-1., 0., 0.,
     2	2., 0., 0., 4., 0.,-4.,-4.,	       0.910683603, 1.577350269,
     3 -6.041451884,-6.196152423, 2.464101615, 8.928203230, 1.732050808,
     4 -0.244016936, 0.422649731, 2.041451884, 4.196152423,-4.464101615,
     5 -4.928203230,-1.732050808, 0.333333333,-1.422649731,-2.577350269,
     6 -1.464101615, 5.000000000, 5.464101615, 1.732050808, 0.333333333,
     7 -2.577350269,-1.422649731, 5.464101615, 5.000000000,-1.464101615,
     8 -1.732050808,-0.244016936, 2.041451884, 0.422649731,-4.928203230,
     9 -4.464101615, 4.196152423, 1.732050807, 0.910683602,-6.041451884,
     1	1.577350269, 8.928203230, 2.464101615,-6.196152422,-1.732050807,
     2 -1.,6.,6.,-6.,-6.,-6.,0.,-.25,0.,0.,.25,.25,.25,-.25,-.25,0.,
     3 .5,0.,-.5,-.5,0.,0.,0.,.5,0.,-.25,0.,0.,.25,-.25,.25,.25,-.25,0.,
     4 .5,.5,0.,0.,0.,-.5,-.5,0.,0.,-.25,0.,0.,.25,.25,.25,.25,.25,0.,
     5 .5,0.,.5,-.5,0.,0.,0.,-.5,0.,-.25,0.,0.,.25,-.25,.25,-.25,.25,0.,
     6	.5,-.5,0.,0.,0.,-.5,.5,0.,0.,1.,0.,0.,-1.,0.,-1.,0.,0.,1./
      DATA COEFB/    0.000000000, 0.216506351,-0.375000000,-0.093750000,
     1	0.216506351, 0.281250000,-0.649519053, 0.375000000,-0.324759526,
     2 -0.000000000,-0.216506351,-0.375000000,-0.093750000,-0.216506351,
     3	0.281250000, 0.649519053, 0.375000000, 0.324759526, 0.000000000,
     4	0.375000000, 0.216506351, 0.281250000,-0.216506351,-0.093750000,
     5 -0.375000000,-0.649519053,-0.324759526, 0.000000000, 0.375000000,
     6 -0.216506351, 0.281250000, 0.216506351,-0.093750000,-0.375000000,
     7	0.649519053, 0.324759526,-0.000000000,-0.216506351, 0.375000000,
     8 -0.093750000, 0.216506351, 0.281250000, 0.649519053,-0.375000000,
     9 -0.324759526, 0.000000000, 0.216506351, 0.375000000,-0.093750000,
     1 -0.216506351, 0.281250000,-0.649519053,-0.375000000, 0.324759526,
     2 -0.000000000,-0.375000000,-0.216506351, 0.281250000,-0.216506351,
     3 -0.093750000, 0.375000000, 0.649519053,-0.324759526,-0.000000000,
     4 -0.375000000, 0.216506351, 0.281250000, 0.216506351,-0.093750000,
     5 .375,-.649519053,.324759526,1.,0.,0.,-.75,0.,-.75,0.,0.,0./
C
C*** ALSO DEFINE DEGREES OF FREEDOM PER NODE, FOR ELEMENTS IN THE SYSTEM
C
      DATA NDF/1,1,1,1,1,1,1,1, 2,2,2,2,2,2,2,2, 1,1,1,1,1,1,1,1,
     .	 2,2,2,2,2,2,2,2, 3,3,3,3,3,3,3,3, 1,1,1,1,1,1,1,1,
     .	 6,6,0,0,0,0,0,0, 2,2,2,2,2,2,2,2, 3,3,3,3,3,3,3,3,
     .	 3,3,3,3,0,0,0,0, 3,5,3,5,3,5,3,5, 3,5,3,3,3,0,0,0/
      DATA MAXDIM/2,2,2,2,2,2,3,2,3,2,3,3,
     .	 3,3,3,4,6,2,4,3,6,3,6,6,
     .	 7,7,3,7,4,3,9,6,5,7,7,9/
      END

     
      
      
      
      
      
      
      
      
      
      
      
      
      
